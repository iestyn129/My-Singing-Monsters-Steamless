<?xml version="1.0" encoding="utf-8"?>
<menu xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="menu.xsd">
	<element name="FadedBG">
		<size dependentOnElement="element:name()" dependentOnComponent="Sprite" />
		<position relativeTo="SCREEN" vAnchor="VCENTER" hAnchor="HCENTER" />
		<orientation vAnchor="VCENTER" hAnchor="HCENTER" xOffset="0" yOffset="0" priorityOffset="6" />
		<spriteComponent name="Sprite">
			<event name="onInit" params="component, element">
				component("spriteName"):SetString("__BUILTIN__WHITE_TEXTURE")
				component:setScale(Vector2(lua_sys.screenWidth()*0.25, lua_sys.screenHeight()*0.25))
				component:setColor(0.0, 0.0, 0.0)
				component("alpha"):SetFloat(0.0)
				component("layer"):SetString("FrontPopUps")
			</event>
		</spriteComponent>
		<touchComponent name="Touch">
			<size dependentOnElement="element:name()" />
			<position relativeTo="element:name()" vAnchor="VCENTER" hAnchor="HCENTER" />
			<orientation vAnchor="VCENTER" hAnchor="HCENTER" xOffset="0" yOffset="0" priorityOffset="-3" />
		</touchComponent>
	</element>
	
	<template type="template_fancywindow" name="bg">
		<templateVar name="$layer" equals="FrontPopUps" />
		<position relativeTo="PARENT" vAnchor="VCENTER" hAnchor="HCENTER" />
		<orientation vAnchor="VCENTER" hAnchor="HCENTER" xOffset="-1*lua_sys.screenWidth()" yOffset="-30*game.hudScale()" priorityOffset="3" />
	</template>
	
	<element name="Title">
		<size dependentOnElement="element:name()" dependentOnComponent="Text" />
		<position relativeTo="bg" vAnchor="TOP" hAnchor="HCENTER" />
		<orientation vAnchor="TOP" hAnchor="HCENTER" xOffset="0" yOffset="10*game.hudScale()" priorityOffset="-2" />
		<textComponent name="Text">
			<size w="340*game.hudScale()" />
			<position relativeTo="element:name()" vAnchor="TOP" hAnchor="HCENTER" />
			<orientation vAnchor="TOP" hAnchor="HCENTER" xOffset="0" yOffset="0" priorityOffset="0" />
			<event name="onInit" params="component, element">
				component("textPadding"):SetInt(30)
				component("autoScale"):SetInt(1)
				component("font"):Set(game.getTextFont())
				component("alignment"):SetInt(lua_sys.MenuTextComponent_TEXT_HCENTER_ALIGNED)
				component("text"):SetString("")
				component("size"):SetFloat(0.5*game.hudScale())
				component("layer"):SetString("FrontPopUps")
				component:setColor(0.43, 1.0, 0.25)
			</event>
		</textComponent>
	</element>
	
	<element name="UnlockecItemsText">
		<size dependentOnElement="element:name()" dependentOnComponent="Text" />
		<position relativeTo="bg" vAnchor="VCENTER" hAnchor="HCENTER" />
		<orientation vAnchor="TOP" hAnchor="HCENTER" xOffset="0" yOffset="-20*game.hudScale()" priorityOffset="-2" />
		<textComponent name="Text">
			<size w="200*game.hudScale()" />
			<position relativeTo="element:name()" vAnchor="TOP" hAnchor="HCENTER" />
			<orientation vAnchor="TOP" hAnchor="HCENTER" xOffset="0" yOffset="0" priorityOffset="0" />
			<event name="onInit" params="component, element">
				component("textPadding"):SetInt(30)
				component("autoScale"):SetInt(1)
				component("font"):Set(game.getTextFont())
				component("alignment"):SetInt(lua_sys.MenuTextComponent_TEXT_HCENTER_ALIGNED)
				component("text"):SetString("")
				component("size"):SetFloat(0.25*game.hudScale())
				component("layer"):SetString("FrontPopUps")
				component:calculatePosition()
			</event>
		</textComponent>
	</element>
	
	<element name="Monster">
		<size dependentOnElement="element:name()" dependentOnComponent="Sprite" />
		<position relativeTo="bg" vAnchor="BOTTOM" hAnchor="LEFT" />
		<orientation vAnchor="BOTTOM" hAnchor="LEFT" xOffset="0" yOffset="0" priorityOffset="-2" />
		<aeComponent name="Sprite">
			<event name="onInit" params="component, element">
				component("animationName"):SetString("xml_bin/monster_c.bin")
				component("animation"):SetString("Idle")
				component:setScale(Vector2(0.8*game.hudScale(),0.8*game.hudScale()))
				component("layer"):SetString("Tutorial")
			</event>
			<event name="onPostInit" params="component, element">
				element:setOrientationPosition(Vector2(45*game.hudScale(), -component:size().y + 25*game.hudScale()))
			</event>
		</aeComponent>
	</element>
	
	<element name="Monster2">
		<size dependentOnElement="element:name()" dependentOnComponent="Sprite" />
		<position relativeTo="bg" vAnchor="BOTTOM" hAnchor="RIGHT" />
		<orientation vAnchor="BOTTOM" hAnchor="LEFT" xOffset="0" yOffset="0" priorityOffset="-2" />
		<aeComponent name="Sprite">
			<event name="onInit" params="component, element">
				component("animationName"):SetString("xml_bin/monster_e.bin")
				component("animation"):SetString( "Idle" )
				component:setScale(Vector2(0.8*game.hudScale(),0.8*game.hudScale()))
				component("layer"):SetString("Tutorial")
			</event>
			<event name="onPostInit" params="component, element">
				element:setOrientationPosition(Vector2(-45*game.hudScale(), -component:size().y + 10*game.hudScale()))
			</event>
		</aeComponent>
	</element>

	<template type="template_spritesheetbutton" name="OkayButton">
		<templateVar name="$upSpriteName" equals="button_continue_green" />
		<templateVar name="$sheetName" equals="'xml_resources/buttons01.xml'" />
		<templateVar name="$spriteScale" equals="0.5*game.hudScale()" />
		<templateVar name="$layer" equals="Tutorial" />
		<position relativeTo="bg" vAnchor="BOTTOM" hAnchor="HCENTER" />
		<orientation vAnchor="TOP" hAnchor="HCENTER" xOffset="0" yOffset="0" priorityOffset="-2" />
		<touchComponent name="Touch">
			<event name="onTouchUp" params="component, element">
				onTouchUp(component, element)
				element:parent()("transitionState"):SetInt(2)
			</event>
		</touchComponent>
	</template>
	
	<element name="ContinueLabel">
		<position relativeTo="OkayButton" vAnchor="VCENTER" hAnchor="HCENTER" />
		<orientation vAnchor="VCENTER" hAnchor="HCENTER" xOffset="0" yOffset="0" priorityOffset="-1" />
		<textComponent name="Text">
			<size dependentOnElement="OkayButton" dependentOnComponent="UpSprite" />
			<position relativeTo="element:name()" vAnchor="VCENTER" hAnchor="HCENTER" />
			<orientation vAnchor="VCENTER" hAnchor="HCENTER" xOffset="0" yOffset="0" priorityOffset="0" />
			<event name="onInit" params="component, element">
				component("autoScale"):SetInt(1)
				component("font"):Set(game.getTextFont())
				component("alignment"):SetInt(lua_sys.MenuTextComponent_TEXT_HCENTER_ALIGNED)
				component("text"):SetString("CONTINUE")
				component("size"):SetFloat(0.25*game.hudScale())
				component("layer"):SetString("Tutorial")
			</event>
		</textComponent>
	</element>
	
	<event name="onInit" params="element">
		collectgarbage("stop")
	</event>
	
	<event name="onPostInit" params="element">
		element("transitionState"):SetInt(1)
		element("transitionTime"):SetFloat(0.0)
		lua_sys.playSoundFx("audio/sfx/menu_slide.wav")
	</event>
	
	<event name="onTick" params="element, dt">
		<![CDATA[
			if(dt < 0.25) then
				local transitionState = element("transitionState"):GetInt()
				
				if(transitionState ~= 0) then
					local transitionTime = element("transitionTime"):GetFloat()
					
					element:DoStoredScript("TickTransition")
		
					if(transitionState == 1) then
						transitionTime = (transitionTime + dt*3)
					elseif(transitionState == 2) then
						transitionTime = (transitionTime - dt*3)
					end
					
					transitionTime = clamp(transitionTime, 0.0, 1.0)
					
					element("transitionTime"):SetFloat(transitionTime)
					
					if(transitionTime >= 1.0) then
						collectgarbage("collect")
						collectgarbage("restart")
						element("transitionState"):SetInt(0)
						element("transitionTime"):SetFloat(1.0)
						element:DoStoredScript("TickTransition")
					elseif(transitionTime <= 0.0) then
						collectgarbage("collect")
						collectgarbage("restart")
						element:root():popPopUp()
					else
						collectgarbage("step", 10)
					end
				end
			end
		]]>
	</event>

	<event name="TickTransition" params="element">
		local transitionTime = element("transitionTime"):GetFloat()
		element["bg"]("xOffset"):SetFloat(lua_sys.screenWidth()*(0.5) + (-0.5)*lua_sys.screenWidth()*(1/transitionTime))
		element["FadedBG"]["Sprite"]("alpha"):SetFloat(transitionTime*0.5)
	</event>
	
	<event name="queuePop" params="element">
		collectgarbage("stop")
		element("transitionState"):SetInt(2)
	</event>
	
</menu>