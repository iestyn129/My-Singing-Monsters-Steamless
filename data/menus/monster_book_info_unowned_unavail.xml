<?xml version="1.0" encoding="utf-8"?>
<menu xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="menu.xsd">

	<element name="FadedBG">
		<size dependentOnElement="element:name()" dependentOnComponent="Sprite" />
		<position relativeTo="SCREEN" vAnchor="VCENTER" hAnchor="HCENTER" />
		<orientation vAnchor="VCENTER" hAnchor="HCENTER" xOffset="0" yOffset="0" priorityOffset="10" />		
		<spriteComponent name="Sprite">
			<event name="onInit" params="component, element">
				component("spriteName"):SetString("__BUILTIN__WHITE_TEXTURE")
				component:setScale(Vector2(lua_sys.screenWidth()*0.25, lua_sys.screenHeight()*0.25))
				component:setColor(0.0, 0.0, 0.0)
				component("alpha"):SetFloat(0.65)
				component("layer"):SetString("FrontPopUps")
			</event>
		</spriteComponent>
		<touchComponent name="Touch">
			<size dependentOnElement="element:name()" />
			<position relativeTo="element:name()" vAnchor="VCENTER" hAnchor="HCENTER" />
			<orientation vAnchor="VCENTER" hAnchor="HCENTER" xOffset="0" yOffset="0" priorityOffset="0" />
		</touchComponent>
	</element>
	
	<element name="InfoFrame">
		<size dependentOnElement="element:name()" dependentOnComponent="Sprite" />
		<position relativeTo="PARENT" vAnchor="VCENTER" hAnchor="RIGHT" />
		<orientation vAnchor="VCENTER" hAnchor="LEFT" xOffset="-300*(lua_sys.screenWidth()/480.0)" yOffset="-25*game.menuScaleY()" priorityOffset="5" />
		<event name="onInit" params="element">
			lua_sys.playSoundFx("audio/sfx/menu_slide.wav")
		</event>
		<ninesliceComponent name="Sprite">
			<size w="291*game.menuScaleX()" h="180*game.menuScaleY()" />
			<position relativeTo="element:name()" vAnchor="VCENTER" hAnchor="HCENTER" />
			<orientation vAnchor="VCENTER" hAnchor="HCENTER" xOffset="0" yOffset="0" priorityOffset="0" />
			<event name="onInit" params="component, element">
				component("topHeight"):SetFloat(50.0)
				component("bottomHeight"):SetFloat(50.0)
				component("leftWidth"):SetFloat(50.0)
				component("rightWidth"):SetFloat(50.0)
				component("size"):SetFloat(0.5*game.menuScaleX())
				component("includeBorder"):SetInt(1)
				component("spriteName"):SetString("gfx/menu/Black9SFrame50")
				component("layer"):SetString("FrontPopUps")
			</event>
		</ninesliceComponent>
		<element name="RightLeaves">
			<size dependentOnElement="element:name()" dependentOnComponent="Sprite" />
			<position relativeTo="InfoFrame" vAnchor="TOP" hAnchor="RIGHT" />
			<orientation vAnchor="TOP" hAnchor="RIGHT" xOffset="-15*game.menuScaleX()" yOffset="13*game.hudScale()" priorityOffset="-1" />
			<spriteSheetComponent name="Sprite">
				<event name="onInit" params="component, element">
					component("spriteName"):SetString("menu_leaves")
					component("sheetName"):SetString("xml_resources/hud01.xml")
					if(component("isSourceRotated"):GetInt() == 1) then
						component("vFlip"):SetInt(1)
					else
						component("hFlip"):SetInt(1)
					end
					component("size"):SetFloat(0.5*game.menuScaleX())
					component("layer"):SetString("FrontPopUps")
				</event>
			</spriteSheetComponent>
		</element>
		<element name="LowerLeaves">
			<size dependentOnElement="element:name()" dependentOnComponent="Sprite" />
			<position relativeTo="InfoFrame" vAnchor="BOTTOM" hAnchor="LEFT" />
			<orientation vAnchor="BOTTOM" hAnchor="LEFT" xOffset="20*game.hudScale()" yOffset="-15*game.menuScaleY()" priorityOffset="-1" />
			<spriteSheetComponent name="Sprite">
				<event name="onInit" params="component, element">
					component("spriteName"):SetString("menu_leaves")
					component("sheetName"):SetString("xml_resources/hud01.xml")
					component("size"):SetFloat(0.5*game.menuScaleX())
					component("layer"):SetString("FrontPopUps")
					component("rotation"):SetFloat(-0.4*math.pi);
				</event>
			</spriteSheetComponent>
		</element>
		<spriteSheetComponent name="Hourglass">
			<position relativeTo="element:name()" vAnchor="BOTTOM" hAnchor="RIGHT" />
			<orientation vAnchor="BOTTOM" hAnchor="RIGHT" xOffset="10*game.menuScaleX()" yOffset="-20*game.menuScaleX()" priorityOffset="-3" />
			<event name="onInit" params="component, element">
			
				if(not game.isSeasonal(element:parent()("selectedMonster"):GetInt())) then
					component("spriteName"):SetString("news_timed")
				else
					component("spriteName"):SetString("news_seasonals")
				end
				
				component("sheetName"):SetString("xml_resources/buttons01.xml")
				component("size"):SetFloat(0.5*game.menuScaleX())
				component("layer"):SetString("FrontPopUps")
			</event>
		</spriteSheetComponent>
	</element>

	<element name="InfoTitle">
		<size dependentOnElement="element:name()" dependentOnComponent="Title" />
		<position relativeTo="InfoFrame" vAnchor="TOP" hAnchor="HCENTER" />
		<orientation vAnchor="TOP" hAnchor="HCENTER" xOffset="0" yOffset="10*game.menuScaleX()" priorityOffset="-1" />
		<textComponent name="Title">
			<size w="225*game.menuScaleX()" />
			<position relativeTo="element:name()" vAnchor="TOP" hAnchor="HCENTER" />
			<orientation vAnchor="TOP" hAnchor="HCENTER" xOffset="0" yOffset="0" priorityOffset="0" />
			<event name="onInit" params="component, element">
				component("multiline"):SetInt(0)
				component:setColor(0.43, 0.98, 0.02)
				component("font"):Set(game.getTextFont())
				component("size"):SetFloat(0.40*game.menuScaleX())
				component("alignment"):SetInt(lua_sys.MenuTextComponent_TEXT_HCENTER_ALIGNED)
				component("autoScale"):SetInt(1)
				component("autoScaleFactor"):SetFloat(0.01)
				
				component("text"):SetString("MISSING_MONSTER_TITLE")
				component("layer"):SetString("FrontPopUps")
			</event>
		</textComponent>
	</element>
	
	<element name="InfoContent">
		<size w="250*game.menuScaleX()" h="104*game.menuScaleY()" />
		<position relativeTo="InfoFrame" vAnchor="VCENTER" hAnchor="HCENTER" />
		<orientation vAnchor="VCENTER" hAnchor="HCENTER" xOffset="0" yOffset="-10*game.menuScaleX()" priorityOffset="-1" />
		<textComponent name="Text">
			<size w="250*game.menuScaleX()" />
			<position relativeTo="element:name()" vAnchor="VCENTER" hAnchor="HCENTER" />
			<orientation vAnchor="VCENTER" hAnchor="HCENTER" xOffset="0" yOffset="0" priorityOffset="0" />
			<event name="onInit" params="component, element">
				component:setColor(0.9, 0.9, 0.9)
				component("font"):Set(game.getTextFont())
				component("size"):SetFloat(0.25*game.menuScaleX())
				component("alignment"):SetInt(lua_sys.MenuTextComponent_TEXT_HCENTER_ALIGNED)
				component("autoScale"):SetInt(1)
				component("autoScaleFactor"):SetFloat(0.01)
				local monsterId = element:root():GetElement("SelectedMonsterView")("selectedMonst"):GetInt()
				
				if game.getBookOfMonstersIslandType() == game.IslandTypes_GOLD_ISLAND_ID then
					--Seasonal Monster
					if game.isJamBoree(monsterId) then
						component("text"):SetString("MYSTERY_MONSTER_GOLD_S09_DESC")
					--Wubbox Monster 
					elseif game.isWubboxType(monsterId) then
						component("text"):SetString("MYSTERY_MONSTER_GOLD_BOX_DESC")
					else
						component("text"):SetString("MYSTERY_MONSTER_GOLD_DEFAULT_DESC")
					end
				elseif (game.isSeasonal(element:parent()("selectedMonster"):GetInt())) then
					local replaceText = LOC("SEASONAL_MISSING_MONSTER_DESC")
					local eventStr = LOC(game.seasonAvailable(element:parent()("selectedMonster"):GetInt()));
					local monthStr = LOC(game.monthAvailable(element:parent()("selectedMonster"):GetInt()));
					replaceText = replaceText:gsub("XXX", eventStr)
					replaceText = replaceText:gsub("YYY", monthStr)

					component("text"):SetString(replaceText)

				elseif(game.isAmberIsland(game.getBookOfMonstersIslandType())) then
					component("text"):SetString("AMBER_MISSING_MONSTER_DESC")
				elseif(game.isCelestialIsland(game.getBookOfMonstersIslandType())) then
					component("text"):SetString("CELESTIAL_OUT_OF_SEASON")
				elseif(game.canBeBred(monsterId)) then
					--could possibly be bred when it becomes available
					component("text"):SetString("MISSING_MONSTER_DESC")
				else
					--can never be bred, even when it becomes available
					component("text"):SetString("FIREEXP_MISSING_MONSTER_DESC")
				end
				component("layer"):SetString("FrontPopUps")
			</event>
		</textComponent>
	</element>

	<element name="ImageFrame">
		<size dependentOnElement="element:name()" dependentOnComponent="Sprite" />
		<position relativeTo="PARENT" vAnchor="VCENTER" hAnchor="LEFT" />
		<orientation vAnchor="VCENTER" hAnchor="RIGHT" xOffset="-160*(lua_sys.screenWidth()/480.0)" yOffset="-25*game.menuScaleY()" priorityOffset="4" />
		<ninesliceComponent name="Sprite">
			<size w="140*game.menuScaleX()" h="180*game.menuScaleY()" />
			<event name="onInit" params="component, element">
				component("topHeight"):SetFloat(50.0)
				component("bottomHeight"):SetFloat(50.0)
				component("leftWidth"):SetFloat(50.0)
				component("rightWidth"):SetFloat(50.0)
				component("size"):SetFloat(0.5*game.menuScaleX())
				component("includeBorder"):SetInt(1)
				component("spriteName"):SetString("gfx/menu/Black9SFrame50")
				component("layer"):SetString("FrontPopUps")
			</event>
		</ninesliceComponent>
		<spriteSheetComponent name="LowerRightFlourish">
			<position relativeTo="element:name()" vAnchor="BOTTOM" hAnchor="RIGHT" />
			<orientation vAnchor="BOTTOM" hAnchor="RIGHT" xOffset="7*game.menuScaleX()" yOffset="9*game.menuScaleX()" priorityOffset="-1" />
			<event name="onInit" params="component, element">
				component("spriteName"):SetString("menu_swirl_02")
				component("sheetName"):SetString("xml_resources/hud01.xml")
				component("size"):SetFloat(0.5*game.menuScaleX())
				component("layer"):SetString("FrontPopUps")
			</event>
		</spriteSheetComponent>
				<spriteSheetComponent name="Flute01">
			<position relativeTo="element:name()" vAnchor="TOP" hAnchor="LEFT" />
			<orientation vAnchor="VCENTER" hAnchor="HCENTER" xOffset="10*game.menuScaleX()" yOffset="59*game.menuScaleX()" priorityOffset="1" />
			<event name="onInit" params="component, element">
				component("spriteName"):SetString("menu_flute")
				component("sheetName"):SetString("xml_resources/hud01.xml")
				component("size"):SetFloat(0.4*game.menuScaleX())
				component("rotation"):SetFloat(-0.6)
				component("layer"):SetString("FrontPopUps")
			</event>
		</spriteSheetComponent>
		<spriteSheetComponent name="Flute02">
			<position relativeTo="element:name()" vAnchor="TOP" hAnchor="LEFT" />
			<orientation vAnchor="VCENTER" hAnchor="HCENTER" xOffset="10*game.menuScaleX()" yOffset="37*game.menuScaleX()" priorityOffset="1" />
			<event name="onInit" params="component, element">
				component("spriteName"):SetString("menu_flute")
				component("sheetName"):SetString("xml_resources/hud01.xml")
				component("size"):SetFloat(0.4*game.menuScaleX())
				component("rotation"):SetFloat(-0.4)
				component("layer"):SetString("FrontPopUps")
			</event>
		</spriteSheetComponent>
		<spriteSheetComponent name="Flute03">
			<position relativeTo="element:name()" vAnchor="TOP" hAnchor="RIGHT" />
			<orientation vAnchor="VCENTER" hAnchor="HCENTER" xOffset="-15*game.menuScaleX()" yOffset="35*game.menuScaleX()" priorityOffset="1" />
			<event name="onInit" params="component, element">
				component("spriteName"):SetString("menu_flute")
				component("sheetName"):SetString("xml_resources/hud01.xml")
				component("vFlip"):SetInt(1)
				component("size"):SetFloat(0.4*game.menuScaleX())
				component("rotation"):SetFloat(-2.55)
				component("layer"):SetString("FrontPopUps")
			</event>
		</spriteSheetComponent>
		<spriteSheetComponent name="Flute04">
			<position relativeTo="element:name()" vAnchor="TOP" hAnchor="RIGHT" />
			<orientation vAnchor="VCENTER" hAnchor="HCENTER" xOffset="-7*game.menuScaleX()" yOffset="42*game.menuScaleX()" priorityOffset="1" />
			<event name="onInit" params="component, element">
				component("spriteName"):SetString("menu_flute")
				component("sheetName"):SetString("xml_resources/hud01.xml")
				component("vFlip"):SetInt(1)
				component("size"):SetFloat(0.4*game.menuScaleX())
				component("rotation"):SetFloat(-2.35)
				component("layer"):SetString("FrontPopUps")
			</event>
		</spriteSheetComponent>
		<spriteSheetComponent name="LeftChain">
			<position relativeTo="element:name()" vAnchor="VCENTER" hAnchor="HCENTER" />
			<orientation vAnchor="VCENTER" hAnchor="RIGHT" xOffset="10*game.menuScaleX()" yOffset="30*game.menuScaleX()" priorityOffset="-3" />
			<event name="onInit" params="component, element">
				component("spriteName"):SetString("chain01")
				component("sheetName"):SetString("xml_resources/buttons01.xml")
				component("size"):SetFloat(0.5*game.menuScaleX())
				if(component("isSourceRotated"):GetInt() == 1) then
					component("vFlip"):SetInt(1)
				else
					component("hFlip"):SetInt(1)
				end
				component("layer"):SetString("FrontPopUps")
			</event>
		</spriteSheetComponent>
		
		<spriteSheetComponent name="RightChain">
			<position relativeTo="element:name()" vAnchor="VCENTER" hAnchor="HCENTER" />
			<orientation vAnchor="VCENTER" hAnchor="LEFT" xOffset="10*game.menuScaleX()" yOffset="30*game.menuScaleX()" priorityOffset="-3" />
			<event name="onInit" params="component, element">
				component("spriteName"):SetString("chain01")
				component("sheetName"):SetString("xml_resources/buttons01.xml")
				component("size"):SetFloat(0.5*game.menuScaleX())
				component("layer"):SetString("FrontPopUps")
			</event>
		</spriteSheetComponent>
		<spriteSheetComponent name="Lock">
			<position relativeTo="element:name()" vAnchor="BOTTOM" hAnchor="HCENTER" />
			<orientation vAnchor="BOTTOM" hAnchor="HCENTER" xOffset="0" yOffset="10*game.menuScaleX()" priorityOffset="-4" />
			<event name="onInit" params="component, element">
				component("spriteName"):SetString("button_lock")
				component("sheetName"):SetString("xml_resources/buttons01.xml")
				component("size"):SetFloat(0.5*game.menuScaleX())
				if(component("isSourceRotated"):GetInt() == 1) then
					component("vFlip"):SetInt(1)
				else
					component("hFlip"):SetInt(1)
				end
				component("layer"):SetString("FrontPopUps")
			</event>
		</spriteSheetComponent>
	</element>
	
	<element name="Animation">
		<size dependentOnElement="element:name()" dependentOnComponent="Sprite" />
		<position relativeTo="ImageFrame" vAnchor="VCENTER" hAnchor="HCENTER" />
		<orientation vAnchor="VCENTER" hAnchor="HCENTER" xOffset="0" yOffset="0" priorityOffset="-2" />
		<aeComponent name="Sprite">
			<event name="onInit" params="component, element">
				<![CDATA[
					local monsterType = element:parent()("selectedMonster"):GetInt();
					component("animationName"):SetString("xml_bin/"..game.monsterTypeGfxName(monsterType))
					
					if(game.IsBoxMonsterFromType(monsterType) and game.hasOrHasEverHadMonsterOnBookOfMonstersIsland(monsterType) == true) then
						if(not game.isAmberIsland(game.getBookOfMonstersIslandType())) then
							component("animation"):SetString("Activate")
							component("pingpong"):SetInt(1)
						else
							component("animation"):SetString("Idle")
						end
						local scale = 270/component:size().y;
						component:setScale(Vector2(scale*game.menuScaleX(), scale*game.menuScaleX()))
						element:setOrientationPosition(Vector2(component:size().x / 2.0, component:size().y / 2.0 + component:size().y / 4.0))
					else
						component("animation"):SetString(game.objectStoreAnim())
						local scale = 112.5/component:size().y;
						component:setScale(Vector2(scale*game.menuScaleX(), scale*game.menuScaleX()))
						element:setOrientationPosition(Vector2(component:size().x / 2.0, component:size().y / 2.0 + 15*game.hudScale()))
					end
					
					component:setColor(0,0,0);
					
					component("layer"):SetString("FrontPopUps")
				]]>
			</event>
		</aeComponent>
	</element>
	
	<element name="TitleFrame">
		<size dependentOnElement="element:name()" dependentOnComponent="Sprite" />
		<position relativeTo="ImageFrame" vAnchor="TOP" hAnchor="HCENTER" />
		<orientation vAnchor="TOP" hAnchor="HCENTER" xOffset="0" yOffset="19*game.hudScale()" priorityOffset="-1" />
		<ninesliceComponent name="Sprite">
			<size w="90*game.hudScale()" h="1*game.menuScaleY()" />
			<event name="onInit" params="component, element">
				<![CDATA[
					component("topHeight"):SetFloat(40.0)
					component("bottomHeight"):SetFloat(40.0)
					component("leftWidth"):SetFloat(50.0)
					component("rightWidth"):SetFloat(50.0)
					component("size"):SetFloat(0.5*game.menuScaleX())
					component("includeBorder"):SetInt(0)
					component("spriteName"):SetString("gfx/menu/GreyTitleFrame")
					component("layer"):SetString("FrontPopUps")
					
					--this is fuzzywuzzy gross
					if(game.hudScale() > 1 and lua_sys.getPlatformName() ~= "pc" ) then
						component("width"):SetInt(component("width"):GetInt() + 38*game.hudScale())
						component("height"):SetInt(component("height"):GetInt() + 20*game.hudScale())
					end
				]]>
			</event>
		</ninesliceComponent>
		<textComponent name="Text">
			<size w="114*game.menuScaleX()" h="30*game.menuScaleX()" />
			<position relativeTo="element:name()" vAnchor="VCENTER" hAnchor="HCENTER" />
			<orientation vAnchor="VCENTER" hAnchor="HCENTER" xOffset="0" yOffset="0" priorityOffset="-1" />
			<event name="onInit" params="component, element" >
				component("multiline"):SetInt(0)
				component("autoScaleFactor"):SetFloat(0.01)
				component("autoScale"):SetInt(1)
				component("size"):SetFloat(0.35*game.hudScale())

				component("font"):Set(game.getTextFont())
				component("alignment"):SetInt(lua_sys.MenuTextComponent_TEXT_HCENTER_ALIGNED)
				component("text"):SetString(game.monsterTypeName(element:parent()("selectedMonster"):GetInt()))
				component("layer"):SetString("FrontPopUps")
			</event>
		</textComponent>
	</element>

	<event name="onInit" params="element">
		element("selectedMonster"):SetInt(element:root():GetElement("SelectedMonsterView")("selectedMonst"):GetInt());
		collectgarbage("stop")
	</event>
	
	<event name="queuePop" params="element">
		manager:hideContextBar()
		element:root():GetElement("SelectedMonsterView")("selectedMonst"):SetInt(-1);
		element:root()["MonsterList"]["Swiper"]("enabled"):SetInt(1)
		element:root()["MonsterList"]["Zoomer"]("enabled"):SetInt(1)
		element:root():popPopUp()
	</event>

	<template type="template_spritesheetbutton" name="BackButton">
		<templateVar name="$layer" equals="FrontPopUps" />
		<templateVar name="$spriteScale" equals="0.5*game.hudScale()" />
		<templateVar name="$buttonMapping" equals="game.cancelButton()" />
		<position relativeTo="PARENT" vAnchor="BOTTOM" hAnchor="RIGHT" />
		<orientation vAnchor="BOTTOM" hAnchor="RIGHT" xOffset="10*game.hudScale()" yOffset="10*game.hudScale()" priorityOffset="5" />
		<touchComponent name="Touch">
			<event name="onTouchDown" params="component, element">
				onTouchDown(component, element)
				element["Overlay"]:setColor(0.5, 0.5, 0.5)
			</event>
			<event name="onTouchUp" params="component, element">
				onTouchUp(component, element)
				element["Overlay"]:setColor(1.0, 1.0, 1.0)
				
				element:parent():DoStoredScript("queuePop")
			</event>
			<event name="onTouchRelease" params="component, element">
				onTouchRelease(component, element)
				element["Overlay"]:setColor(1.0, 1.0, 1.0)
			</event>
		</touchComponent>
		<spriteSheetComponent name="Overlay">
			<position relativeTo="element:name()" vAnchor="VCENTER" hAnchor="HCENTER" />
			<orientation vAnchor="VCENTER" hAnchor="HCENTER" xOffset="0" yOffset="0" priorityOffset="-1" />
			<event name="onInit" params="component, element">
				component("spriteName"):SetString("button_back")
				component("sheetName"):SetString("xml_resources/context_buttons.xml")
				component("size"):SetFloat(0.5*game.hudScale())
				component("layer"):SetString("FrontPopUps")
			</event>
		</spriteSheetComponent>
		<textComponent name="Text">
			<position relativeTo="element:name()" vAnchor="BOTTOM" hAnchor="HCENTER" />
			<orientation vAnchor="TOP" hAnchor="HCENTER" xOffset="0" yOffset="-6*game.hudScale()" priorityOffset="-2" />
			<event name="onInit" params="component, element">
				component("multiline"):SetInt(0)
				component("font"):Set(game.getTitleFont())
				component("alignment"):SetInt(lua_sys.MenuTextComponent_TEXT_HCENTER_ALIGNED)
				component("text"):SetString("BACK")
				component("size"):SetFloat(0.2*game.hudScale())
				component("layer"):SetString("FrontPopUps")
			</event>
		</textComponent>
		<event name="onTick" params="element, dt">
			onTick(element, dt)
			if(element["UpSprite"]("size"):GetFloat() ~= element["Overlay"]("size"):GetFloat()) then
				element["Overlay"]("size"):SetFloat(element["UpSprite"]("size"):GetFloat())
			end
		</event>
	</template>
</menu>