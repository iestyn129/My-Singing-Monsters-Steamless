<?xml version="1.0" encoding="utf-8"?>
<menu xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="menu.xsd">

	<event name="onInit" params="element">
		element("transitionState"):SetInt(1)
		element("transitionTime"):SetFloat(0.0)
		lua_sys.playSoundFx("audio/sfx/menu_slide.wav")
	</event>
	
	<event name="TickTransition" params="element">
		local transitionTime = element("transitionTime"):GetFloat()
		element["bg"]("xOffset"):SetFloat(lua_sys.screenWidth()*(0.5) + (-0.5)*lua_sys.screenWidth()*(1/transitionTime))
		element["FadedBG"]["Sprite"]("alpha"):SetFloat(transitionTime*0.5)
	</event>
	
	<event name="onTick" params="element, dt">
		<![CDATA[
			if(dt < game.maxTickTime()) then
				local transitionState = element("transitionState"):GetInt()
				
				if(transitionState ~= 0) then
					local transitionTime = element("transitionTime"):GetFloat()
					
					element:DoStoredScript("TickTransition")
					
					if(transitionState == 1) then
						transitionTime = (transitionTime + dt*3)
					elseif(transitionState == 2) then
						transitionTime = (transitionTime - dt*3)
					end
					
					element("transitionTime"):SetFloat(clamp(transitionTime, 0.0, 1.0))
					
					if(transitionTime == 1.0) then
						element("transitionState"):SetInt(0)
						element("transitionTime"):SetFloat(1.0)
						element:DoStoredScript("TickTransition")
					elseif(transitionTime <= 0.0) then
						print("===============popup_tutorial_dailylogin:: transitiontime <=0, popPopUp====================")
						element:root():popPopUp()
					end
				end
			end
		]]>
	</event>
	
	<element name="FadedBG">
		<size dependentOnElement="element:name()" dependentOnComponent="Sprite" />
		<position relativeTo="SCREEN" vAnchor="VCENTER" hAnchor="HCENTER" />
		<orientation vAnchor="VCENTER" hAnchor="HCENTER" xOffset="0" yOffset="0" priorityOffset="10" />		
		<spriteComponent name="Sprite">
			<event name="onInit" params="component, element">
				component("spriteName"):SetString("__BUILTIN__WHITE_TEXTURE")
				component:setScale(Vector2(lua_sys.screenWidth()*0.25, lua_sys.screenHeight()*0.25))
				component:setColor(0.0, 0.0, 0.0)
				component("alpha"):SetFloat(0.0)
				component("layer"):SetString("Tutorial")
			</event>
		</spriteComponent>
		<touchComponent name="Touch">
			<size dependentOnElement="element:name()" />
			<position relativeTo="element:name()" vAnchor="VCENTER" hAnchor="HCENTER" />
			<orientation vAnchor="VCENTER" hAnchor="HCENTER" xOffset="0" yOffset="0" priorityOffset="-6" />
		</touchComponent>
	</element>
	
	<element name="bg">
		<size dependentOnElement="element:name()" dependentOnComponent="Sprite" />
		<position relativeTo="FadedBG" vAnchor="VCENTER" hAnchor="HCENTER" />
		<orientation vAnchor="VCENTER" hAnchor="HCENTER" xOffset="0-lua_sys.screenWidth()" yOffset="-30*game.hudScale()" priorityOffset="-1" />
		<ninesliceComponent name="Sprite">
			<size w="450*(lua_sys.screenWidth()/480)" h="260*(lua_sys.screenHeight()/320)" />
			<event name="onInit" params="component, element">
				component("topHeight"):SetFloat(50.0)
				component("bottomHeight"):SetFloat(50.0)
				component("leftWidth"):SetFloat(50.0)
				component("rightWidth"):SetFloat(50.0)
				component("includeBorder"):SetInt(1)
				component("size"):SetFloat(0.5)
				component("spriteName"):SetString("gfx/menu/Black9SFrame50")
				component("layer"):SetString("Tutorial")
			</event>
		</ninesliceComponent>
		<element name="LeftSwirl">
			<size dependentOnElement="element:name()" dependentOnComponent="Sprite" />
			<position relativeTo="bg" vAnchor="TOP" hAnchor="LEFT" />
			<orientation vAnchor="TOP" hAnchor="LEFT" xOffset="7*game.hudScale()" yOffset="7*game.hudScale()" priorityOffset="-1" />
			<spriteSheetComponent name="Sprite">
				<event name="onInit" params="component, element">
					component("spriteName"):SetString("menu_swirl_01")
					component("sheetName"):SetString("xml_resources/hud01.xml")
					component("size"):SetFloat(0.5*game.hudScale())
					component("layer"):SetString("Tutorial")
				</event>
			</spriteSheetComponent>
		</element>
		
		<element name="RightSwirl">
			<size dependentOnElement="element:name()" dependentOnComponent="Sprite" />
			<position relativeTo="bg" vAnchor="BOTTOM" hAnchor="RIGHT" />
			<orientation vAnchor="BOTTOM" hAnchor="RIGHT" xOffset="7*game.hudScale()" yOffset="7*game.hudScale()" priorityOffset="-1" />
			<spriteSheetComponent name="Sprite">
				<event name="onInit" params="component, element">
					component("spriteName"):SetString("menu_swirl_02")
					component("sheetName"):SetString("xml_resources/hud01.xml")
					component("size"):SetFloat(0.5*game.hudScale())
					component("layer"):SetString("Tutorial")
				</event>
			</spriteSheetComponent>
		</element>

		<element name="LeftLeaves">
			<size dependentOnElement="element:name()" dependentOnComponent="Sprite" />
			<position relativeTo="bg" vAnchor="TOP" hAnchor="LEFT" />
			<orientation vAnchor="TOP" hAnchor="LEFT" xOffset="-13*game.hudScale()" yOffset="-5*game.hudScale()" priorityOffset="1" />
			<spriteSheetComponent name="Sprite">
				<event name="onInit" params="component, element">
					component("spriteName"):SetString("menu_leaves")
					component("sheetName"):SetString("xml_resources/hud01.xml")
					component("size"):SetFloat(0.5*game.hudScale())
					component("layer"):SetString("Tutorial")
				</event>
			</spriteSheetComponent>
		</element>
		
		<element name="FluteTopLeft">
			<size dependentOnElement="element:name()" dependentOnComponent="Sprite" />
			<position relativeTo="bg" vAnchor="TOP" hAnchor="LEFT" />
			<orientation vAnchor="TOP" hAnchor="LEFT" xOffset="-10*game.hudScale()" yOffset="0" priorityOffset="1" />
			<spriteSheetComponent name="Sprite">
				<event name="onInit" params="component, element">
					component("spriteName"):SetString("menu_flute")
					component("sheetName"):SetString("xml_resources/hud01.xml")
					component("size"):SetFloat(0.5*game.hudScale())
					component("rotation"):SetFloat(235)
					component("hFlip"):SetInt(1)
					component("vFlip"):SetInt(1)
					component("layer"):SetString("Tutorial")
				</event>
			</spriteSheetComponent>
		</element>
		
		<element name="FluteBottomLeft">
			<size dependentOnElement="element:name()" dependentOnComponent="Sprite" />
			<position relativeTo="bg" vAnchor="TOP" hAnchor="LEFT" />
			<orientation vAnchor="TOP" hAnchor="LEFT" xOffset="-5*game.hudScale()" yOffset="28*game.hudScale()" priorityOffset="1" />
			<spriteSheetComponent name="Sprite">
				<event name="onInit" params="component, element">
					component("spriteName"):SetString("menu_flute")
					component("sheetName"):SetString("xml_resources/hud01.xml")
					component("size"):SetFloat(0.5*game.hudScale())
					component("rotation"):SetFloat(225.3)
					component("layer"):SetString("Tutorial")
				</event>
			</spriteSheetComponent>
		</element>
		
		<element name="FluteTopRight">
			<size dependentOnElement="element:name()" dependentOnComponent="Sprite" />
			<position relativeTo="bg" vAnchor="BOTTOM" hAnchor="RIGHT" />
			<orientation vAnchor="BOTTOM" hAnchor="RIGHT" xOffset="-7*game.hudScale()" yOffset="18*game.hudScale()" priorityOffset="1" />
			<spriteSheetComponent name="Sprite">
				<event name="onInit" params="component, element">
					component("spriteName"):SetString("menu_flute")
					component("sheetName"):SetString("xml_resources/hud01.xml")
					component("size"):SetFloat(0.5*game.hudScale())
					component("vFlip"):SetInt(0)
					component("hFlip"):SetInt(1)
					component("rotation"):SetFloat(35.2)
					component("layer"):SetString("Tutorial")
				</event>
			</spriteSheetComponent>
		</element>
		
		<element name="FluteBottomRight">
			<size dependentOnElement="element:name()" dependentOnComponent="Sprite" />
			<position relativeTo="bg" vAnchor="BOTTOM" hAnchor="RIGHT" />
			<orientation vAnchor="BOTTOM" hAnchor="RIGHT" xOffset="5*game.hudScale()" yOffset="-16*game.hudScale()" priorityOffset="1" />
			<spriteSheetComponent name="Sprite">
				<event name="onInit" params="component, element">
					component("spriteName"):SetString("menu_flute")
					component("sheetName"):SetString("xml_resources/hud01.xml")
					component("size"):SetFloat(0.5*game.hudScale())
					component("vFlip"):SetInt(1)
					component("rotation"):SetFloat(45)
					component("layer"):SetString("Tutorial")
				</event>
			</spriteSheetComponent>
		</element>
	</element>
	
	<element name="Anim">
		<size dependentOnElement="element:name()" dependentOnComponent="Sprite" />
		<position relativeTo="bg" vAnchor="VCENTER" hAnchor="HCENTER" />
		<orientation vAnchor="VCENTER" hAnchor="HCENTER" xOffset="0" yOffset="0" priorityOffset="-1" />
		<aeComponent name="Sprite">
			<event name="onInit" params="component, element">
				component("animationName"):SetString("xml_bin/monster_c.bin")
				component("animation"):SetString( "Store" )
				component:setScale(Vector2(0.8*game.hudScale(),0.8*game.hudScale()))
				component("layer"):SetString("Tutorial")
				component("visible"):SetInt(0)
			</event>
			<event name="reposition" params="component, element">
				element:setPositionBroadcast(true)
				element:setOrientationPosition(Vector2(component:size().x / 2.0, component:size().y / 2.0 - 45*game.hudScale()))
			</event>
		</aeComponent>
	</element>
	
	<element name="Sprite">
		<size dependentOnElement="element:name()" dependentOnComponent="Sprite" />
		<position relativeTo="bg" vAnchor="TOP" hAnchor="HCENTER" />
		<orientation vAnchor="TOP" hAnchor="HCENTER" xOffset="0" yOffset="25*game.hudScale()" priorityOffset="-1" />
		<spriteSheetComponent name="Sprite">
			<event name="onInit" params="component, element">
				component("spriteName"):SetString(game.StoreContext_SPRITE_DIAMOND)
				component("sheetName"):SetString(game.StoreContext_CURRENCY_SPRITESHEET)
				component("size"):SetFloat(1.0*game.hudScale())
				component("visible"):SetInt(0)
				component("layer"):SetString("Tutorial")
			</event>
		</spriteSheetComponent>
	</element>
	
	<element name="Title">
		<size dependentOnElement="element:name()" dependentOnComponent="Text" />
		<position relativeTo="bg" vAnchor="TOP" hAnchor="HCENTER" />
		<orientation vAnchor="VCENTER" hAnchor="HCENTER" xOffset="0" yOffset="50*game.hudScale()" priorityOffset="-1" />
		<textComponent name="Text">
			<size w="320*game.hudScale()" h="75*game.hudScale()"/>
			<position relativeTo="element:name()" vAnchor="TOP" hAnchor="HCENTER" />
			<orientation vAnchor="TOP" hAnchor="HCENTER" xOffset="0" yOffset="0" priorityOffset="0" />
			<event name="onInit" params="component, element">
				component("alignment"):SetInt(lua_sys.MenuTextComponent_TEXT_HCENTER_ALIGNED)
				component("autoScale"):SetInt(1)
				component("font"):Set(game.getTextFont())
				component("text"):SetString("")
				component("size"):SetFloat(0.4*game.hudScale())
				component("layer"):SetString("Tutorial")
				component:setColor(0.43, 1.0, 0.25)
				component:calculatePosition()
			</event>
		</textComponent>
	</element>
	
	<element name="Monster">
		<size dependentOnElement="element:name()" dependentOnComponent="Sprite" />
		<position relativeTo="bg" vAnchor="BOTTOM" hAnchor="LEFT" />
		<orientation vAnchor="BOTTOM" hAnchor="LEFT" xOffset="0" yOffset="0" priorityOffset="-2" />
		<aeComponent name="Sprite">
			<event name="onInit" params="component, element">
				component("animationName"):SetString("xml_bin/monster_be.bin")
				component("animation"):SetString("BE_talking")
				component:setScale(Vector2(1.0*game.hudScale(),1.0*game.hudScale()))
				component("layer"):SetString("Tutorial")
			</event>
			<event name="onPostInit" params="component, element">
				element:setOrientationPosition(Vector2(45*game.hudScale(), -component:size().y + 25*game.hudScale()))
			</event>
		</aeComponent>
	</element>
	
	<element name="DayDisplay">
		<size dependentOnElement="element:name()" dependentOnComponent="BonusElement3" />
		<position relativeTo="bg" vAnchor="TOP" hAnchor="HCENTER" />
		<orientation vAnchor="TOP" hAnchor="HCENTER" xOffset="0" yOffset="90*game.hudScale()" priorityOffset="-2" />
		<event name="onPostInit" params="element">
			local dailyBonusTypes = game.dailyBonusTypes();
			local scaledDailyBonusAmounts = game.scaledDailyBonusAmounts();
			local dailyBonusEntities = game.dailyBonusEntities();

			if(dailyBonusTypes ~= nil and scaledDailyBonusAmounts ~= nil) then
				--skip the first day, which is 0 server-side because of changes to legacy code
				--only show the first 5 for tutorial
				for i = 1, 5 do

					local storeItem = element:GetElement("BonusElement"..i)
					if(storeItem ~= nil) then
						storeItem("dayText"):SetString("DAY_"..i)
						storeItem("currencyType"):SetString(dailyBonusTypes[i]);
						storeItem("currencyAmount"):SetInt(scaledDailyBonusAmounts[i])
						storeItem("bonusEntity"):SetInt(dailyBonusEntities[i])
						storeItem:DoStoredScript("setBonusMonster");
					end
				end
			end
		
			local curRewardDay = game.dailyBonusCollectionDay();
			if(curRewardDay == 0) then
				curRewardDay = 1;
			end
			
			for i = 1, curRewardDay-1 do
				element["BonusElement"..i]:DoStoredScript("setAchieved")
			end
			
			if(element["BonusElement"..curRewardDay] ~= nil) then
				element["BonusElement"..curRewardDay]:DoStoredScript("setToday")
			end
			
			for i = curRewardDay+1, 5 do
				element["BonusElement"..i]:DoStoredScript("setUnachieved")
			end

		</event>
		<template type="template_dailybonus" name="BonusElement3">
			<templateVar name="$text" equals="'DAY_3'" />
			<templateVar name="$baseLayer" equals="Tutorial" />
			<position relativeTo="DayDisplay" vAnchor="TOP" hAnchor="HCENTER" />
			<orientation vAnchor="TOP" hAnchor="HCENTER" xOffset="0" yOffset="0" priorityOffset="0" />
		</template>	
		<template type="template_dailybonus" name="BonusElement2">
			<templateVar name="$text" equals="'DAY_2'" />
			<templateVar name="$baseLayer" equals="Tutorial" />
			<position relativeTo="BonusElement3" vAnchor="VCENTER" hAnchor="LEFT" />
			<orientation vAnchor="VCENTER" hAnchor="RIGHT" xOffset="0.0514*lua_sys.screenWidth()" yOffset="0" priorityOffset="0" />
		</template>	
		<template type="template_dailybonus" name="BonusElement1">
			<templateVar name="$text" equals="'DAY_1'" />
			<templateVar name="$baseLayer" equals="Tutorial" />
			<position relativeTo="BonusElement2" vAnchor="VCENTER" hAnchor="LEFT" />
			<orientation vAnchor="VCENTER" hAnchor="RIGHT" xOffset="0.0514*lua_sys.screenWidth()" yOffset="0" priorityOffset="0" />
		</template>	
		<template type="template_dailybonus" name="BonusElement4">
			<templateVar name="$text" equals="'DAY_4'" />
			<templateVar name="$baseLayer" equals="Tutorial" />
			<position relativeTo="BonusElement3" vAnchor="VCENTER" hAnchor="RIGHT" />
			<orientation vAnchor="VCENTER" hAnchor="LEFT" xOffset="0.0514*lua_sys.screenWidth()" yOffset="0" priorityOffset="0" />
		</template>	
		<template type="template_dailybonus" name="BonusElement5">
			<templateVar name="$text" equals="'DAY_5'" />
			<templateVar name="$baseLayer" equals="Tutorial" />
			<position relativeTo="BonusElement4" vAnchor="VCENTER" hAnchor="RIGHT" />
			<orientation vAnchor="VCENTER" hAnchor="LEFT" xOffset="0.0514*lua_sys.screenWidth()" yOffset="0" priorityOffset="0" />
		</template>	
		<!-- template type="template_dailybonus" name="BonusElement6">
			<templateVar name="$text" equals="'DAY_6'" />
			<templateVar name="$baseLayer" equals="Tutorial" />
			<position relativeTo="BonusElement1" vAnchor="BOTTOM" hAnchor="HCENTER" />
			<orientation vAnchor="TOP" hAnchor="HCENTER" xOffset="0" yOffset="0.0514*lua_sys.screenWidth()" priorityOffset="0" />
		</template>	
		<template type="template_dailybonus" name="BonusElement7">
			<templateVar name="$text" equals="'DAY_7'" />
			<templateVar name="$baseLayer" equals="Tutorial" />
			<position relativeTo="BonusElement2" vAnchor="BOTTOM" hAnchor="HCENTER" />
			<orientation vAnchor="TOP" hAnchor="HCENTER" xOffset="0" yOffset="0.0514*lua_sys.screenWidth()" priorityOffset="0" />
		</template>	
		<template type="template_dailybonus" name="BonusElement8">
			<templateVar name="$text" equals="'DAY_8'" />
			<templateVar name="$baseLayer" equals="Tutorial" />
			<position relativeTo="BonusElement3" vAnchor="BOTTOM" hAnchor="HCENTER" />
			<orientation vAnchor="TOP" hAnchor="HCENTER" xOffset="0" yOffset="0.0514*lua_sys.screenWidth()" priorityOffset="0" />
		</template>	
		<template type="template_dailybonus" name="BonusElement9">
			<templateVar name="$text" equals="'DAY_9'" />
			<templateVar name="$baseLayer" equals="Tutorial" />
			<position relativeTo="BonusElement4" vAnchor="BOTTOM" hAnchor="HCENTER" />
			<orientation vAnchor="TOP" hAnchor="HCENTER" xOffset="0" yOffset="0.0514*lua_sys.screenWidth()" priorityOffset="0" />
		</template>	
		<template type="template_dailybonus" name="BonusElement10">
			<templateVar name="$text" equals="'DAY_10'" />
			<templateVar name="$baseLayer" equals="Tutorial" />
			<position relativeTo="BonusElement5" vAnchor="BOTTOM" hAnchor="HCENTER" />
			<orientation vAnchor="TOP" hAnchor="HCENTER" xOffset="0" yOffset="0.0514*lua_sys.screenWidth()" priorityOffset="0" />
		</template -->
	</element>
	
	<element name="Text">
		<size dependentOnElement="element:name()" dependentOnComponent="Text" />
		<position relativeTo="DayDisplay" vAnchor="BOTTOM" hAnchor="HCENTER" />
		<orientation vAnchor="TOP" hAnchor="HCENTER" xOffset="0" yOffset="20*(lua_sys.screenHeight()/320)" priorityOffset="0" />
		<event name="onPostInit" params="element">
			--kalon was a special child
			element:relativeTo(element:parent()["DayDisplay"]:GetElement("BonusElement3"):GetElement("DayText"))
		</event>
		<textComponent name="Text">
			<size w="350*(lua_sys.screenWidth()/480)" h="70*game.menuScaleY()" />
			<position relativeTo="element:name()" vAnchor="TOP" hAnchor="HCENTER" />
			<orientation vAnchor="TOP" hAnchor="HCENTER" xOffset="0" yOffset="0" priorityOffset="0" />
			<event name="onInit" params="component, element">
				component("multiline"):SetInt(1)
				component("autoScale"):SetInt(1)
				component("alignment"):SetInt(lua_sys.MenuTextComponent_TEXT_HCENTER_ALIGNED)
				component("textPadding"):SetInt(0)
				component("font"):Set(game.getTextFont())
				component("text"):SetString("")
				
				component("size"):SetFloat(0.50*game.hudScale())
				
				component("layer"):SetString("Tutorial")
				component:calculatePosition()
			</event>
			<event name="moveDown" params="component, element">
				element:setPositionBroadcast(true)
				element:setPosition(Vector2(component:position().x, component:position().y + (30*game.hudScale())))
			</event>
		</textComponent>
	</element>

	<template type="template_spritesheetbutton" name="CollectButton">
		<templateVar name="$upSpriteName" equals="button_continue_green" />
		<templateVar name="$sheetName" equals="'xml_resources/buttons01.xml'" />
		<templateVar name="$spriteScale" equals="0.5*game.hudScale()" />
		<templateVar name="$text" equals="LABEL_COLLECT" />
		<templateVar name="$textPadding" equals="6*game.hudScale()" />
		<templateVar name="$textYOffset" equals="0" />
		<templateVar name="$layer" equals="Tutorial" />
		<position relativeTo="bg" vAnchor="BOTTOM" hAnchor="HCENTER" />
		<orientation vAnchor="TOP" hAnchor="HCENTER" xOffset="0" yOffset="0" priorityOffset="-6" />
		<event name="onInit" params="element">
			onInit(element)
			element("touched"):SetInt(0)
		</event>
		<touchComponent name="Touch">
			<event name="onTouchUp" params="component, element">
				onTouchUp(component, element)
				
				game.logEvent("collect_tutorial_dailylogin")
				
				if(element("touched"):GetInt() == 0) then
					element("touched"):SetInt(1)

					local curRewardDay = game.dailyBonusCollectionDay();
				
					if(curRewardDay == 0) then
						curRewardDay = 1;
					end
					
					local theDay = element:parent()["BonusElement"..curRewardDay];
					
					theDay:DoStoredScript("playParticles")
					
					local image = theDay:GetElement("BonusFrame");
			
					local midX = image:absX() + image:absW()/2
					local midY = image:absY() + image:absH()/2

					local hudIconDest = theDay("hudIconDest"):GetString();
					local hudElementDest = theDay("hudElementDest"):GetString();
					if(hudIconDest ~= "" and hudElementDest ~= "") then
						game.showFlyingIconFromDailyLogin(hudIconDest, hudElementDest, "Icon", midX, midY, "MidPopUps");
					else
						element:root():GetReceiver():Send(game.MsgNextTutorialStep())
					end
					game.collectDailyBonus();
				end
					
				--[[this will be done in GotDailyBonusComplete now, to show the animations before popping up ads:
				element:root():GetReceiver():Send(game.MsgNextTutorialStep())
				game.collectDailyBonus();
				manager:setContext(manager:getDefaultContext())]]
				
			</event>
		</touchComponent>
		<event name="onPostInit" params="element">
			element["Text"]("size"):SetFloat(0.25*game.hudScale())
			element["Text"]("autoScale"):SetInt(1)
		</event>
	</template>
	
	<event name="queuePop" params="element">
		--make compatible with daily_login_bonus interface
		element("transitionState"):SetInt(2)
	</event>
</menu>