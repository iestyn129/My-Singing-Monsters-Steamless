<?xml version="1.0" encoding="utf-8"?>
<menu xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="menu.xsd">

	<event name="onInit" params="element">
		element:SetupGenericListener(game.engineReceiver(), "game::msg::MsgRefresh", "msgRefresh")
		if(game.friendIslandType() ~= 11) then
			element["IslandTitleBG"]["Sprite"]("visible"):SetInt(0)
			element["IslandLabel"]["Text"]("visible"):SetInt(0)
		else
			element:parent()["StarBarBacking"]["Sprite"]("visible"):SetInt(0)
			element:parent()["StarBarFlair"]["Sprite"]("visible"):SetInt(0)
			element:parent()["StarBar"]:DoStoredScript("hide")
		end
	</event>
	
	<event name="msgRefresh" params="element, msg">
		element["ReplayButton"]:DoStoredScript("gotMsgRefresh")
	</event>

	<element name="FriendName">
		<hudScale scale="game.hudScale()"/>
		<size dependentOnElement="element:name()" dependentOnComponent="Sprite" />
		<position relativeTo="PARENT" vAnchor="TOP" hAnchor="HCENTER" />
		<orientation vAnchor="TOP" hAnchor="HCENTER" xOffset="0" yOffset="0" priorityOffset="30" />
		<spriteSheetComponent name="Sprite">
			<event name="onInit" params="component, element">
				component("spriteName"):SetString("level_bar_empty")
				component("sheetName"):SetString("xml_resources/hud01.xml")
				component("size"):SetFloat(0.5)
				component("layer"):SetString("HUD")
			</event>
		</spriteSheetComponent>
		<textComponent name="Text">
			<size w="150*game.hudScale()" h="100" />
			<position relativeTo="element:name()" vAnchor="VCENTER" hAnchor="HCENTER" />
			<orientation vAnchor="VCENTER" hAnchor="HCENTER" xOffset="0" yOffset="-2/game.hudScale()" priorityOffset="-1" />
			<event name="onInit" params="component, element">
				component("multiline"):SetInt(0)
				component("font"):Set(game.getTextFont())
				component("alignment"):SetInt(lua_sys.MenuTextComponent_TEXT_HCENTER_ALIGNED)
				component("size"):SetFloat(0.25*game.hudScale())
				component("text"):SetString("Billy Bow Wow")
				component("noTranslate"):SetInt(1)
				component("autoScaleFactor"):SetFloat(0.01)
				component("autoScale"):SetInt(1)
				component("layer"):SetString("HUD")
			</event>
		</textComponent>
	</element>
	
	<element name="FriendTitleBG">
		<size dependentOnElement="element:name()" dependentOnComponent="Sprite" />
		<position relativeTo="FriendName" vAnchor="BOTTOM" hAnchor="HCENTER" />
		<orientation vAnchor="TOP" hAnchor="HCENTER" xOffset="0" yOffset="-3*game.hudScale()" priorityOffset="30" />
		<ninesliceComponent name="Sprite">
			<size w="165*game.hudScale()" h="30*game.hudScale()" />
			<event name="onInit" params="component, element">
				component("topHeight"):SetFloat(44.0)
				component("bottomHeight"):SetFloat(44.0)
				component("leftWidth"):SetFloat(50.0)
				component("rightWidth"):SetFloat(50.0)
				component("size"):SetFloat(0.25)
				component("includeBorder"):SetInt(1)
				component("spriteName"):SetString("gfx/menu/scroll_frame")
				component("layer"):SetString("HUD")
				if(game.friendLevelTitle() == "") then
					component("visible"):SetInt(0)
				end
			</event>
		</ninesliceComponent>
	</element>
	
	<element name="FriendTitle">
		<size dependentOnElement="element:name()" dependentOnComponent="Text" />
		<position relativeTo="FriendTitleBG" vAnchor="VCENTER" hAnchor="HCENTER" />
		<orientation vAnchor="VCENTER" hAnchor="HCENTER" xOffset="0" yOffset="-2*game.hudScale()" priorityOffset="-1" />
		<textComponent name="Text">
			<size w="140*game.hudScale()" h="16" />
			<event name="onInit" params="component, element">
				component("multiline"):SetInt(0)
				component("autoScale"):SetInt(1)
				component("font"):Set(game.getTutorialFont())
				component("text"):SetString(game.friendLevelTitle())
				component("size"):SetFloat(0.5*game.hudScale())
				component("layer"):SetString("HUD")
				component:setColor(0.0, 0.0, 0.0)
				component:calculatePosition()
			</event>
		</textComponent>
	</element>
	
	<element name="IslandTitleBG">
		<size dependentOnElement="element:name()" dependentOnComponent="Sprite" />
		<position relativeTo="FriendTitle" vAnchor="BOTTOM" hAnchor="HCENTER" />
		<orientation vAnchor="TOP" hAnchor="HCENTER" xOffset="0" yOffset="20*game.menuScaleY()" priorityOffset="0" />
		<ninesliceComponent name="Sprite">
			<size w="140*game.menuScaleX()" h="30*game.menuScaleX()" />
			<event name="onInit" params="component, element">
				component("topHeight"):SetFloat(50.0)
				component("bottomHeight"):SetFloat(50.0)
				component("leftWidth"):SetFloat(50.0)
				component("rightWidth"):SetFloat(50.0)
				
				local scalex = lua_sys.screenWidth()/480.0
				
				component("size"):SetFloat(0.2 * scalex)
				component("width"):SetInt(140.0 * scalex)
				component("height"):SetInt(3.33 * game.hudScale())
				component("spriteName"):SetString("gfx/menu/BlackTitleFrame")

				component("layer"):SetString("HUD")
			</event>
		</ninesliceComponent>
	</element>
	
	<element name="IslandLabel">
		<size dependentOnElement="element:name()" dependentOnComponent="Text" />
		<position relativeTo="IslandTitleBG" vAnchor="VCENTER" hAnchor="HCENTER" />
		<orientation vAnchor="VCENTER" hAnchor="HCENTER" xOffset="0" yOffset="-2*game.hudScale()" priorityOffset="-1" />
		<textComponent name="Text">
			<size w="140*game.hudScale()" h="16" />
			<event name="onInit" params="component, element">
				component("multiline"):SetInt(0)
				component("font"):Set(game.getTextFont())
				
				component("size"):SetFloat(0.25*game.hudScale())
				component("noTranslate"):SetInt(1)
				component("text"):SetString("")
				component("autoScaleFactor"):SetFloat(0.01)
				component("autoScale"):SetInt(1)
				
				component("layer"):SetString("HUD")
				component:setColor(1.0, 1.0, 1.0)
				component:calculatePosition()
				
				if(game.friendIslandType() ~= 11) then
					component("visible"):SetInt(0)
				else
					local songName = game.friendIslandSongName()
					if(songName == "") then
						songName = game.getLocalizedText("FRIEND_SONG_PREFIX")..game.StoreContext_DEFAULT_OWNED_SONGNAME
					else
						songName = game.getLocalizedText("FRIEND_SONG_PREFIX")..songName
						component("noTranslate"):SetInt(1)
					end
					component("text"):SetString(songName)
				end
				
			</event>
		</textComponent>
	</element>
	<element name="StarBarBacking">
		<hudScale scale="game.hudScale()"/>
		<size dependentOnElement="element:name()" dependentOnComponent="Sprite" />
		<position relativeTo="FriendTitle" vAnchor="BOTTOM" hAnchor="HCENTER" />
		<orientation vAnchor="TOP" hAnchor="HCENTER" xOffset="0" yOffset="2*game.menuScaleY()" priorityOffset="0" />
		<spriteSheetComponent name="Sprite">
			<event name="onInit" params="component, element">
				component("spriteName"):SetString("monster_bar_empty")
				component("sheetName"):SetString("xml_resources/hud01.xml")
				component("size"):SetFloat(0.65)
				component("layer"):SetString("HUD")
			</event>
		</spriteSheetComponent>
	</element>
	
	<element name="StarBarFlair">
		<hudScale scale="game.hudScale()"/>
		<size dependentOnElement="element:name()" dependentOnComponent="Sprite" />
		<position relativeTo="StarBarBacking" vAnchor="VCENTER" hAnchor="RIGHT" />
		<orientation vAnchor="VCENTER" hAnchor="HCENTER" xOffset="-18" yOffset="1" priorityOffset="-3" />
		<spriteSheetComponent name="Sprite">
			<event name="onInit" params="component, element">
				component("spriteName"):SetString("starpower_flare")
				component("sheetName"):SetString("xml_resources/hud01.xml")
				component("size"):SetFloat(0.65)
				component("layer"):SetString("HUD")
			</event>
		</spriteSheetComponent>
	</element>
	
	<element name="StarBar">
		<hudScale scale="game.hudScale()"/>
		<size dependentOnElement="element:name()" dependentOnComponent="Sprite" />
		<position relativeTo="StarBarBacking" vAnchor="VCENTER" hAnchor="HCENTER" />
		<orientation vAnchor="VCENTER" hAnchor="HCENTER" xOffset="0" yOffset="0" priorityOffset="-1" />
		<spriteSheetComponent name="Sprite">
			<event name="onInit" params="component, element">
				component("spriteName"):SetString("starpower_bar_full")
				component("sheetName"):SetString("xml_resources/hud01.xml")
				component("size"):SetFloat(0.65)
				component("layer"):SetString("HUD")
				component("FullMaskH"):SetInt(component("maskHeight"):GetInt())
				component("FullMaskW"):SetInt(component("maskWidth"):GetInt())
			</event>
		</spriteSheetComponent>
		<textComponent name="LevelText">
			<size dependentOnElement="element:name()" dependentOnComponent="Sprite" />
			<position relativeTo="element:name()" vAnchor="VCENTER" hAnchor="HCENTER" />
			<orientation vAnchor="VCENTER" hAnchor="HCENTER" xOffset="0" yOffset="-1" priorityOffset="-2" />
			<event name="onInit" params="component, element">
				component("multiline"):SetInt(0)
				component("font"):Set(game.getTitleFont())
				component("alignment"):SetInt(lua_sys.MenuTextComponent_TEXT_HCENTER_ALIGNED)
				component("size"):SetFloat(0.25)
				component("text"):SetString(game.getLocalizedText("STARPOWER").." "..game.friendStarpower())
				component:setColor(0.5, 0.78, 1.0)
				component("autoScale"):SetInt(1)
				component("layer"):SetString("HUD")
			</event>
		</textComponent>
		<event name="hide" params="element">
			element["Sprite"]("visible"):SetInt(0)
			element["LevelText"]("visible"):SetInt(0)
		</event>
		<event name="show" params="element">
			element["Sprite"]("visible"):SetInt(1)
			element["LevelText"]("visible"):SetInt(1)
		</event>
	</element>

	<element name="ReplayButton">
		<hudScale scale="game.hudScale()" />
		<size dependentOnElement="element:name()" dependentOnComponent="Sprite" />
		<position relativeTo="ViewButton" vAnchor="VCENTER" hAnchor="RIGHT" />
		<orientation vAnchor="VCENTER" hAnchor="LEFT" xOffset="0" yOffset="0" priorityOffset="0" />
		<aeComponent name="Sprite">
			<event name="onInit" params="component, element">
				component("animationName"):SetString("xml_bin/button_video.bin")
				component:setScale(Vector2(0.5, 0.5))
				component("layer"):SetString("HUD")
				
				element:DoStoredScript("gotMsgRefresh")
			</event>
		</aeComponent>
		<touchComponent name="Touch">
			<size dependentOnElement="element:name()" dependentOnComponent="Sprite" />
			<position relativeTo="element:name()" vAnchor="BOTTOM" hAnchor="LEFT" />
			<orientation vAnchor="BOTTOM" hAnchor="LEFT" xOffset="0" yOffset="0" priorityOffset="0" />
			<event name="onInit" params="component, element">
				if(game.ScreenRecordingEnabled()) then
					
					if (game.EnableRecordButton()) then
						component("enabled"):SetInt(1)
					else
						component("enabled"):SetInt(0)
					end
					
				else
					component("enabled"):SetInt(0)
				end
			</event>
			<event name="onTouchUp" params="component, element">
				if(game.ScreenIsRecording()) then
					game.EndScreenRecording()
				else
					game.StartScreenRecording()
				end
			</event>
		</touchComponent>
		<event name="gotMsgRefresh" params="element">
			if(game.ScreenRecordingEnabled()) then
				if(game.AnimateRecordButton()) then
					element["Sprite"]("animation"):SetString("on")
				else
					element["Sprite"]("animation"):SetString("off")
				end
				
				if (not game.isInViewMode()) then
					element["Sprite"]("visible"):SetInt(1)
				else
					element["Sprite"]("visible"):SetInt(0)
				end
				
				if (game.EnableRecordButton() and not game.isInViewMode()) then
					element["Touch"]("enabled"):SetInt(1)
				else
					element["Touch"]("enabled"):SetInt(0)
				end
			else
				element["Sprite"]("visible"):SetInt(0)
				element["Touch"]("enabled"):SetInt(0)
			end
		</event>
		<event name="enable" params="element">
			if (game.EnableRecordButton()) then
				element["Touch"]("enabled"):SetInt(1)
			else
				element["Touch"]("enabled"):SetInt(0)
			end
		</event>
		<event name="hide" params="element">
			element:DoStoredScript("setInvisible")
			element["Sprite"]("visible"):SetInt(0)
			element["Touch"]("enabled"):SetInt(0)
		</event>
		<event name="show" params="element">
			if (game.ScreenRecordingEnabled()) then
				element:DoStoredScript("gotMsgRefresh")
			end
		</event>
	</element>
	
	<element name="ViewButton">
		<size dependentOnElement="element:name()" dependentOnComponent="Sprite" />
		<position relativeTo="SAFE_AREA" vAnchor="BOTTOM" hAnchor="LEFT" />
		<orientation vAnchor="BOTTOM" hAnchor="LEFT" xOffset="15" yOffset="15" priorityOffset="25" />
		<spriteSheetComponent name="Sprite">
			<event name="onInit" params="component, element">
				component("sheetName"):SetString("xml_resources/buttons01.xml")
				if game.isInViewMode() then
					component("spriteName"):SetString("button_show_hud")
				else
					component("spriteName"):SetString("button_hide_hud")
				end
				component("size"):SetFloat(0.5)
				component("layer"):SetString("HUD")
				component("visible"):SetInt(1)
				component("alpha"):SetFloat(0.8)
			</event>
		</spriteSheetComponent>
		<touchComponent name="Touch">
			<size dependentOnElement="element:name()" dependentOnComponent="Sprite" />
			<position relativeTo="element:name()" vAnchor="BOTTOM" hAnchor="LEFT" />
			<orientation vAnchor="BOTTOM" hAnchor="LEFT" xOffset="0" yOffset="0" priorityOffset="0" />
			<event name="onTouchUp" params="component, element">
				game.toggleViewMode()
				if(game.isInViewMode()) then
					element["Sprite"]("spriteName"):SetString("button_show_hud")
				else
					element["Sprite"]("spriteName"):SetString("button_hide_hud")
				end				
			</event>
		</touchComponent>
		<event name="hide" params="element">
			element:DoStoredScript("setInvisible")
			element["Sprite"]("visible"):SetInt(0)
			element["Touch"]("enabled"):SetInt(0)
		</event>
	</element>
	
	<element name="Functions">
		<event name="hideHUD" params="element">
			if(element:parent()["FriendName"]["Text"]("text"):GetString() ~= "") then
				element:parent()["FriendName"]["Sprite"]("visible"):SetInt(0)
				element:parent()["FriendName"]["Text"]("visible"):SetInt(0)
			end
			element:parent()["FriendTitleBG"]["Sprite"]("visible"):SetInt(0)
			element:parent()["FriendTitle"]["Text"]("visible"):SetInt(0)
			element:parent()["StarBarBacking"]["Sprite"]("visible"):SetInt(0)
			element:parent()["StarBarFlair"]["Sprite"]("visible"):SetInt(0)
			element:parent()["StarBar"]:DoStoredScript("hide")
			element:parent()["ReplayButton"]:DoStoredScript("hide")
			
			element:parent()["IslandTitleBG"]["Sprite"]("visible"):SetInt(0)
			element:parent()["IslandLabel"]["Text"]("visible"):SetInt(0)
		</event>
		
		<event name="showHUD" params="element">
			if(element:parent()["FriendName"]["Text"]("text"):GetString() ~= "") then
				element:parent()["FriendName"]["Sprite"]("visible"):SetInt(1)
				element:parent()["FriendName"]["Text"]("visible"):SetInt(1)
			end
			if(game.friendLevelTitle() ~= "") then
				element:parent()["FriendTitleBG"]["Sprite"]("visible"):SetInt(1)
				element:parent()["FriendTitle"]["Text"]("visible"):SetInt(1)
			end
			
			if(game.friendIslandType() == 11) then
				element:parent()["IslandTitleBG"]["Sprite"]("visible"):SetInt(1)
				element:parent()["IslandLabel"]["Text"]("visible"):SetInt(1)
			end
			
			if(manager:getContext() ~= "TRIBAL_VISIT_DEFAULT" and game.friendIslandType() ~= 11) then
				element:parent()["StarBarBacking"]["Sprite"]("visible"):SetInt(1)
				element:parent()["StarBarFlair"]["Sprite"]("visible"):SetInt(1)
				element:parent()["StarBar"]:DoStoredScript("show")
			end
			element:parent()["ReplayButton"]:DoStoredScript("show")
		</event>
	</element>
	
	<event name="onTick" params="element, dt">
		if((element["FriendTitle"]["Text"]("visible"):GetInt() ~= 0) and (manager:getContext() == "TRIBAL_VISIT_DEFAULT")) then
			element["FriendTitleBG"]["Sprite"]("visible"):SetInt(0)
			element["FriendTitle"]["Text"]("visible"):SetInt(0)
			element["StarBarBacking"]["Sprite"]("visible"):SetInt(0)
			element["StarBarFlair"]["Sprite"]("visible"):SetInt(0)
			element["StarBar"]:DoStoredScript("hide")
		end
	</event>
	
</menu>
