<?xml version="1.0" encoding="utf-8"?>
<menu xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="menu.xsd">

	<element name="FadedBG">
		<size dependentOnElement="element:name()" dependentOnComponent="Sprite" />
		<position relativeTo="SCREEN" vAnchor="VCENTER" hAnchor="HCENTER" />
		<orientation vAnchor="VCENTER" hAnchor="HCENTER" xOffset="0" yOffset="0" priorityOffset="4" />
		<spriteComponent name="Sprite">
			<event name="onInit" params="component, element">
				component("spriteName"):SetString("__BUILTIN__WHITE_TEXTURE")
				component:setScale(Vector2(lua_sys.screenWidth()*0.25, lua_sys.screenHeight()*0.25))
				component:setColor(0.0, 0.0, 0.0)
				component("alpha"):SetFloat(0.5)
				component("layer"):SetString("MidFrontPopUps")
			</event>
		</spriteComponent>
		<touchComponent name="Touch">
			<size dependentOnElement="element:name()" />
			<position relativeTo="element:name()" vAnchor="VCENTER" hAnchor="HCENTER" />
			<orientation vAnchor="VCENTER" hAnchor="HCENTER" xOffset="0" yOffset="0" priorityOffset="0" />
		</touchComponent>
	</element>
	
	<element name="bg">
		<size dependentOnElement="element:name()" dependentOnComponent="Sprite" />
		<position relativeTo="SCREEN" vAnchor="VCENTER" hAnchor="HCENTER" />
		<orientation vAnchor="VCENTER" hAnchor="HCENTER" xOffset="0" yOffset="-30*game.hudScale()" priorityOffset="3" />
		<ninesliceComponent name="Sprite">
			<size w="340*game.hudScale()" h="230*game.hudScale()" />
			<event name="onInit" params="component, element">
				component("topHeight"):SetFloat(50.0)
				component("bottomHeight"):SetFloat(50.0)
				component("leftWidth"):SetFloat(50.0)
				component("rightWidth"):SetFloat(50.0)
				component("size"):SetFloat(0.5)
				component("includeBorder"):SetInt(1)
				component("spriteName"):SetString("gfx/menu/Black9SFrame50")
				component("layer"):SetString("MidFrontPopUps")
			</event>
		</ninesliceComponent>
	</element>
	
	<element name="CloseButton">
		<size dependentOnElement="element:name()" dependentOnComponent="CloseImage" />
		<position relativeTo="bg" vAnchor="TOP" hAnchor="RIGHT" />
		<orientation vAnchor="VCENTER" hAnchor="HCENTER" xOffset="-20*game.hudScale()" yOffset="20*game.hudScale()" priorityOffset="-1" />
		<spriteSheetComponent name="CloseImage">
			<position relativeTo="element:name()" vAnchor="VCENTER" hAnchor="HCENTER" />
			<orientation vAnchor="VCENTER" hAnchor="HCENTER" xOffset="0" yOffset="0" priorityOffset="-1" />
			<event name="onInit" params="component, element">
				component("spriteName"):SetString("button_bamboo_close")
				component("sheetName"):SetString("xml_resources/buttons01.xml")
				component("size"):SetFloat(0.5*game.hudScale())
				component("layer"):SetString("MidFrontPopUps")
			</event>
		</spriteSheetComponent>
		<touchComponent name="Touch">
			<size dependentOnElement="element:name()" dependentOnComponent="Sprite" />
			<position relativeTo="element:name()" vAnchor="VCENTER" hAnchor="HCENTER" />
			<orientation vAnchor="VCENTER" hAnchor="HCENTER" xOffset="0" yOffset="0" priorityOffset="0" />
			<event name="onTouchDown" params="component, element">
				element["CloseImage"]:setColor(0.5, 0.5, 0.5)
			</event>
			<event name="onTouchUp" params="component, element">
				element["CloseImage"]:setColor(1.0, 1.0, 1.0)
				lua_sys.playSoundFx("audio/sfx/menu_click_small.wav")
				element:root():popPopUp()
			</event>
			<event name="onTouchRelease" params="component, element">
				element["CloseImage"]:setColor(1.0, 1.0, 1.0)
			</event>
		</touchComponent>
		<event name="onInit" params="element">
			element("ButtonMapping"):SetInt(game.cancelButton())
			element("buttonDown"):SetInt(0)
			element:SetupGenericListener(game.engineReceiver(), "sys::msg::MsgKeyDown", "gotMsgKeyDown")
			element:SetupGenericListener(game.engineReceiver(), "sys::msg::MsgKeyUp", "gotMsgKeyUp")
		</event>		
		<event name="gotMsgKeyDown" params="element, msg">
			if(element("ButtonMapping"):GetInt() == msg.key.val and element["Touch"]("enabled"):GetInt() ~= 0 and element("buttonDown"):GetInt() == 0) then
				element["Touch"]("checkOnTop"):SetInt(0)
				if(element["Touch"]("onTop"):GetInt() == 1) then
					element("buttonDown"):SetInt(msg.key.val)
					element["Touch"]:DoStoredScript("onTouchDown")
				end
			end
		</event>
		<event name="gotMsgKeyUp" params="element, msg">
			if(element("ButtonMapping"):GetInt() == msg.key.val and element["Touch"]("enabled"):GetInt() ~= 0 and element("buttonDown"):GetInt() == msg.key.val) then
				element("buttonDown"):SetInt(0)
				element["Touch"]:DoStoredScript("onTouchUp")
			end
		</event>
	</element>
	
	<element name="EggImage">
		<size dependentOnElement="element:name()" dependentOnComponent="Sprite" />
		<position relativeTo="bg" vAnchor="TOP" hAnchor="HCENTER" />
		<orientation vAnchor="TOP" hAnchor="HCENTER" xOffset="0" yOffset="30*game.hudScale()" priorityOffset="-1" />
		
		<spriteSheetComponent name="Sprite">
			<event name="onInit" params="component, element">
				local sporeGfx = "spore_A"
				component("spriteName"):SetString(sporeGfx)
				component("sheetName"):SetString("xml_resources/"..sporeGfx..".xml")
				component("size"):SetFloat(0.8*game.hudScale())
				component("visible"):SetInt(1)
				component("layer"):SetString("MidFrontPopUps")
			</event>
		</spriteSheetComponent>

		<aeComponent name="CostumeAnim">
			<position relativeTo="element:name()" vAnchor="VCENTER" hAnchor="HCENTER" />
			<orientation vAnchor="TOP" hAnchor="LEFT" xOffset="0" yOffset="-16*game.menuScaleY()" priorityOffset="-2" />
			<event name="onInit" params="component, element">
				<![CDATA[
					component("animationName"):SetString("xml_bin/costume_egg.bin")
					component("animation"):SetString("costume_egg")
					component:setScale(Vector2(0.75*game.menuScaleX(), 0.75*game.menuScaleX()))
					component("visible"):SetInt(0)
					component("layer"):SetString("MidFrontPopUps")
				]]>
			</event>
		</aeComponent>
		
		<aeComponent name="RareAnim">
			<position relativeTo="element:name()" vAnchor="TOP" hAnchor="HCENTER" />
			<orientation vAnchor="TOP" hAnchor="LEFT" xOffset="0" yOffset="-3*game.hudScale()" priorityOffset="-1" />
			<event name="onInit" params="component, element">
				<![CDATA[
					component("animationName"):SetString("xml_bin/rare_egg.bin")
					component("animation"):SetString("rare_egg")
					component:setScale(Vector2(0.85*game.hudScale(), 0.85*game.hudScale()))

					component("visible"):SetInt(0)
					component("layer"):SetString("MidFrontPopUps")
				]]>
			</event>
		</aeComponent>

	</element>
	
	
	
	<element name="Notification">
		<size dependentOnElement="element:name()" dependentOnComponent="Text" />
		<position relativeTo="EggImage" vAnchor="BOTTOM" hAnchor="HCENTER" />
		<orientation vAnchor="TOP" hAnchor="HCENTER" xOffset="0" yOffset="0" priorityOffset="0" />
		<textComponent name="Text">
			<size w="340*game.hudScale()" />
			<position relativeTo="element" vAnchor="VCENTER" hAnchor="HCENTER" />
			<orientation vAnchor="VCENTER" hAnchor="HCENTER" xOffset="0" yOffset="0" priorityOffset="0" />
			<event name="onInit" params="component, element">			
				component("textPadding"):SetInt(30)
				component("autoScale"):SetInt(1)
				component("font"):Set(game.getTextFont())
				component("alignment"):SetInt(lua_sys.MenuTextComponent_TEXT_HCENTER_ALIGNED)
				component("text"):SetString(game.getLocalizedText("GETNOW_BREED_NOTICE"))
				component("size"):SetFloat(0.23*game.hudScale())
				component("layer"):SetString("MidFrontPopUps")
				component:calculatePosition()
			</event>
		</textComponent>
	</element>
	
	<element name="MonsterName">
		<size dependentOnElement="element:name()" dependentOnComponent="Text" />
		<position relativeTo="Notification" vAnchor="BOTTOM" hAnchor="HCENTER" />
		<orientation vAnchor="TOP" hAnchor="HCENTER" xOffset="0" yOffset="-2*game.hudScale()" priorityOffset="0" />
		<textComponent name="Text">
			<size w="340*game.hudScale()"/>
			<position relativeTo="element" vAnchor="VCENTER" hAnchor="HCENTER" />
			<orientation vAnchor="VCENTER" hAnchor="HCENTER" xOffset="0" yOffset="0" priorityOffset="0" />
			<event name="onInit" params="component, element">			
				component("textPadding"):SetInt(30)
				component("autoScale"):SetInt(1)
				component("font"):Set(game.getTextFont())
				component("alignment"):SetInt(lua_sys.MenuTextComponent_TEXT_HCENTER_ALIGNED)
				component("text"):SetString("Mammott")
				component("size"):SetFloat(0.23*game.hudScale())
				component("layer"):SetString("MidFrontPopUps")
				component:setColor(0.31, 0.94, 0.26)
			</event>
		</textComponent>
	</element>
	
	<element name="Prefix">
		<size dependentOnElement="element:name()" dependentOnComponent="Text" />
		<position relativeTo="MonsterName" vAnchor="BOTTOM" hAnchor="HCENTER" />
		<orientation vAnchor="TOP" hAnchor="HCENTER" xOffset="0" yOffset="5*game.menuScaleX()" priorityOffset="0" />
		<textComponent name="Text">
			<size w="340*game.hudScale()" />
			<position relativeTo="element" vAnchor="VCENTER" hAnchor="HCENTER" />
			<orientation vAnchor="VCENTER" hAnchor="HCENTER" xOffset="0" yOffset="0" priorityOffset="0" />
			<event name="onInit" params="component, element">
				component("textPadding"):SetInt(30)
				component("autoScale"):SetInt(1)
				component("font"):Set(game.getTextFont())
				component("alignment"):SetInt(lua_sys.MenuTextComponent_TEXT_HCENTER_ALIGNED)
				component("text"):SetString("INCUBATION_GETNOW_PREFIX")
				component("size"):SetFloat(0.23*game.hudScale())
				component("layer"):SetString("MidFrontPopUps")
			</event>
		</textComponent>
	</element>
	<element name="Time">
		<size dependentOnElement="element:name()" dependentOnComponent="Text" />
		<position relativeTo="Prefix" vAnchor="BOTTOM" hAnchor="HCENTER" />
		<orientation vAnchor="TOP" hAnchor="HCENTER" xOffset="0" yOffset="-2*game.hudScale()" priorityOffset="0" />
		<textComponent name="Text">
			<size w="340*game.hudScale()" />
			<position relativeTo="element" vAnchor="VCENTER" hAnchor="HCENTER" />
			<orientation vAnchor="VCENTER" hAnchor="HCENTER" xOffset="0" yOffset="0" priorityOffset="0" />
			<event name="onInit" params="component, element">			
				component("textPadding"):SetInt(30)
				component("autoScale"):SetInt(1)
				component("font"):Set(game.getTextFont())
				component("alignment"):SetInt(lua_sys.MenuTextComponent_TEXT_HCENTER_ALIGNED)
				component("text"):SetString("00:00:00")
				if(game.hasNurseryModifier()) then
					component:setColor(0.31, 0.94, 0.26)
				end
				component("size"):SetFloat(0.23*game.hudScale())
				component("layer"):SetString("MidFrontPopUps")
			</event>
		</textComponent>
		
	</element>
	<element name="Postfix">
		<size dependentOnElement="element:name()" dependentOnComponent="Text" />
		<position relativeTo="Time" vAnchor="BOTTOM" hAnchor="HCENTER" />
		<orientation vAnchor="TOP" hAnchor="HCENTER" xOffset="0" yOffset="5*game.menuScaleX()" priorityOffset="0" />
		<event name="onInit" params="element">
			element("diamonds"):SetInt(0)
		</event>
		<textComponent name="Text">
			<size w="300*game.hudScale()" />
			<position relativeTo="element" vAnchor="VCENTER" hAnchor="HCENTER" />
			<orientation vAnchor="VCENTER" hAnchor="HCENTER" xOffset="0" yOffset="0" priorityOffset="0" />
			<event name="onInit" params="component, element">			
				component("textPadding"):SetInt(30)
				component("autoScale"):SetInt(1)
				component("font"):Set(game.getTextFont())
				component("alignment"):SetInt(lua_sys.MenuTextComponent_TEXT_HCENTER_ALIGNED)
				component("text"):SetString("GETNOW_POSTFIX")
				component("size"):SetFloat(0.23*game.hudScale())
				component("layer"):SetString("MidFrontPopUps")
			</event>
		</textComponent>
	</element>
	
	<template type="template_spritesheetbutton" name="Wait">
		<hudScale scale="game.hudScale()" />
		<templateVar name="$text" equals="WAIT_LABEL" />
		<templateVar name="$spriteScale" equals="0.5" />
		<templateVar name="$layer" equals="MidFrontPopUps" />
		<position relativeTo="bg" vAnchor="BOTTOM" hAnchor="LEFT" />
		<orientation vAnchor="VCENTER" hAnchor="LEFT" xOffset="0" yOffset="-10" priorityOffset="-1" />
		<event name="onTick" params="element, dt">
			onTick(element, dt)
			if(element["UpSprite"]("size"):GetFloat() ~= element["Overlay"]("size"):GetFloat()) then
				element["Overlay"]("size"):SetFloat(element["UpSprite"]("size"):GetFloat())
			end
		</event>
		<textComponent name="Text">
			<position relativeTo="element:name()" vAnchor="BOTTOM" hAnchor="HCENTER" />
			<orientation vAnchor="TOP" hAnchor="HCENTER" xOffset="0" yOffset="0" />
			<event name="onInit" params="component, element">
				onInit(component, element)
				component("size"):SetFloat(0.25)
			</event>
		</textComponent>
		<touchComponent name="Touch">
			<event name="onTouchDown" params="component, element">
				onTouchDown(component, element)
				element["Overlay"]:setColor(0.5, 0.5, 0.5)
			</event>
			<event name="onTouchUp" params="component, element">
				onTouchUp(component, element)
				element["Overlay"]:setColor(1.0, 1.0, 1.0)
				element:root():popPopUp()
				game.finishBreeding()
				game.deselectSelectedObject();
				manager:setContext(manager:getDefaultContext())
			</event>
			<event name="onTouchRelease" params="component, element">
				onTouchRelease(component, element)
				element["Overlay"]:setColor(1.0, 1.0, 1.0)
			</event>
		</touchComponent>
		<spriteSheetComponent name="Overlay">
			<position relativeTo="element:name()" vAnchor="VCENTER" hAnchor="HCENTER" />
			<orientation vAnchor="VCENTER" hAnchor="HCENTER" xOffset="0" yOffset="0" priorityOffset="-1" />
			<event name="onInit" params="component, element">
				component("spriteName"):SetString("button_wait")
				component("sheetName"):SetString("xml_resources/hud03.xml")
				component("layer"):SetString("MidFrontPopUps")
				component("size"):SetFloat(0.5)
			</event>
		</spriteSheetComponent>
	</template>	
	
	<template type="template_spritesheetbutton" name="GetItNow">
		<hudScale scale="game.hudScale()" />
		<templateVar name="$text" equals="CONTEXTBAR_SPEED_LABEL" />
		<templateVar name="$spriteScale" equals="0.5" />
		<templateVar name="$layer" equals="MidFrontPopUps" />
		<position relativeTo="bg" vAnchor="BOTTOM" hAnchor="RIGHT" />
		<orientation vAnchor="VCENTER" hAnchor="RIGHT" xOffset="0" yOffset="-10" priorityOffset="-1" />
		<event name="onTick" params="element, dt">
			onTick(element, dt)
			if(element["UpSprite"]("size"):GetFloat() ~= element["Overlay"]("size"):GetFloat()) then
				element["Overlay"]("size"):SetFloat(element["UpSprite"]("size"):GetFloat())
			end
		</event>
		<textComponent name="Text">
			<position relativeTo="element:name()" vAnchor="BOTTOM" hAnchor="HCENTER" />
			<orientation vAnchor="TOP" hAnchor="HCENTER" xOffset="0" yOffset="0" />
			<event name="onInit" params="component, element">
				onInit(component, element)
				component("size"):SetFloat(0.25)
			</event>
		</textComponent>
		<touchComponent name="Touch">
			<event name="onTouchDown" params="component, element">
				onTouchDown(component, element)
				element["Overlay"]:setColor(0.5, 0.5, 0.5)
			</event>
			<event name="onTouchUp" params="component, element">
				onTouchUp(component, element)
				element["Overlay"]:setColor(1.0, 1.0, 1.0)
				element:root():popPopUp()
				game.finishBreeding(true)
				game.deselectSelectedObject()
				manager:setContext(manager:getDefaultContext())

			</event>
			<event name="onTouchRelease" params="component, element">
				onTouchRelease(component, element)
				element["Overlay"]:setColor(1.0, 1.0, 1.0)
			</event>
		</touchComponent>
		<spriteSheetComponent name="Overlay">
			<position relativeTo="element:name()" vAnchor="VCENTER" hAnchor="HCENTER" />
			<orientation vAnchor="VCENTER" hAnchor="HCENTER" xOffset="0" yOffset="0" priorityOffset="-1" />
			<event name="onInit" params="component, element">
				component("spriteName"):SetString("button_finish")
				component("sheetName"):SetString("xml_resources/context_buttons.xml")
				component("layer"):SetString("MidFrontPopUps")
				component("size"):SetFloat(0.5)
			</event>
		</spriteSheetComponent>
	</template>	
	
	<template type="template_spritesheetbutton" name="UnderBoxButton">
		<hudScale scale="game.hudScale()" />
		<templateVar name="$text" equals="CONTEXTBARLABEL_ZAP" />
		<templateVar name="$spriteScale" equals="0.5" />
		<templateVar name="$layer" equals="MidFrontPopUps" />
		<position relativeTo="bg" vAnchor="BOTTOM" hAnchor="HCENTER" />
		<orientation vAnchor="VCENTER" hAnchor="HCENTER" xOffset="0" yOffset="-10" priorityOffset="-1" />
		<event name="onPostInit" params="element">
		
			element.disabled = 0;
			if(game.getZapIslands():size() == 0) then
				element:DoStoredScript("setInvisible")
			else
			
				element:DoStoredScript("setVisible")
				if(game.isSeasonalIsland()) then
					element:disable()
					element.disabled = 1
					element["Touch"]("enabled"):SetInt(1)
				end
			end
		</event>
		<event name="onTick" params="element, dt">
			onTick(element, dt)
			if(element["UpSprite"]("size"):GetFloat() ~= element["Overlay"]("size"):GetFloat()) then
				element["Overlay"]("size"):SetFloat(element["UpSprite"]("size"):GetFloat())
			end
		</event>
		<event name="setVisible" params="element">
			setVisible(element)
			element["Overlay"]("visible"):SetInt(1)
		</event>
		<event name="setInvisible" params="element">
			setInvisible(element)
			element["Overlay"]("visible"):SetInt(0)
		</event>
		<event name="disable" params="element">
			disable(element)
			element["Overlay"]:setColor(0.5, 0.5, 0.5)
		</event>
		<event name="enable" params="element">
			enable(element)
			element["Overlay"]:setColor(1.0, 1.0, 1.0)
		</event>
		<textComponent name="Text">
			<position relativeTo="element:name()" vAnchor="BOTTOM" hAnchor="HCENTER" />
			<orientation vAnchor="TOP" hAnchor="HCENTER" xOffset="0" yOffset="0" />
			<event name="onInit" params="component, element">
				onInit(component, element)
				component("size"):SetFloat(0.2)
			</event>
		</textComponent>
		<touchComponent name="Touch">
			<event name="onTouchDown" params="component, element">
				if(element.disabled == 0) then
					onTouchDown(component, element)
					element["Overlay"]:setColor(0.5, 0.5, 0.5)
				end
			</event>
			<event name="onTouchUp" params="component, element">
				if(element.disabled == 0) then
					onTouchUp(component, element)
					element["Overlay"]:setColor(1.0, 1.0, 1.0)
				
					element:root():popPopUp()
					manager:setReserveState(manager:getContext())
					manager:setContext("UNDERLING_LIST")
				else
					element:root():popPopUp()
					game.displayNotification("NO_ZAP_FROM_SEASONAL_SHANTY")
				end
			</event>
			<event name="onTouchRelease" params="component, element">
				if(element.disabled == 0) then
					onTouchRelease(component, element)
					element["Overlay"]:setColor(1.0, 1.0, 1.0)
				end
			</event>
		</touchComponent>
		<spriteSheetComponent name="Overlay">
			<position relativeTo="element:name()" vAnchor="VCENTER" hAnchor="HCENTER" />
			<orientation vAnchor="VCENTER" hAnchor="HCENTER" xOffset="0" yOffset="0" priorityOffset="-1" />
			<event name="onInit" params="component, element">
				component("spriteName"):SetString("button_zap")
				component("sheetName"):SetString("xml_resources/hud03.xml")
				component("layer"):SetString("MidFrontPopUps")
				component("size"):SetFloat(0.5)
			</event>
		</spriteSheetComponent>
	</template>
	
	<event name="queuePop" params="element">
		element:root():popPopUp()
	</event>

</menu>