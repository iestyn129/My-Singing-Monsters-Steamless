<?xml version="1.0" encoding="utf-8"?>
<menu xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="menu.xsd">
	<event name="onInit" params="element">
		element("transitionTime"):SetFloat(0.0)
		element("loadingAnimTime"):SetFloat(0.0)		
	</event>
	
	<event name="onPostInit" params="element">
		element("transitionState"):SetInt(1)
		element("loadingState"):SetInt(1)
		element("loadingStateChanged"):SetInt(1)

		lua_sys.playSoundFx("audio/sfx/quest_icon_open.wav")
	</event>
	
	<event name="onTick" params="element, dt">
		<![CDATA[
			if(dt < game.maxTickTime()) then
				local transitionState = element("transitionState"):GetInt()

				if(element:GetElement("LoadingIndicator"):GetComponent("Text")("visible"):GetInt() == 1) then
					local loadingAnimTime = element("loadingAnimTime"):GetFloat()
					loadingAnimTime = (loadingAnimTime + dt*3)
					element("loadingAnimTime"):SetFloat(loadingAnimTime)
					element:DoStoredScript("TickLoading")

					if(loadingAnimTime >= 1.0 and element("loadingState"):GetInt() == 1) then
						element("loadingState"):SetInt(2)
						element("loadingStateChanged"):SetInt(1)
						element("loadingAnimTime"):SetFloat(0.0)
					elseif (loadingAnimTime >= 1.0 and element("loadingState"):GetInt() == 2)then
						element("loadingState"):SetInt(3)
						element("loadingStateChanged"):SetInt(1)
						element("loadingAnimTime"):SetFloat(0.0)
					elseif (loadingAnimTime >= 1.0 and element("loadingState"):GetInt() == 3)then
						element("loadingState"):SetInt(1)
						element("loadingStateChanged"):SetInt(1)
						element("loadingAnimTime"):SetFloat(0.0)
					end
				end

				if(transitionState ~= 0) then
					local transitionTime = element("transitionTime"):GetFloat()
					
					element:DoStoredScript("TickTransition")
					
					if(transitionState == 1) then
						transitionTime = (transitionTime + dt*3)
					elseif(transitionState == 2) then
						transitionTime = (transitionTime - dt*3)
					end
					
					transitionTime = clamp( transitionTime, 0.0, 1.0 )
					element("transitionTime"):SetFloat(transitionTime)
					
					if(transitionTime >= 1.0) then
						element("transitionState"):SetInt(0)
						element("transitionTime"):SetFloat(1.0)
						element:DoStoredScript("TickTransition")
					elseif(transitionTime <= 0.0) then
						game.setClipping("Clipping", 0, 0, lua_sys.screenWidth()*lua_sys.deviceScaleX(), lua_sys.screenHeight()*lua_sys.deviceScaleY())
						element["NewsEntries"]:DoStoredScript("dismissPlacement")
						element:root():popPopUp()
						manager:setContext(manager:reserveState())
					end
				end
			end
		]]>
	</event>
	
	<event name="TickTransition" params="element">
		local transitionTime = element("transitionTime"):GetFloat()
		local frame = element:GetElement("bg")
		local topFade = element:GetElement("FadeSprite")
		local botFade = element:GetElement("FadeSpriteBot")
		frame("xOffset"):SetFloat(lua_sys.screenWidth()*0.5 + (-0.5)*lua_sys.screenWidth()*(1/transitionTime))
		element["FadedBG"]["Sprite"]("alpha"):SetFloat(transitionTime*0.5)
		game.setClipping("Clipping", (frame:absX()+(0.02*lua_sys.screenWidth()))*lua_sys.deviceScaleX(), (topFade:absY()+(0.01*lua_sys.screenHeight()))*lua_sys.deviceScaleY(), (frame:absW()-(0.04*lua_sys.screenWidth()))*lua_sys.deviceScaleX(), ((botFade:absY()+botFade:absH())-topFade:absY()-14)*lua_sys.deviceScaleY())
	</event>

	<event name="TickLoading" params="element">
		local loadingState = element("loadingState"):GetInt()
		local loadingStateChanged = element("loadingStateChanged"):GetInt()
		
		if(loadingStateChanged and loadingState == 1) then			
			element("loadingStateChanged"):SetInt(0)
			element:GetElement("LoadingIndicator"):GetComponent("DotText")("text"):SetString(".")
		elseif(loadingStateChanged and loadingState == 2) then
			element("loadingStateChanged"):SetInt(0)
			element:GetElement("LoadingIndicator"):GetComponent("DotText")("text"):SetString("..")
		elseif(loadingStateChanged and loadingState == 3) then
			element:GetElement("LoadingIndicator"):GetComponent("DotText")("text"):SetString("...")
		end
	</event>
	
	<event name="queuePop" params="element">	
		manager:hideContextBar()	
		element("transitionState"):SetInt(2)
	</event>
	
	<element name="FadedBG">
		<size dependentOnElement="element:name()" dependentOnComponent="Sprite" />
		<position relativeTo="SCREEN" vAnchor="VCENTER" hAnchor="HCENTER" />
		<orientation vAnchor="VCENTER" hAnchor="HCENTER" xOffset="0" yOffset="0" priorityOffset="7" />
		<spriteComponent name="Sprite">
			<event name="onInit" params="component, element">
				component("spriteName"):SetString("__BUILTIN__WHITE_TEXTURE")
				component:setScale(Vector2(lua_sys.screenWidth()*0.25, lua_sys.screenHeight()*0.25))
				component:setColor(0.0, 0.0, 0.0)
				component("alpha"):SetFloat(0.0)
				component("layer"):SetString("PopUps")
			</event>
		</spriteComponent>
		<touchComponent name="Touch">
			<size dependentOnElement="element:name()" />
			<position relativeTo="element:name()" vAnchor="VCENTER" hAnchor="HCENTER" />
			<orientation vAnchor="VCENTER" hAnchor="HCENTER" xOffset="0" yOffset="0" priorityOffset="0" />
		</touchComponent>
	</element>
	
	<element name="bg">
		<size dependentOnElement="element:name()" dependentOnComponent="Sprite" />
		<position relativeTo="PARENT" vAnchor="VCENTER" hAnchor="HCENTER" />
		<orientation vAnchor="VCENTER" hAnchor="HCENTER" xOffset="(-1)*lua_sys.screenWidth()" yOffset="0" priorityOffset="6" />
		<ninesliceComponent name="Sprite">
			<size w="400*game.menuScaleX()" h="225*game.menuScaleY()" />
			<event name="onInit" params="component, element">
				component("topHeight"):SetFloat(50.0)
				component("bottomHeight"):SetFloat(50.0)
				component("leftWidth"):SetFloat(50.0)
				component("rightWidth"):SetFloat(50.0)
				component("includeBorder"):SetInt(1)
				component("size"):SetFloat(0.5)
				component("spriteName"):SetString("gfx/menu/Black9SFrame50")
				component("layer"):SetString("MidPopUps")
			</event>
		</ninesliceComponent>
		<spriteSheetComponent name="Flourish1">
			<position relativeTo="element:name()" vAnchor="TOP" hAnchor="LEFT" />
			<orientation vAnchor="TOP" hAnchor="LEFT" xOffset="7" yOffset="7" priorityOffset="-2" />
			<event name="onInit" params="component, element">
				component("spriteName"):SetString("menu_swirl_01")
				component("sheetName"):SetString("xml_resources/hud01.xml")
				component("size"):SetFloat(0.5*game.menuScaleX())
				component("layer"):SetString("MidPopUps")
			</event>
		</spriteSheetComponent>
		<spriteSheetComponent name="Flourish2">
			<position relativeTo="element:name()" vAnchor="TOP" hAnchor="RIGHT" />
			<orientation vAnchor="TOP" hAnchor="RIGHT" xOffset="7" yOffset="10" priorityOffset="-2" />
			<event name="onInit" params="component, element">
				component("spriteName"):SetString("menu_swirl_02")
				component("sheetName"):SetString("xml_resources/hud01.xml")
				component("size"):SetFloat(0.5*game.menuScaleX())
				component("rotation"):SetFloat(-0.5*math.pi)
				component("layer"):SetString("MidPopUps")
			</event>
		</spriteSheetComponent>
	</element>
	
	<element name="BlackCover">
		<size dependentOnElement="element:name()" dependentOnComponent="Sprite" />
		<position relativeTo="bg" vAnchor="TOP" hAnchor="HCENTER" />
		<orientation vAnchor="TOP" hAnchor="HCENTER" xOffset="0" yOffset="10" priorityOffset="-1" />
		<ninesliceComponent name="Sprite">
			<size w="375*game.menuScaleX()" h="43*game.hudScale()" />
			<event name="onInit" params="component, element">
				component("topHeight"):SetFloat(1.0)
				component("bottomHeight"):SetFloat(1.0)
				component("leftWidth"):SetFloat(1.0)
				component("rightWidth"):SetFloat(1.0)
				component("size"):SetFloat(0.5)
				component("includeBorder"):SetInt(1)
				component("spriteName"):SetString("__BUILTIN__WHITE_TEXTURE")
				component:setColor(0.0, 0.0, 0.0)
				component("layer"):SetString("MidPopUps")
			</event>
		</ninesliceComponent>
	</element>
	
	<element name="TitleFrame">
		<size dependentOnElement="element:name()" dependentOnComponent="Sprite" />
		<position relativeTo="bg" vAnchor="TOP" hAnchor="HCENTER" />
		<orientation vAnchor="TOP" hAnchor="HCENTER" xOffset="0" yOffset="-3*game.hudScale()" priorityOffset="-3" />
		<ninesliceComponent name="Sprite">
			<size w="200*game.menuScaleX()" h="50*game.hudScale()" />
			<event name="onInit" params="component, element">
				component("topHeight"):SetFloat(44.0)
				component("bottomHeight"):SetFloat(44.0)
				component("leftWidth"):SetFloat(50.0)
				component("rightWidth"):SetFloat(50.0)
				component("size"):SetFloat(0.5)
				component("includeBorder"):SetInt(1)
				component("spriteName"):SetString("gfx/menu/GreyTitleFrame")
				component("layer"):SetString("MidPopUps")
			</event>
		</ninesliceComponent>
	</element>
	
	<element name="FadeSprite">
		<size dependentOnElement="element:name()" dependentOnComponent="Sprite" />
		<position relativeTo="TitleFrame" vAnchor="BOTTOM" hAnchor="HCENTER" />
		<orientation vAnchor="TOP" hAnchor="HCENTER" xOffset="0" yOffset="-5*game.hudScale()" priorityOffset="-2" />
		<spriteComponent name="Sprite">
			<event name="onInit" params="component, element">
				component("spriteName"):SetString("gfx/fade_sprite")
				component:setScale(Vector2(23.0*game.menuScaleX(), 0.5*game.menuScaleY()))
				component("layer"):SetString("Clipping")
				component("maskY"):SetFloat(0.5)
				component("maskH"):SetFloat(31)
			</event>
		</spriteComponent>
	</element>
	
	<element name="FadeSpriteBot">
		<size dependentOnElement="element:name()" dependentOnComponent="Sprite" />
		<position relativeTo="bg" vAnchor="BOTTOM" hAnchor="HCENTER" />
		<orientation vAnchor="BOTTOM" hAnchor="HCENTER" xOffset="0" yOffset="10*game.hudScale()" priorityOffset="-5" />
		<spriteComponent name="Sprite">
			<event name="onInit" params="component, element">
				component("spriteName"):SetString("gfx/fade_sprite")
				component:setScale(Vector2(lua_sys.screenWidth()/component:absW(), 0.5))
				component("layer"):SetString("Clipping")
				component("maskY"):SetFloat(0.5)
				component("maskH"):SetFloat(31)
				component("vFlip"):SetInt(1)
			</event>
		</spriteComponent>
	</element>
	
	<element name="FrameTitle">
		<size dependentOnElement="element:name()" dependentOnComponent="Text"/>
		<position relativeTo="TitleFrame" vAnchor="VCENTER" hAnchor="HCENTER" />
		<orientation vAnchor="VCENTER" hAnchor="HCENTER" xOffset="0" yOffset="0" priorityOffset="-1" />
		<textComponent name="Text">
			<event name="onInit" params="component, element">
				component("font"):Set(game.getTitleFont())
				component("size"):SetFloat(0.45*game.hudScale())
				component("alignment"):SetInt(lua_sys.MenuTextComponent_TEXT_HCENTER_ALIGNED)
				component:setColor(118/255, 244/255, 21/255)
				component("text"):SetString("CONTEXTBAR_HELP_LABEL")
				component("layer"):SetString("MidPopUps")
			</event>
		</textComponent>
	</element>

	<element name="LoadingIndicator">
		<size dependentOnElement="element:name()" dependentOnComponent="Text" />
		<position relativeTo="bg" vAnchor="VCENTER" hAnchor="HCENTER" />
		<orientation vAnchor="VCENTER" hAnchor="HCENTER" xOffset="0" yOffset="0" priorityOffset="-2" />
		<textComponent name="Text">
			<event name="onInit" params="component, element">
				component("multiline"):SetInt(1)
				component("font"):Set(game.getTextFont())
				component("size"):SetFloat(0.25*game.hudScale())
				component("alignment"):SetInt(lua_sys.MenuTextComponent_TEXT_HCENTER_ALIGNED)
				component("text"):SetString("STATUS_DOWNLOADING")
				component("layer"):SetString("MidPopUps")
			</event>
		</textComponent>
		<textComponent name="DotText">
			<position relativeTo="element:name()" relativeToComponent="Text" vAnchor="VCENTER" hAnchor="RIGHT" />
			<orientation vAnchor="VCENTER" hAnchor="LEFT" xOffset="0" yOffset="0" priorityOffset="-2" />
			<event name="onInit" params="component, element">
				component("multiline"):SetInt(1)
				component("font"):Set(game.getTextFont())
				component("size"):SetFloat(0.25*game.hudScale())
				component("alignment"):SetInt(lua_sys.MenuTextComponent_TEXT_LEFT_ALIGNED)
				component("text"):SetString("")
				component("layer"):SetString("MidPopUps")
			</event>
		</textComponent>
	</element>
	
	<element name="ScrollBar">
		<size dependentOnElement="element:name()" dependentOnComponent="Sprite" />
		<position relativeTo="bg" vAnchor="VCENTER" hAnchor="RIGHT" />
		<orientation vAnchor="VCENTER" hAnchor="LEFT" xOffset="-20*game.hudScale()" yOffset="0" priorityOffset="0" />
		<spriteSheetComponent name="Sprite">
			<event name="onInit" params="component, element">
				component("spriteName"):SetString("scroll_bar_01")
				component("sheetName"):SetString("xml_resources/buttons01.xml")
				component("size"):SetFloat(0.3*game.menuScaleY())
				component("layer"):SetString("ContextBar")
			</event>
		</spriteSheetComponent>
	</element>
	
	<element name="ScrollMarker">
		<size dependentOnElement="element:name()" dependentOnComponent="Marker" />
		<position relativeTo="ScrollBar" vAnchor="TOP" hAnchor="HCENTER" />
		<orientation vAnchor="TOP" hAnchor="HCENTER" xOffset="0" yOffset="5*game.menuScaleY()" priorityOffset="-1" />
		<spriteSheetComponent name="Marker">
			<event name="onInit" params="component, element">
				component("useOffsets"):SetInt(1)
				component("spriteName"):SetString("scroll_bar_dot")
				component("sheetName"):SetString("xml_resources/buttons01.xml")
				component("size"):SetFloat(0.3*game.menuScaleY())
				component("layer"):SetString("ContextBar")
				element("originalYOffset"):SetInt(element("yOffset"):GetInt())
			</event>
		</spriteSheetComponent>
		<touchComponent name="Touch">
			<size dependentOnElement="element:name()" dependentOnComponent="Marker" />
			<position relativeTo="PARENT" vAnchor="TOP" hAnchor="LEFT" />
			<orientation vAnchor="TOP" hAnchor="LEFT" xOffset="0" yOffset="0" priorityOffset="0" />
			<event name="onTouchDrag" params="component, element, x, y">
				local scrollBar = element:parent():GetElement("ScrollBar")
				local fromTopOfMarkerRange = y - scrollBar:absY() - element("originalYOffset"):GetInt();
				
				local markerBookend = element("originalYOffset"):GetInt()

				local scrollSize = 0
				if(element:parent():GetElement("NewsEntries")("scrollSize") ~= nil) then
					scrollSize = element:parent():GetElement("NewsEntries")("scrollSize"):GetFloat();
				end

				local scrollOffset = (-(fromTopOfMarkerRange - markerBookend)/(scrollBar:absH() - 2*markerBookend - element:absH()))*scrollSize;
				scrollOffset = clamp(scrollOffset, -scrollSize, 0)
				
				element("scrollOffset"):SetFloat(scrollOffset);
				element:parent():GetElement("NewsEntries")["Swiper"]:DoStoredScript("setScrollOffsetToMarker");
			</event>
		</touchComponent>
	</element>

	<element name="NewsEntries">
		<size w="400*game.menuScaleX()" h="(210*game.menuScaleY())-60" />
		<position relativeTo="bg" vAnchor="BOTTOM" hAnchor="HCENTER" />
		<orientation vAnchor="BOTTOM" hAnchor="HCENTER" xOffset="0" yOffset="0" priorityOffset="0" />
		<event name="onInit" params="element">
			element("NumEntries"):SetInt(0)
			element("IsLoading"):SetInt(0)
			element("FirstEntry"):SetString("")
			element("listeningForEntityCollections"):SetInt(0)
			element("clickedNewsId"):SetString("")
			element("loadFail"):SetInt(0)
			element("placementName"):SetString("");
			element:SetupGenericListener(game.engineReceiver(), "game::msg::MsgPlacementInfo", "gotMsgPlacementInfo")
			element:SetupGenericListener(game.engineReceiver(), "game::msg::MsgPlacementInfoFail", "gotMsgPlacementInfoFail")
		</event>
		<event name="gotMsgPlacementInfoFail" params="element, msg">
			<![CDATA[
			element:parent():GetElement("LoadingIndicator"):GetComponent("Text")("visible"):SetInt(0)
			element:parent():GetElement("LoadingIndicator"):GetComponent("DotText")("visible"):SetInt(0)
			if(string.sub(msg.name,0,4) == "help") then
				element("placementName"):SetString(msg.name)
			end
			]]>
		</event>
		<event name="gotMsgPlacementInfo" params="element, msg">
			<![CDATA[
				if(element("IsLoading"):GetInt() == 0)	then
					if(string.sub(msg.name,0,4) == "help") then
						element("placementName"):SetString(msg.name)
						local numEntries = 0
						if (msg.index == -1) then
							local placement = game.nativePlacement(msg.name)
							if (placement ~= nil) then
								numEntries = placement:numAds()
								if (numEntries == 0 and element("loadFail"):GetInt() == 0 ) then
									element("loadFail"):SetInt(1)
									game.loadNewsFlash(msg.name,false,0,0,"load_images=false")
									return 0
								end
							end
						end

						element("IsLoading"):SetInt(1)
						element:parent():GetElement("LoadingIndicator"):GetComponent("Text")("visible"):SetInt(0)
						element:parent():GetElement("LoadingIndicator"):GetComponent("DotText")("visible"):SetInt(0)

						local previous = nil
						
						local function makeNews(index)
						
							local newsEntry = menu:addTemplateElement("template_newsitem", "placement_item"..index, element)

							newsEntry("placement"):SetString(msg.name)
							newsEntry("index"):SetInt(index)
							newsEntry("greyIndex"):SetInt((index % 2) * 2)
							
							if(previous == nil) then
								newsEntry:relativeTo(element)
								newsEntry:setOrientation(lua_sys.MenuOrientation(-5, 0, -1, lua_sys.HCENTER, lua_sys.TOP))
								newsEntry:setRelativeObjectAnchors(lua_sys.HCENTER, lua_sys.TOP)
								element("FirstEntry"):SetString(newsEntry:name())
							else
								newsEntry:relativeTo(previous)
								newsEntry:setOrientation(lua_sys.MenuOrientation(0, 0, 0, lua_sys.HCENTER, lua_sys.TOP))
								newsEntry:setRelativeObjectAnchors(lua_sys.HCENTER, lua_sys.BOTTOM)
							end
							
							previous = newsEntry
							
							newsEntry:init()
							newsEntry:setPositionBroadcast(true)
						end
						
						if (numEntries > 0) then
							for i=0,numEntries-1 do
								makeNews(i)
							end
							element("NumEntries"):SetInt(numEntries)
							local first = element:GetElement(element("FirstEntry"):GetString())
							if(first) then
								first:setOrientationPosition(Vector2(first("xOffset"):GetInt(), first("yOffset"):GetInt()+1))
							end
						end
						element["Swiper"]:DoStoredScript("refresh")
					end
				end
			]]>
		</event>
		<event name="dismissPlacement" params="element">
			<![CDATA[
			local placementName = element("placementName"):GetString()
			if (placementName ~= nil) then
				local placement =  game.nativePlacement(placementName)
				if (placement ~= nil) then
					placement:reportDismiss();
				end
			end
			]]>
		</event>
		<swipeComponent name="Swiper">
			<event name="onPostInit" params="component, element">
				component:DoStoredScript("refresh")
				if(game.hudScale() == 1) then
					element("yOffset"):SetInt(20*game.hudScale())
				end
			</event>
			<function name="refresh" params="component, element">
				component:GetVar("direction"):SetInt(lua_sys.MenuSwipeComponent_SwipeDirectionVertical)
				component:GetVar("mode"):SetInt(lua_sys.MenuSwipeComponent_SwipeModeFree)
				component:GetVar("tSteps"):SetFloat(25.0)
				component:listenToTouches(element)
				
				if(element:GetElement(element("FirstEntry"):GetString())) then
					local totalHeight = element("NumEntries"):GetInt() * element:GetElement(element("FirstEntry"):GetString()):absH()

					
					if(totalHeight &gt; element:absH()) then
						component:setScrollSize(totalHeight - element:absH())
                        if(game.hudScale() ~= 1) then
                            component:setScrollSize(totalHeight - element:absH() + 20*game.hudScale())
                        end
					else
						component:setScrollSize(0)
					end
					element("scrollSize"):SetFloat(component:scrollSize())
				end
				
			</function>
			<event name="onTick" params="component, element, dt">
				local first = element:GetElement(element("FirstEntry"):GetString())
				if(first) then
					local offset = component:scrollOffset()
					element("scrollOffset"):SetFloat(offset)
					
					if(first:getOrientationPosition().y ~= offset) then
						first:setOrientationPosition(Vector2(first("xOffset"):GetInt(), offset))
						local scrollMarker = element:parent():GetElement("ScrollMarker");
						local markerBookend = scrollMarker("originalYOffset"):GetInt()
					
						--range without borders is [0, (scrollbarH-scrollMarkerH)]
						local markerMovementHeight = element:parent():GetElement("ScrollBar"):absH() - (2*markerBookend) - scrollMarker:absH();

						local scrollMarkerYOffset = 0
						if(component:scrollSize() ~= 0) then
							scrollMarkerYOffset = -(offset/component:scrollSize()) * markerMovementHeight;
						end
					
						scrollMarkerYOffset = clamp(scrollMarkerYOffset, 0, markerMovementHeight)
					
						scrollMarker("yOffset"):SetInt(markerBookend + scrollMarkerYOffset)
					end
				end
				
				if( menu:popUpLevel() > 1) then
					component:GetVar("enableMouseScroll"):SetInt(0)
				else
					component:GetVar("enableMouseScroll"):SetInt(1)
				end
			</event>
			<event name="setScrollOffsetToMarker" params="component, element">
				component:setScrollOffset(element:parent():GetElement("ScrollMarker")("scrollOffset"):GetFloat())
			</event>
		</swipeComponent>
		<touchComponent name="Touch">
			<size dependentOnElement="element:name()" dependentOnComponent="Sprite" />
			<position relativeTo="element:name()" vAnchor="VCENTER" hAnchor="HCENTER" />
			<orientation vAnchor="VCENTER" hAnchor="HCENTER" xOffset="0" yOffset="0" priorityOffset="0" />
		</touchComponent>		
	</element>
	
</menu>
