<?xml version="1.0" encoding="utf-8"?>
<menu xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="menu.xsd">
	
	<event name="onPostInit" params="element">   
		<![CDATA[
		element("transitionTime"):SetFloat(0.0)
		element("transitionState"):SetInt(1)

		local uniqueMonsterId = game.selectedMonsterId()
		local isTeleportable = game.isTeleportableMonster(uniqueMonsterId)
		local isEthereal = isTeleportable and game.isEtherealMonster(uniqueMonsterId)
		local isSeasonal = isTeleportable and game.isTeleportableToSeasonal(uniqueMonsterId)
		local isMythic = isTeleportable and game.isTeleportableToMythical(uniqueMonsterId)
		
		local isShuga = isTeleportable and (not isEthereal) and (not isSeasonal) and (not isMythic) 

		local buttonsVisible = 0

		--if can eventually send to ethereal:
		if isEthereal and not game.isEtherealIsland() then

			-- change the overlay icon
			local id = game.etherealIslandId();
			if(game.isTeleportableToMagicalEthereal(uniqueMonsterId)) then
				id = game.magicalEtherealIslandId()
			end
			
			element["TeleportHomeIslandButton"]["Overlay"]("spriteName"):SetString(game.islandIconSpriteForId(id))
			element["TeleportHomeIslandButton"]["Overlay"]("sheetName"):SetString("xml_resources/"..game.islandIconSheetForId(id))
			--element["TeleportHomeIslandButton"]["Text"]("text"):SetString("TELEPORT_ETHEREAL_ISLAND")
			element["TeleportHomeIslandButton"]["Text"]("text"):SetString(game.islandName(id))

			buttonsVisible = buttonsVisible + 1
			
			local neededLevel = game.goldMonsterLevel()
			--if not high enough level to go to ethereal, then grey out this button
			if ( game.monsterLevel(uniqueMonsterId) < neededLevel ) then
				element["TeleportHomeIslandButton"]:DoStoredScript("setLocked")
				
				local unlockText = game.getLocalizedText("UNLOCKED_AT_LEVEL")
				unlockText = select(1, unlockText:gsub("XXX", neededLevel))
				element["TeleportHomeIslandButton"]["LockedText"]("text"):SetString(unlockText)
			end

		--if can eventually send to shugabush island:
		elseif isShuga and not game.isLegendaryShuggaIsland() then

			
			-- change the overlay icon
			
			local id = game.shugaIslandId();
			element["TeleportHomeIslandButton"]["Overlay"]("spriteName"):SetString(game.islandIconSpriteForId(id))
			element["TeleportHomeIslandButton"]["Overlay"]("sheetName"):SetString("xml_resources/"..game.islandIconSheetForId(id))
			--element["TeleportHomeIslandButton"]["Text"]("text"):SetString("TELEPORT_SHUGA_ISLAND")
			element["TeleportHomeIslandButton"]["Text"]("text"):SetString(game.islandName(id))
			
			buttonsVisible = buttonsVisible + 1

			local neededLevel = game.goldMonsterLevel()
			--if not high enough level to go to shugabush, then grey out this button
			if ( game.monsterLevel(uniqueMonsterId) < neededLevel ) then
			
				element["TeleportHomeIslandButton"]:DoStoredScript("setLocked")
				local unlockText = game.getLocalizedText("UNLOCKED_AT_LEVEL")
				unlockText = select(1, unlockText:gsub("XXX", neededLevel))
				element["TeleportHomeIslandButton"]["LockedText"]("text"):SetString(unlockText)
				
			elseif ( not game.isIslandOwned(game.islandLockIsland(id)) ) then
			
				element["TeleportHomeIslandButton"]:DoStoredScript("setLocked")
				local requirementText = game.getLocalizedText("NOTIFICATION_REQUIRES_ITEM")
				requirementText = select(1, requirementText:gsub("XXX", game.getLocalizedText(game.islandName(game.islandLockIsland(id)))))
				element["TeleportHomeIslandButton"]["LockedText"]("text"):SetString(requirementText)

			end
			
		--if can eventually send to seasonal:
		elseif isSeasonal and not game.isSeasonalIsland() then
			
			-- change the overlay icon
			
			local id = game.seasonalIslandId()
			element["TeleportHomeIslandButton"]["Overlay"]("spriteName"):SetString(game.islandIconSpriteForId(id))
			element["TeleportHomeIslandButton"]["Overlay"]("sheetName"):SetString("xml_resources/"..game.islandIconSheetForId(id))
			element["TeleportHomeIslandButton"]["Text"]("text"):SetString(game.islandName(id))
			
			buttonsVisible = buttonsVisible + 1

			local neededLevel = game.goldMonsterLevel()
			--if not high enough level to go to shugabush, then grey out this button
			if ( game.monsterLevel(uniqueMonsterId) < neededLevel ) then
			
				element["TeleportHomeIslandButton"]:DoStoredScript("setLocked")
				local unlockText = game.getLocalizedText("UNLOCKED_AT_LEVEL")
				unlockText = select(1, unlockText:gsub("XXX", neededLevel))
				element["TeleportHomeIslandButton"]["LockedText"]("text"):SetString(unlockText)
				
			elseif ( not game.isIslandOwned(game.islandLockIsland(id)) ) then
			
				element["TeleportHomeIslandButton"]:DoStoredScript("setLocked")
				local requirementText = game.getLocalizedText("NOTIFICATION_REQUIRES_ITEM")
				requirementText = select(1, requirementText:gsub("XXX", game.getLocalizedText(game.islandName(game.islandLockIsland(id)))))
				element["TeleportHomeIslandButton"]["LockedText"]("text"):SetString(requirementText)

			end
		--if can eventually send to mythical:
		elseif isMythic and not game.isMythicalIsland() then
			
			-- change the overlay icon			
			local id = game.mythicalIslandId()
			element["TeleportHomeIslandButton"]["Overlay"]("spriteName"):SetString(game.islandIconSpriteForId(id))
			element["TeleportHomeIslandButton"]["Overlay"]("sheetName"):SetString("xml_resources/"..game.islandIconSheetForId(id))
			element["TeleportHomeIslandButton"]["Text"]("text"):SetString(game.islandName(id))
			
			buttonsVisible = buttonsVisible + 1

			local neededLevel = game.goldMonsterLevel()
			--if not high enough level to go to shugabush, then grey out this button
			if ( game.monsterLevel(uniqueMonsterId) < neededLevel ) then
			
				element["TeleportHomeIslandButton"]:DoStoredScript("setLocked")
				local unlockText = game.getLocalizedText("UNLOCKED_AT_LEVEL")
				unlockText = select(1, unlockText:gsub("XXX", neededLevel))
				element["TeleportHomeIslandButton"]["LockedText"]("text"):SetString(unlockText)
				
			elseif ( not game.isIslandOwned(game.islandLockIsland(id)) ) then
			
				element["TeleportHomeIslandButton"]:DoStoredScript("setLocked")
				local requirementText = game.getLocalizedText("NOTIFICATION_REQUIRES_ITEM")
				requirementText = select(1, requirementText:gsub("XXX", game.getLocalizedText(game.islandName(game.islandLockIsland(id)))))
				element["TeleportHomeIslandButton"]["LockedText"]("text"):SetString(requirementText)

			end
				
		else
			-- hide teleport home button
			element["TeleportHomeIslandButton"]:DoStoredScript("setInvisible")
		end
    
		-- check if we can send to battle island
		
		local canSendToBattleIsland = game.canEventuallySendToBattleIsland(uniqueMonsterId)
		if not canSendToBattleIsland then
			element["TeleportBattleIslandButton"]:DoStoredScript("setInvisible")
		else
			buttonsVisible = buttonsVisible + 1
			local neededLevel = game.battleMonsterLevel()
			if(game.monsterLevel(uniqueMonsterId) < neededLevel) then
				element["TeleportBattleIslandButton"]:DoStoredScript("setLocked")
				local unlockText = game.getLocalizedText("UNLOCKED_AT_LEVEL")
				unlockText = select(1, unlockText:gsub("XXX", neededLevel))
				element["TeleportBattleIslandButton"]["LockedText"]("text"):SetString(unlockText)
			end
		end
		
		if(buttonsVisible == 1) then
			local yOffset = 75*(lua_sys.screenHeight()/320.0)
			element:GetElement("TeleportBattleIslandButton"):setOrientationPosition(Vector2(0, yOffset))
			element:GetElement("TeleportHomeIslandButton"):setOrientationPosition(Vector2(0, yOffset))
		end
		
		]]>
  </event>
	
	<event name="onTick" params="element, dt">
		<![CDATA[
			if(dt < game.maxTickTime()) then
				local transitionState = element("transitionState"):GetInt()
				
				if(transitionState ~= 0) then
					local transitionTime = element("transitionTime"):GetFloat()
					
					element:DoStoredScript("TickTransition")
					
					if(transitionState == 1) then
						transitionTime = (transitionTime + dt*3)
					elseif(transitionState == 2) then
						transitionTime = (transitionTime - dt*3)
					end
					
					transitionTime = clamp(transitionTime, 0.0, 1.0)
					element("transitionTime"):SetFloat(transitionTime)
					
					if(transitionTime >= 1.0) then
						element("transitionState"):SetInt(0)
						element("transitionTime"):SetFloat(1.0)
						element:DoStoredScript("TickTransition")
					elseif(transitionTime <= 0.0) then
						element:root():popPopUp()
					end
				end
			end
		]]>
	</event>
	
	<event name="TickTransition" params="element">
		local transitionTime = element("transitionTime"):GetFloat()
		local frame = element:GetElement("bg")
		frame("xOffset"):SetFloat(lua_sys.screenWidth()*(0.5) + (-0.5)*lua_sys.screenWidth()*(1/transitionTime))
		element["FadedBG"]["Sprite"]("alpha"):SetFloat(transitionTime*0.5)
	</event>
	
	<event name="queuePop" params="element">
		element("transitionState"):SetInt(2)
	</event>
	
	<element name="FadedBG">
		<size dependentOnElement="element:name()" dependentOnComponent="Sprite" />
		<position relativeTo="SCREEN" vAnchor="VCENTER" hAnchor="HCENTER" />
		<orientation vAnchor="VCENTER" hAnchor="HCENTER" xOffset="0" yOffset="0" priorityOffset="7" />
		<spriteComponent name="Sprite">
			<event name="onInit" params="component, element">
				component("spriteName"):SetString("__BUILTIN__WHITE_TEXTURE")
				component:setScale(Vector2(lua_sys.screenWidth()*0.25, lua_sys.screenHeight()*0.25))
				component:setColor(0.0, 0.0, 0.0)
				component("alpha"):SetFloat(0.0)
				component("layer"):SetString("MidPopUps")
			</event>
		</spriteComponent>
		<touchComponent name="Touch">
			<size dependentOnElement="element:name()" />
			<position relativeTo="element:name()" vAnchor="VCENTER" hAnchor="HCENTER" />
			<orientation vAnchor="VCENTER" hAnchor="HCENTER" xOffset="0" yOffset="0" priorityOffset="0" />
		</touchComponent>
	</element>
	
	<element name="bg">
		<size dependentOnElement="element:name()" dependentOnComponent="Sprite" />
		<position relativeTo="PARENT" vAnchor="VCENTER" hAnchor="HCENTER" />
		<orientation vAnchor="VCENTER" hAnchor="HCENTER" xOffset="-lua_sys.screenWidth()" yOffset="-10" priorityOffset="6" />
		<ninesliceComponent name="Sprite">
			<size w="400*(lua_sys.screenWidth()/480.0)" h="225*(lua_sys.screenHeight()/320.0)" />
			<event name="onInit" params="component, element">
				component("topHeight"):SetFloat(50.0)
				component("bottomHeight"):SetFloat(50.0)
				component("leftWidth"):SetFloat(50.0)
				component("rightWidth"):SetFloat(50.0)
				component("includeBorder"):SetInt(1)
				component("size"):SetFloat(0.5)
				component("spriteName"):SetString("gfx/menu/Black9SFrame50")
				component("layer"):SetString("MidPopUps")
			</event>
		</ninesliceComponent>
	</element>
	
	<element name="Notification">
		<size dependentOnElement="element:name()" dependentOnComponent="Text" />
		<position relativeTo="bg" vAnchor="TOP" hAnchor="HCENTER" />
		<orientation vAnchor="TOP" hAnchor="HCENTER" xOffset="0" yOffset="20*game.menuScaleX()" priorityOffset="-2" />
		<textComponent name="Text">
			<size w="380*(lua_sys.screenWidth()/480.0)" h="50*(lua_sys.screenHeight()/320.0)" />
			<position relativeTo="element" vAnchor="VCENTER" hAnchor="HCENTER" />
			<orientation vAnchor="VCENTER" hAnchor="HCENTER" xOffset="0" yOffset="0" priorityOffset="0" />
			<event name="onInit" params="component, element">
				component("multiline"):SetInt(1)
				component("font"):Set(game.getTextFont())
				component("size"):SetFloat(0.27*game.menuScaleX())
				component("alignment"):SetInt(lua_sys.MenuTextComponent_TEXT_HCENTER_ALIGNED)
				if(game.shouldShowTeleportTutorial() == false) then
					component("text"):SetString(game.getLocalizedText("TELEPORT_DESCRIPTION"))
				else
					component("text"):SetString(game.getLocalizedText("BATT_TUT_TELEPORT_MENU_MSG"))
					game.setSawTeleportTutorial();
				end
				component("autoScale"):SetInt(1)
				component("layer"):SetString("MidPopUps")
			</event>
		</textComponent>
	</element>
	
	<template type="template_teleportIslandEntry" name="TeleportBattleIslandButton">
		<templateVar name="$text" equals="game.islandName(game.battleIslandId())" />
		<templateVar name="$sheetName" equals="'xml_resources/'..game.islandIconSheetForId(game.battleIslandId())" />
		<templateVar name="$upSpriteName" equals="game.islandIconSpriteForId(game.battleIslandId())" />
		<position relativeTo="bg" vAnchor="TOP" hAnchor="HCENTER" />
		<orientation vAnchor="TOP" hAnchor="HCENTER" xOffset="-90*(lua_sys.screenWidth()/480.0)" yOffset="75*(lua_sys.screenHeight()/320.0)" priorityOffset="-1" />
		<event name="teleport" params="element">
			<![CDATA[
				local uniqueMonsterId = game.selectedMonsterId();
				if(game.monsterLevel(uniqueMonsterId) >= game.battleMonsterLevel()) then
					element["Overlay"]:setColor(1.0, 1.0, 1.0)
					element:root():popPopUp()
					game.sendToBattleIsland(game.selectedMonsterId())
				else
				
					local unlockText = game.getLocalizedText("UNLOCKED_AT_LEVEL")
					unlockText = select(1, unlockText:gsub("XXX", game.battleMonsterLevel()))
					game.displayNotification(unlockText)
				end
			]]>
		</event>
	</template>

	<template type="template_teleportIslandEntry" name="TeleportHomeIslandButton">
		<templateVar name="$text" equals="game.islandName(game.etherealIslandId())" />
		<position relativeTo="bg" vAnchor="TOP" hAnchor="HCENTER" />
		<orientation vAnchor="TOP" hAnchor="HCENTER" xOffset="90*(lua_sys.screenWidth()/480.0)" yOffset="75*(lua_sys.screenHeight()/320.0)" priorityOffset="-1" />
			<event name="teleport" params="element">
				<![CDATA[
					local uniqueMonsterId = game.selectedMonsterId();
				
					local isTeleportable = game.isTeleportableMonster(uniqueMonsterId)
					local isEthereal = isTeleportable and game.isEtherealMonster(uniqueMonsterId)
					local isShuga = isTeleportable and (not isEthereal)
				
					if isEthereal then
						if(game.monsterLevel(uniqueMonsterId) >= game.goldMonsterLevel()) then
							element["Overlay"]:setColor(1.0, 1.0, 1.0)
							element:root():popPopUp()
							game.sendToHomeIsland(uniqueMonsterId)
						else
							game.displayNotification("TELEPORT_MONSTER_LEVEL_NOTIFICATION")
						end
					elseif isShuga then
						if(not game.isIslandOwned(3)) then
							game.displayNotification("SHUGA_ISLAND_LOCKED_MESSAGE")
						elseif(game.monsterLevel(uniqueMonsterId) >= game.goldMonsterLevel() ) then
							element["Overlay"]:setColor(1.0, 1.0, 1.0)
							element:root():popPopUp()
							game.sendToHomeIsland(uniqueMonsterId)
						else
							game.displayNotification("TELEPORT_MONSTER_LEVEL_NOTIFICATION")
						end
					elseif isTeleportable then
						element["Overlay"]:setColor(1.0, 1.0, 1.0)
						element:root():popPopUp()
						game.sendToHomeIsland(uniqueMonsterId)
					end
				]]>
			</event>
	</template>
	
</menu>