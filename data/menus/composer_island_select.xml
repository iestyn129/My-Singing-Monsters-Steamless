<?xml version="1.0" encoding="utf-8"?>
<menu xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="menu.xsd">

	<event name="onInit" params="element">
		element("transitionTimer"):SetFloat(0.0)
		element("transitionState"):SetInt(0)

		collectgarbage("stop")
	</event>
	
	<event name="onPostInit" params="element">
		<![CDATA[
			element("transitionState"):SetInt(1)
		]]>
	</event>

	<event name="onTick" params="element, dt">
		<![CDATA[
			if(dt < game.maxTickTime()) then
				local transitionState = element("transitionState"):GetInt()
				
				if(transitionState ~= 0) then
					if(transitionState == 1) then
						element("transitionTimer"):SetFloat(clamp(element("transitionTimer"):GetFloat() + dt, 0.0, 1.0))
					elseif(transitionState == 2) then
						element("transitionTimer"):SetFloat(clamp(element("transitionTimer"):GetFloat() - dt, 0.0, 1.0))
					end
				
					element:GetElement("FadedBG"):DoStoredScript("TickTransition")
					element:GetElement("InfoFrame"):DoStoredScript("TickTransition")
					
					local topSprite = element:GetElement("FadeSprite")
					local botSprite = element:GetElement("BotFadeSprite")
					game.setClipping("Clipping", topSprite:absX()*lua_sys.deviceScaleX(), topSprite:absY()*lua_sys.deviceScaleX()+1, topSprite:absW()*lua_sys.deviceScaleX(), ((botSprite:absY() + botSprite:absH()) - topSprite:absY())*lua_sys.deviceScaleY())
					
					collectgarbage("step", 20)
				end
			end
		]]>
	</event>
	
	<event name="queuePop" params="element">
		manager:hideContextBar()
		element("transitionState"):SetInt(2)
	</event>

	<element name="FadedBG">
		<size dependentOnElement="element:name()" dependentOnComponent="Sprite" />
		<position relativeTo="PARENT" vAnchor="VCENTER" hAnchor="HCENTER" />
		<orientation vAnchor="VCENTER" hAnchor="HCENTER" xOffset="0" yOffset="0" priorityOffset="10" />		
		<spriteComponent name="Sprite">
			<event name="onInit" params="component, element">
				component("spriteName"):SetString("__BUILTIN__WHITE_TEXTURE")
				component:setScale(Vector2(lua_sys.screenWidth()*0.25, lua_sys.screenHeight()*0.25))
				component:setColor(0.0, 0.0, 0.0)
				component("alpha"):SetFloat(0.0)
				component("layer"):SetString("MidPopUps")
			</event>
		</spriteComponent>
		<touchComponent name="Touch">
			<size dependentOnElement="element:name()" />
			<position relativeTo="element:name()" vAnchor="VCENTER" hAnchor="HCENTER" />
			<orientation vAnchor="VCENTER" hAnchor="HCENTER" xOffset="0" yOffset="0" priorityOffset="0" />
		</touchComponent>
		<event name="TickTransition" params="element">
			local transitionTimer = element:parent()("transitionTimer"):GetFloat()
			
			if((transitionTimer &gt; 0) and (transitionTimer &lt; 1)) then
				element["Sprite"]("alpha"):SetFloat(transitionTimer*0.65)
			else
				if(transitionTimer &lt;= 0) then
					element["Sprite"]("alpha"):SetFloat(0.0)
				else
					element["Sprite"]("alpha"):SetFloat(0.65)
				end
			end
			
			if((element["Sprite"]("alpha"):GetFloat() == 0.0) and (element:parent()("transitionState"):GetInt() == 2)) then
				menu:popPopUp()
				
				if(game.getPopUp() ~= "island_select") then
					manager:setContext("ISLAND_MAP")
				end
			end
		</event>
	</element>
	
	<element name="InfoFrame">
		<size dependentOnElement="element:name()" dependentOnComponent="Sprite" />
		<position relativeTo="PARENT" vAnchor="VCENTER" hAnchor="HCENTER" />
		<orientation vAnchor="VCENTER" hAnchor="HCENTER" xOffset="-lua_sys.screenWidth()" yOffset="-25*game.menuScaleY()" priorityOffset="8" />
		<ninesliceComponent name="Sprite">
			<size w="250*lua_sys.screenWidth()/480" h="225*lua_sys.screenHeight()/320" />
			<position relativeTo="element:name()" vAnchor="VCENTER" hAnchor="HCENTER" />
			<orientation vAnchor="VCENTER" hAnchor="HCENTER" xOffset="0" yOffset="0" priorityOffset="0" />
			<event name="onInit" params="component, element">
				component("topHeight"):SetFloat(50.0)
				component("bottomHeight"):SetFloat(50.0)
				component("leftWidth"):SetFloat(50.0)
				component("rightWidth"):SetFloat(50.0)
				component("size"):SetFloat(0.5*game.menuScaleX())
				component("includeBorder"):SetInt(1)
				component("spriteName"):SetString("gfx/menu/Black9SFrame50")
				component("layer"):SetString("MidPopUps")
			</event>
		</ninesliceComponent>
		<spriteSheetComponent name="Flourish1">
			<position relativeTo="element:name()" vAnchor="TOP" hAnchor="LEFT" />
			<orientation vAnchor="TOP" hAnchor="LEFT" xOffset="8*game.menuScaleX()" yOffset="9*game.menuScaleX()" priorityOffset="-7" />
			<event name="onInit" params="component, element">
				component("spriteName"):SetString("menu_swirl_02")
				component("sheetName"):SetString("xml_resources/hud01.xml")
				component("size"):SetFloat(0.5*game.menuScaleX())
				component("hFlip"):SetInt(1)
				component("vFlip"):SetInt(1)
				component("layer"):SetString("MidPopUps")
			</event>
		</spriteSheetComponent>
		<spriteSheetComponent name="Flourish2">
			<position relativeTo="element:name()" vAnchor="BOTTOM" hAnchor="RIGHT" />
			<orientation vAnchor="BOTTOM" hAnchor="RIGHT" xOffset="8*game.menuScaleX()" yOffset="10*game.menuScaleX()" priorityOffset="-7" />
			<event name="onInit" params="component, element">
				component("spriteName"):SetString("menu_swirl_02")
				component("sheetName"):SetString("xml_resources/hud01.xml")
				component("size"):SetFloat(0.5*game.menuScaleX())
				component("layer"):SetString("MidPopUps")
			</event>
		</spriteSheetComponent>
		<spriteSheetComponent name="Flute01">
			<position relativeTo="element:name()" vAnchor="TOP" hAnchor="LEFT" />
			<orientation vAnchor="VCENTER" hAnchor="HCENTER" xOffset="7*game.menuScaleX()" yOffset="59*game.menuScaleX()" priorityOffset="1" />
			<event name="onInit" params="component, element">
				component("spriteName"):SetString("menu_flute")
				component("sheetName"):SetString("xml_resources/hud01.xml")
				component("size"):SetFloat(0.4*game.menuScaleX())
				component("rotation"):SetFloat(-0.6)
				component("layer"):SetString("MidPopUps")
			</event>
		</spriteSheetComponent>
		<spriteSheetComponent name="Flute01Leaves">
			<position relativeTo="element:name()" vAnchor="TOP" hAnchor="LEFT" />
			<orientation vAnchor="VCENTER" hAnchor="HCENTER" xOffset="0" yOffset="59*game.menuScaleX()" priorityOffset="-1" />
			<event name="onInit" params="component, element">
				component("spriteName"):SetString("menu_leaves")
				component("sheetName"):SetString("xml_resources/hud01.xml")
				component("size"):SetFloat(0.5*game.menuScaleX())
				component("layer"):SetString("MidPopUps")
			</event>
		</spriteSheetComponent>
		<spriteSheetComponent name="Flute02">
			<position relativeTo="element:name()" vAnchor="TOP" hAnchor="LEFT" />
			<orientation vAnchor="VCENTER" hAnchor="HCENTER" xOffset="2*game.menuScaleX()" yOffset="70*game.menuScaleX()" priorityOffset="1" />
			<event name="onInit" params="component, element">
				component("spriteName"):SetString("menu_flute")
				component("sheetName"):SetString("xml_resources/hud01.xml")
				component("size"):SetFloat(0.4*game.menuScaleX())
				component("rotation"):SetFloat(-1.2)
				component("layer"):SetString("MidPopUps")
			</event>
		</spriteSheetComponent>
		<spriteSheetComponent name="Flute02Leaves">
			<position relativeTo="element:name()" vAnchor="TOP" hAnchor="LEFT" />
			<orientation vAnchor="VCENTER" hAnchor="HCENTER" xOffset="0" yOffset="90*game.menuScaleX()" priorityOffset="1" />
			<event name="onInit" params="component, element">
				component("spriteName"):SetString("menu_leaves")
				component("sheetName"):SetString("xml_resources/hud01.xml")
				component("size"):SetFloat(0.5*game.menuScaleX())
				component("layer"):SetString("MidPopUps")
				component("rotation"):SetFloat(-0.2);
			</event>
		</spriteSheetComponent>
		<spriteSheetComponent name="Flute03">
			<position relativeTo="element:name()" vAnchor="VCENTER" hAnchor="RIGHT" />
			<orientation vAnchor="VCENTER" hAnchor="HCENTER" xOffset="0" yOffset="0" priorityOffset="1" />
			<event name="onInit" params="component, element">
				component("spriteName"):SetString("menu_flute")
				component("sheetName"):SetString("xml_resources/hud01.xml")
				if(component("isSourceRotated"):GetInt() == 1) then
					component("hFlip"):SetInt(1)
				else
					component("vFlip"):SetInt(1)
				end
				component("size"):SetFloat(0.4*game.menuScaleX())
				component("rotation"):SetFloat(-2.55)
				component("layer"):SetString("MidPopUps")
			</event>
		</spriteSheetComponent>
		<element name="RightLeaves">
			<size dependentOnElement="element:name()" dependentOnComponent="Sprite" />
			<position relativeTo="InfoFrame" vAnchor="VCENTER" hAnchor="RIGHT" />
			<orientation vAnchor="VCENTER" hAnchor="RIGHT" xOffset="-15*game.menuScaleX()" yOffset="13*game.hudScale()" priorityOffset="-1" />
			<spriteSheetComponent name="Sprite">
				<event name="onInit" params="component, element">
					component("spriteName"):SetString("menu_leaves")
					component("sheetName"):SetString("xml_resources/hud01.xml")
					if(component("isSourceRotated"):GetInt() == 1) then
						component("vFlip"):SetInt(1)
					else
						component("hFlip"):SetInt(1)
					end
					component("size"):SetFloat(0.5*game.menuScaleX())
					component("layer"):SetString("MidPopUps")
				</event>
			</spriteSheetComponent>
		</element>
		<element name="LowerLeaves">
			<size dependentOnElement="element:name()" dependentOnComponent="Sprite" />
			<position relativeTo="InfoFrame" vAnchor="BOTTOM" hAnchor="LEFT" />
			<orientation vAnchor="BOTTOM" hAnchor="LEFT" xOffset="-13*game.hudScale()" yOffset="20*game.menuScaleY()" priorityOffset="-1" />
			<spriteSheetComponent name="Sprite">
				<event name="onInit" params="component, element">
					component("spriteName"):SetString("menu_leaves")
					component("sheetName"):SetString("xml_resources/hud01.xml")
					component("size"):SetFloat(0.5*game.menuScaleX())
					component("layer"):SetString("MidPopUps")
					component("rotation"):SetFloat(-0.4*math.pi);
				</event>
			</spriteSheetComponent>
		</element>
		<event name="onInit" params="element">
			element("transitionStarted"):SetInt(0)
		</event>
		<event name="TickTransition" params="element">
			local transitionTimer = element:parent()("transitionTimer"):GetFloat()

			element("xOffset"):SetInt(lua_sys.Quintic_EaseInOut(transitionTimer, -lua_sys.screenWidth(), lua_sys.screenWidth(), 1))
			
			if((transitionTimer &gt; 0.6) and (transitionTimer &lt; 0.9)) then
				if element("transitionStarted"):GetInt() == 0 then
					lua_sys.playSoundFx("audio/sfx/menu_slide.wav")
					element("transitionStarted"):SetInt(1)
				end
			end
		</event>
	</element>
	
	<element name="TitleText">
		<size dependentOnElement="element:name()" dependentOnComponent="Text" />
		<position relativeTo="InfoFrame" vAnchor="TOP" hAnchor="HCENTER" />
		<orientation vAnchor="TOP" hAnchor="HCENTER" xOffset="0" yOffset="15*lua_sys.screenHeight()/320" priorityOffset="-7" />
		<ninesliceComponent name="BlackCover">
			<size w="200*lua_sys.screenWidth()/480" h="25*lua_sys.screenHeight()/320" />
			<position relativeTo="element:name()" vAnchor="BOTTOM" hAnchor="HCENTER" />
			<orientation vAnchor="BOTTOM" hAnchor="HCENTER" xOffset="0" yOffset="0" priorityOffset="1" />
			<event name="onInit" params="component, element">
				component("topHeight"):SetFloat(1.0)
				component("bottomHeight"):SetFloat(1.0)
				component("leftWidth"):SetFloat(1.0)
				component("rightWidth"):SetFloat(1.0)
				component("size"):SetFloat(0.5*lua_sys.screenHeight()/320)
				component("includeBorder"):SetInt(0)
				component("spriteName"):SetString("__BUILTIN__WHITE_TEXTURE")
				component:setColor(0.0, 0.0, 0.0)
				component("layer"):SetString("MidPopUps")
			</event>
		</ninesliceComponent>
		<textComponent name="Text">
			<size w="148*lua_sys.screenWidth()/480" h="40*lua_sys.screenHeight()/320" />
			<position relativeTo="element:name()" vAnchor="VCENTER" hAnchor="HCENTER" />
			<orientation vAnchor="VCENTER" hAnchor="HCENTER" xOffset="0" yOffset="0" priorityOffset="0" />
			<event name="onInit" params="component, element">
				component("multiline"):SetInt(0)
				component("font"):Set(game.getTextFont())
				component("alignment"):SetInt(lua_sys.MenuTextComponent_TEXT_HCENTER_ALIGNED)
				component("text"):SetString("ISLAND_SELECT")
				component:setColor(0.43, 0.98, 0.02)
				component("size"):SetFloat(1*lua_sys.screenHeight()/320)
				component("autoScale"):SetInt(1)
				component("autoScaleFactor"):SetFloat(0.1)
				component("layer"):SetString("MidPopUps")
			</event>
		</textComponent>
	</element>
	
	<element name="FadeSprite">
		<size dependentOnElement="element:name()" dependentOnComponent="Sprite" />
		<position relativeTo="TitleText" component="BlackCover" vAnchor="BOTTOM" hAnchor="HCENTER" />
		<orientation vAnchor="TOP" hAnchor="HCENTER" xOffset="0" yOffset="0" priorityOffset="1" />
		<spriteComponent name="Sprite">
			<event name="onInit" params="component, element">
				component("spriteName"):SetString("gfx/fade_sprite")
				component:setScale(Vector2(14*lua_sys.screenWidth()/480, 0.5*lua_sys.screenHeight()/320))
				component("layer"):SetString("Clipping")
			</event>
		</spriteComponent>
	</element>
	
	<touchComponent name="TouchBlockerTop">
		<size w="lua_sys.screenWidth()" h="lua_sys.screenHeight()/2" />
		<position relativeTo="SCREEN" vAnchor="TOP" hAnchor="LEFT" />
		<orientation vAnchor="TOP" hAnchor="LEFT" xOffset="0" yOffset="0" priorityOffset="0" />
	</touchComponent>
	
	<element name="BotFadeSprite">
		<size dependentOnElement="element:name()" dependentOnComponent="Sprite" />
		<position relativeTo="InfoFrame" vAnchor="BOTTOM" hAnchor="HCENTER" />
		<orientation vAnchor="BOTTOM" hAnchor="HCENTER" xOffset="-8*lua_sys.screenWidth()/480" yOffset="10*lua_sys.screenHeight()/320" priorityOffset="-5" />
		<spriteComponent name="Sprite">
			<event name="onInit" params="component, element">
				component("spriteName"):SetString("gfx/fade_sprite")
				component:setScale(Vector2(12.0*lua_sys.screenWidth()/480, 0.5*lua_sys.screenHeight()/320))
				component("vFlip"):SetInt(1)
				component("layer"):SetString("Clipping")
			</event>
		</spriteComponent>
	</element>
	
	<touchComponent name="TouchBlockerBottom">
		<size w="lua_sys.screenWidth()*0.75" h="lua_sys.screenHeight()/2" />
		<position relativeTo="SCREEN" vAnchor="TOP" hAnchor="LEFT" />
		<orientation vAnchor="TOP" hAnchor="LEFT" xOffset="0" yOffset="0" priorityOffset="3" />
	</touchComponent>

	<element name="InfoContent">
		<size w="235*game.menuScaleX()" h="(215*game.menuScaleY())-50" />
		<position relativeTo="FadeSprite" vAnchor="TOP" hAnchor="HCENTER" />
		<orientation vAnchor="TOP" hAnchor="HCENTER" xOffset="0" yOffset="5*game.menuScaleY()" priorityOffset="4" />
		<event name="onInit" params="element">
			<![CDATA[
			local islands = game.getComposerIslands()
			local previous = nil
			local width = 0
			local height = 0
			
			--one extra for the buying of the next one:
			local numEntries
			if(game.hasAllComposerIslands()) then
				numEntries = islands:size()-1
			else
				numEntries = islands:size()
			end
			
			element("nextComposerIslandId"):SetInt(game.nextComposerIslandId())
			
			for i=0, numEntries do
				local islandEntry = menu:addTemplateElement("template_composerIsleEntry", "composerIslandEntry"..i, element)
				
				local islandID = -1
				if(i < islands:size()) then
					islandID = islands[i]
				end
				islandEntry("islandUid"):SetInt(islandID)
				if(islandID ~= -1) then
					islandEntry("songName"):SetString(game.islandSongName(islandID))
				end
				islandEntry:setParent(element)
				if(previous == nil) then
					
					islandEntry:relativeTo(element)
					islandEntry:setOrientation(lua_sys.MenuOrientation(0, 0, 0, lua_sys.LEFT, lua_sys.TOP))
					islandEntry:setRelativeObjectAnchors(lua_sys.LEFT, lua_sys.TOP)

					width = islandEntry:absW()
				else
					islandEntry:relativeTo(previous)
					islandEntry:setOrientation(lua_sys.MenuOrientation(0, 0, 0, lua_sys.HCENTER, lua_sys.TOP))
					islandEntry:setRelativeObjectAnchors(lua_sys.HCENTER, lua_sys.BOTTOM)
				end
				previous = islandEntry
				islandEntry:init()
				islandEntry:setPositionBroadcast(true)
				height = height + islandEntry:absH();
			end
			
			element("contentHeight"):SetInt(height)
			element:setSize(Vector2(width, height))
			element:setPositionBroadcast(true)
			]]>
		</event>
		
		<swipeComponent name="Swiper">
			<event name="onPostInit" params="component, element">
				element:parent():setPositionBroadcast(true)
				
				component:DoStoredScript("refresh")
				
				local fadeSprite = element:parent():GetElement("FadeSprite");

				--put this here because FadeSprite absY isn't in its final position until after setPositionBroadcast
				element:parent():GetComponent("TouchBlockerTop"):setOrientation(lua_sys.MenuOrientation(0, -(fadeSprite:absY() + fadeSprite:absH()/2), 0, lua_sys.LEFT, lua_sys.BOTTOM))
				element:parent():GetComponent("TouchBlockerTop"):setRelativeObjectAnchors(lua_sys.LEFT, lua_sys.TOP)
				
				local botFadeSprite = element:parent():GetElement("BotFadeSprite");
				
				element:parent():GetComponent("TouchBlockerBottom"):setOrientation(lua_sys.MenuOrientation(0, (botFadeSprite:absY() + botFadeSprite:absH()/2), 3, lua_sys.LEFT, lua_sys.TOP))
				element:parent():GetComponent("TouchBlockerBottom"):setRelativeObjectAnchors(lua_sys.LEFT, lua_sys.TOP)
			</event>
			<function name="refresh" params="component, element">
			
				component("direction"):SetInt(lua_sys.MenuSwipeComponent_SwipeDirectionVertical)
				component("mode"):SetInt(lua_sys.MenuSwipeComponent_SwipeModeFree)
				component("tSteps"):SetFloat(25.0)
				component:listenToTouches(element)
				
				local itemHeight = element("contentHeight"):GetInt()
				local containerHeight = element:parent():GetElement("BotFadeSprite"):absY() - (element:parent():GetElement("FadeSprite"):absY() + element:parent():GetElement("FadeSprite"):absH())
				if(itemHeight &gt; containerHeight) then
					component:setScrollSize(itemHeight - containerHeight)
				else
					component:setScrollSize(0)
					
					element:parent()["ScrollBar"]["Sprite"]("visible"):SetInt(0)
					element:parent()["ScrollMarker"]["Marker"]("visible"):SetInt(0)
				end
				element("scrollSize"):SetFloat(component:scrollSize())
			</function>
			<event name="onTick" params="component, element, dt">
			
				local swipeAnchor = element:GetElement("composerIslandEntry0")
				if(swipeAnchor) then
				
					local scrollOffset = component:scrollOffset()
					if(swipeAnchor:getOrientationPosition().y ~= scrollOffset) then
					
						swipeAnchor:setOrientationPosition(Vector2(swipeAnchor("xOffset"):GetInt(), scrollOffset))
						
						local scrollBar = element:parent():GetElement("ScrollBar")
						local scrollMarker = element:parent():GetElement("ScrollMarker")
						local markerBookend = scrollMarker("originalYOffset"):GetInt()
						
						--range without borders is [0, (scrollbarH-scrollMarkerH)]
						local markerMovementHeight = element:parent():GetElement("ScrollBar"):absH() - (2*markerBookend) - scrollMarker:absH();

						local scrollMarkerYOffset = -(scrollOffset/component:scrollSize()) * markerMovementHeight;
						
						scrollMarkerYOffset = clamp(scrollMarkerYOffset, 0, markerMovementHeight)
						
						scrollMarker("yOffset"):SetInt(markerBookend + scrollMarkerYOffset)
					end
				end
			</event>
			<event name="setScrollOffsetToMarker" params="component, element">
				component:setScrollOffset(element:parent():GetElement("ScrollMarker")("scrollOffset"):GetFloat())
			</event>
		</swipeComponent>
		<touchComponent name="Touch">
			<size dependentOnElement="element:parent():GetElement(&quot;InfoFrame&quot;)" dependentOnComponent="Sprite" />
			<position relativeTo="PARENT" vAnchor="VCENTER" hAnchor="HCENTER" />
			<orientation vAnchor="VCENTER" hAnchor="HCENTER" xOffset="0" yOffset="0" priorityOffset="0" />
			<event name="onInit" params="component, element">
				component("singleTouch"):SetInt(1)
			</event>
		</touchComponent>
	</element>
	
	<element name="ScrollBar">
		<size dependentOnElement="element:name()" dependentOnComponent="Sprite" />
		<position relativeTo="InfoFrame" vAnchor="VCENTER" hAnchor="RIGHT" />
		<orientation vAnchor="VCENTER" hAnchor="RIGHT" xOffset="20*lua_sys.screenHeight()/320" yOffset="0" priorityOffset="-1" />
		<spriteSheetComponent name="Sprite">
			<event name="onInit" params="component, element">
				component("spriteName"):SetString("scroll_bar_01")
				component("sheetName"):SetString("xml_resources/buttons01.xml")
				component("size"):SetFloat(0.4*lua_sys.screenHeight()/320)
				component("layer"):SetString("MidPopUps")
			</event>
		</spriteSheetComponent>
	</element>
	
	<element name="ScrollMarker">
		<size dependentOnElement="element:name()" dependentOnComponent="Marker" />
		<position relativeTo="ScrollBar" vAnchor="TOP" hAnchor="HCENTER" />
		<orientation vAnchor="TOP" hAnchor="HCENTER" xOffset="0" yOffset="6*lua_sys.screenHeight()/320" priorityOffset="-1" />
		<spriteSheetComponent name="Marker">
			<event name="onInit" params="component, element">
				component("useOffsets"):SetInt(1)
				component("spriteName"):SetString("scroll_bar_dot")
				component("sheetName"):SetString("xml_resources/buttons01.xml")
				component("size"):SetFloat(0.4*lua_sys.screenHeight()/320)
				component("layer"):SetString("MidPopUps")
				element("originalYOffset"):SetInt(element("yOffset"):GetInt())
			</event>
		</spriteSheetComponent>
		<touchComponent name="Touch">
			<size dependentOnElement="element:name()" dependentOnComponent="Marker" />
			<position relativeTo="PARENT" vAnchor="TOP" hAnchor="LEFT" />
			<orientation vAnchor="TOP" hAnchor="LEFT" xOffset="0" yOffset="0" priorityOffset="0" />
			<event name="onTouchDrag" params="component, element, x, y">
			
				local scrollBar = element:parent():GetElement("ScrollBar")
				local fromTopOfMarkerRange = y - scrollBar:absY() - element("originalYOffset"):GetInt();
				
				local markerBookend = element("originalYOffset"):GetInt()
				
				local scrollSize = 0;
				if(element:parent():GetElement("InfoContent")("scrollSize") ~= nil) then
					scrollSize = element:parent():GetElement("InfoContent")("scrollSize"):GetFloat();
				end
				
				local scrollOffset = (-(fromTopOfMarkerRange - markerBookend)/(scrollBar:absH() - 2*markerBookend - element:absH()))*scrollSize;
				scrollOffset = clamp(scrollOffset, -scrollSize, 0)
				
				element("scrollOffset"):SetFloat(scrollOffset);
				element:parent():GetElement("InfoContent")["Swiper"]:DoStoredScript("setScrollOffsetToMarker");
			</event>
		</touchComponent>
	</element>
	
	<template type="template_spritesheetbutton" name="BackButton">
		<templateVar name="$layer" equals="MidPopUps" />
		<templateVar name="$spriteScale" equals="0.5*game.hudScale()" />
		<templateVar name="$buttonMapping" equals="game.cancelButton()" />
		<position relativeTo="SAFE_AREA" vAnchor="BOTTOM" hAnchor="RIGHT" />
		<orientation vAnchor="BOTTOM" hAnchor="RIGHT" xOffset="10*game.hudScale()" yOffset="10*game.hudScale()" priorityOffset="5" />
		<touchComponent name="Touch">
			<event name="onTouchDown" params="component, element">
				onTouchDown(component, element)
				element["Overlay"]:setColor(0.5, 0.5, 0.5)
			</event>
			<event name="onTouchUp" params="component, element">
				onTouchUp(component, element)
				element["Overlay"]:setColor(1.0, 1.0, 1.0)
				
				element:parent():DoStoredScript("queuePop")
			</event>
			<event name="onTouchRelease" params="component, element">
				onTouchRelease(component, element)
				element["Overlay"]:setColor(1.0, 1.0, 1.0)
			</event>
		</touchComponent>
		<spriteSheetComponent name="Overlay">
			<position relativeTo="element:name()" vAnchor="VCENTER" hAnchor="HCENTER" />
			<orientation vAnchor="VCENTER" hAnchor="HCENTER" xOffset="0" yOffset="0" priorityOffset="-1" />
			<event name="onInit" params="component, element">
				component("spriteName"):SetString("button_back")
				component("sheetName"):SetString("xml_resources/context_buttons.xml")
				component("size"):SetFloat(0.5*game.hudScale())
				component("layer"):SetString("MidPopUps")
			</event>
		</spriteSheetComponent>
		<textComponent name="Text">
			<position relativeTo="element:name()" vAnchor="BOTTOM" hAnchor="HCENTER" />
			<orientation vAnchor="TOP" hAnchor="HCENTER" xOffset="0" yOffset="-6*game.hudScale()" priorityOffset="-2" />
			<event name="onInit" params="component, element">
				component("multiline"):SetInt(0)
				component("font"):Set(game.getTitleFont())
				component("alignment"):SetInt(lua_sys.MenuTextComponent_TEXT_HCENTER_ALIGNED)
				component("text"):SetString("EXIT")
				component("size"):SetFloat(0.2*game.hudScale())
				component("layer"):SetString("MidPopUps")
			</event>
		</textComponent>
	</template>
</menu>