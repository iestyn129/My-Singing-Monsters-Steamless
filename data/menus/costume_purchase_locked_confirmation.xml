<menu xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="menu.xsd">

	<element name="FadedBG">
		<size dependentOnElement="element:name()" dependentOnComponent="Sprite" />
		<position relativeTo="SCREEN" vAnchor="VCENTER" hAnchor="HCENTER" />
		<orientation vAnchor="VCENTER" hAnchor="HCENTER" xOffset="0" yOffset="0" priorityOffset="3" />
		<spriteComponent name="Sprite">
			<event name="onInit" params="component, element">
				component("spriteName"):SetString("__BUILTIN__WHITE_TEXTURE")
				component:setScale(Vector2(lua_sys.screenWidth()*0.25, lua_sys.screenHeight()*0.25))
				component:setColor(0.0, 0.0, 0.0)
				component("alpha"):SetFloat(0.0)
				component("layer"):SetString("FrontPopUps")
			</event>
		</spriteComponent>
		<touchComponent name="Touch">
			<size dependentOnElement="element:name()" />
			<position relativeTo="element:name()" vAnchor="VCENTER" hAnchor="HCENTER" />
			<orientation vAnchor="VCENTER" hAnchor="HCENTER" xOffset="0" yOffset="0" priorityOffset="0" />
		</touchComponent>
	</element>

	<element name="bg">
		<size dependentOnElement="element:name()" dependentOnComponent="Sprite" />
		<position relativeTo="PARENT" vAnchor="VCENTER" hAnchor="HCENTER" />
		<orientation vAnchor="VCENTER" hAnchor="HCENTER" xOffset="-1*lua_sys.screenWidth()" yOffset="-15*game.hudScale()" priorityOffset="2" />
		<ninesliceComponent name="Sprite">
			<size w="340*game.hudScale()" h="230*game.hudScale()" />
			<event name="onInit" params="component, element">
				component("topHeight"):SetFloat(50.0)
				component("bottomHeight"):SetFloat(50.0)
				component("leftWidth"):SetFloat(50.0)
				component("rightWidth"):SetFloat(50.0)
				component("size"):SetFloat(0.5)
				component("includeBorder"):SetInt(1)
				component("spriteName"):SetString("gfx/menu/Black9SFrame50")
				component("layer"):SetString("FrontPopUps")
			</event>
		</ninesliceComponent>
		<spriteSheetComponent name="Flourish1">
			<position relativeTo="element:name()" vAnchor="TOP" hAnchor="LEFT" />
			<orientation vAnchor="TOP" hAnchor="LEFT" xOffset="7" yOffset="7" priorityOffset="-1" />
			<event name="onInit" params="component, element">
				component("spriteName"):SetString("menu_swirl_01")
				component("sheetName"):SetString("xml_resources/hud01.xml")
				component("size"):SetFloat(0.5*game.menuScaleX())
				component("layer"):SetString("FrontPopUps")
			</event>
		</spriteSheetComponent>
		<spriteSheetComponent name="Flourish2">
			<position relativeTo="element:name()" vAnchor="TOP" hAnchor="RIGHT" />
			<orientation vAnchor="TOP" hAnchor="RIGHT" xOffset="7" yOffset="10" priorityOffset="-1" />
			<event name="onInit" params="component, element">
				component("spriteName"):SetString("menu_swirl_02")
				component("sheetName"):SetString("xml_resources/hud01.xml")
				component("size"):SetFloat(0.5*game.menuScaleX())
				component("rotation"):SetFloat(-0.5*math.pi)
				component("layer"):SetString("FrontPopUps")
			</event>
		</spriteSheetComponent>
	</element>

	<element name="TitleFrame">
		<size dependentOnElement="element:name()" dependentOnComponent="Sprite" />
		<position relativeTo="bg" vAnchor="TOP" hAnchor="HCENTER" />
		<orientation vAnchor="VCENTER" hAnchor="HCENTER" xOffset="0" yOffset="0" priorityOffset="-1" />
		<ninesliceComponent name="Sprite">
			<size w="260*game.menuScaleX()" h="50" />
			<event name="onInit" params="component, element">
				component("topHeight"):SetFloat(50.0)
				component("bottomHeight"):SetFloat(50.0)
				component("leftWidth"):SetFloat(50.0)
				component("rightWidth"):SetFloat(50.0)
				component("size"):SetFloat(0.5)
				component("includeBorder"):SetInt(1)
				component("spriteName"):SetString("gfx/menu/GreyTitleFrame")
				component("layer"):SetString("FrontPopUps")
			</event>
		</ninesliceComponent>
	</element>

	<element name="TitleLabel">
		<size dependentOnElement="element:name()" dependentOnComponent="Text" />
		<position relativeTo="TitleFrame" vAnchor="VCENTER" hAnchor="HCENTER" />
		<orientation vAnchor="VCENTER" hAnchor="HCENTER" xOffset="0" yOffset="0" priorityOffset="-1" />
		<textComponent name="Text">
			<size w="240*game.menuScaleX()" h="35" />
			<position relativeTo="element:name()" vAnchor="VCENTER" hAnchor="HCENTER" />
			<orientation vAnchor="VCENTER" hAnchor="HCENTER" xOffset="0" yOffset="0" priorityOffset="0" />
			<event name="onInit" params="component, element">
				component("multiline"):SetInt(0)
				component("font"):Set(game.getTitleFont())
				component:setColor(0.24, 0.67, 0.9)
				component("size"):SetFloat(0.45*game.hudScale())
				component("alignment"):SetInt(lua_sys.MenuTextComponent_TEXT_HCENTER_ALIGNED)
				component("text"):SetString(game.localizedUpper("CONFIRM_PURCHASE"))
				component("autoScale"):SetInt(1)
				component("layer"):SetString("FrontPopUps")
			</event>
		</textComponent>
	</element>

	<element name="Description">
		<size dependentOnElement="element:name()" dependentOnComponent="Text" />
		<position relativeTo="bg" vAnchor="VCENTER" hAnchor="HCENTER" />
		<orientation vAnchor="VCENTER" hAnchor="HCENTER" xOffset="0" yOffset="-48*game.menuScaleY()" priorityOffset="-1" />
		<textComponent name="Text">
			<size w="280*game.hudScale()" h="120*game.hudScale()" />
			<position relativeTo="element:name()" vAnchor="VCENTER" hAnchor="HCENTER" />
			<orientation vAnchor="VCENTER" hAnchor="HCENTER" xOffset="0" yOffset="0" priorityOffset="0" />
			<event name="onInit" params="component, element">
				<![CDATA[
					component("multiline"):SetInt(1)
					component("font"):Set(game.getTextFont())
					component("alignment"):SetInt(lua_sys.MenuTextComponent_TEXT_HCENTER_ALIGNED)
					--component("text"):SetString("COSTUME_PURCHASE_LOCKED_DESCRIPTION")
					component("size"):SetFloat(0.3*game.menuScaleX())
					component("layer"):SetString("FrontPopUps")
					component("autoScale"):SetInt(1)
				]]>
			</event>
		</textComponent>
	</element>

	<element name="CallToAction">
		<size dependentOnElement="element:name()" dependentOnComponent="Text" />
		<position relativeTo="bg" vAnchor="VCENTER" hAnchor="HCENTER" />
		<orientation vAnchor="VCENTER" hAnchor="HCENTER" xOffset="0" yOffset="8 * game.menuScaleY()" priorityOffset="-1" />
		<textComponent name="Text">
			<size w="280*game.hudScale()" h="120*game.hudScale()" />
			<position relativeTo="element:name()" vAnchor="VCENTER" hAnchor="HCENTER" />
			<orientation vAnchor="VCENTER" hAnchor="HCENTER" xOffset="0" yOffset="0" priorityOffset="0" />
			<event name="onInit" params="component, element">
				<![CDATA[
					component("multiline"):SetInt(1)
					component("font"):Set(game.getTitleFont())
					component("alignment"):SetInt(lua_sys.MenuTextComponent_TEXT_HCENTER_ALIGNED)
					component("text"):SetString("COSTUME_PURCHASE_LOCKED_ACTION")
					component("size"):SetFloat(0.3*game.menuScaleX())
					component("layer"):SetString("FrontPopUps")
					component("autoScale"):SetInt(1)
				]]>
			</event>
		</textComponent>
	</element>

	<element name="PremiumCost">
		<size dependentOnElement="element:name()" dependentOnComponent="Text" />
		<position relativeTo="bg" vAnchor="VCENTER" hAnchor="HCENTER" />
		<orientation vAnchor="VCENTER" hAnchor="LEFT" xOffset="-100*game.menuScaleX()" yOffset="46 * game.menuScaleY()" priorityOffset="-1" />

		<spriteSheetComponent name="CurrencySprite">
			<position relativeTo="element:name()" vAnchor="VCENTER" hAnchor="LEFT" />
			<orientation vAnchor="VCENTER" hAnchor="RIGHT" xOffset="0" yOffset="0" priorityOffset="0" />
			<event name="onInit" params="component, element">
				<![CDATA[
					component("spriteName"):SetString(game.StoreContext_SPRITE_COINS)
					component("sheetName"):SetString(game.StoreContext_CURRENCY_SPRITESHEET)
					component("size"):SetFloat(0.3*game.menuScaleX())
					component("layer"):SetString("FrontPopUps")
				]]>
			</event>
		</spriteSheetComponent>

		<textComponent name="Text">
			<size w="65*game.menuScaleX()" h="50*game.menuScaleX()" />
			<position relativeTo="element:name()" vAnchor="VCENTER" hAnchor="HCENTER" />
			<orientation vAnchor="VCENTER" hAnchor="HCENTER" xOffset="0" yOffset="0" priorityOffset="0" />
			<event name="onInit" params="component, element">
				<![CDATA[
					component("multiline"):SetInt(0)
					component("autoScale"):SetInt(1)
					component("autoScaleFactor"):SetFloat(0.01)
					component("font"):Set(game.getTitleFont())
					component("size"):SetFloat(0.3*game.menuScaleX())
					component("alignment"):SetInt(MenuTextComponent_TEXT_HCENTER_ALIGNED)
					component("text"):SetString("10,000")
					component("layer"):SetString("FrontPopUps")
				]]>
			</event>
		</textComponent>

	</element>

	<element name="RegularCost">
		<size dependentOnElement="element:name()" dependentOnComponent="Text" />
		<position relativeTo="bg" vAnchor="VCENTER" hAnchor="HCENTER" />
		<orientation vAnchor="VCENTER" hAnchor="LEFT" xOffset="100*game.menuScaleX()" yOffset="46 * game.menuScaleY()" priorityOffset="-1" />

		<spriteSheetComponent name="CurrencySprite">
			<position relativeTo="element:name()" vAnchor="VCENTER" hAnchor="LEFT" />
			<orientation vAnchor="VCENTER" hAnchor="RIGHT" xOffset="0" yOffset="0" priorityOffset="0" />
			<event name="onInit" params="component, element">
				<![CDATA[
					component("spriteName"):SetString(game.StoreContext_SPRITE_COINS)
					component("sheetName"):SetString(game.StoreContext_CURRENCY_SPRITESHEET)
					component("size"):SetFloat(0.3*game.menuScaleX())
					component("layer"):SetString("FrontPopUps")
				]]>
			</event>
		</spriteSheetComponent>

		<textComponent name="Text">
			<size w="65*game.menuScaleX()" h="50*game.menuScaleX()" />
			<position relativeTo="element:name()" vAnchor="VCENTER" hAnchor="HCENTER" />
			<orientation vAnchor="VCENTER" hAnchor="HCENTER" xOffset="0" yOffset="0" priorityOffset="0" />
			<event name="onInit" params="component, element">
				<![CDATA[
					component("multiline"):SetInt(0)
					component("autoScale"):SetInt(1)
					component("autoScaleFactor"):SetFloat(0.01)
					component("font"):Set(game.getTitleFont())
					component("size"):SetFloat(0.3*game.menuScaleX())
					component("alignment"):SetInt(MenuTextComponent_TEXT_HCENTER_ALIGNED)
					component("text"):SetString("10,000")
					component("layer"):SetString("FrontPopUps")
					component:setColor(0.5, 0.5, 0.5)
				]]>
			</event>
		</textComponent>

		<element name="Strikeout">
			<size dependentOnElement="element:name()" dependentOnComponent="Sprite" />
			<position relativeTo="PARENT" vAnchor="VCENTER" hAnchor="HCENTER" />
			<orientation vAnchor="VCENTER" hAnchor="HCENTER" xOffset="0" yOffset="0*game.menuScaleY()" priorityOffset="-1" />

			<ninesliceComponent name="Sprite">
				<size w="4" h="1" />
				<position relativeTo="PARENT" vAnchor="VCENTER" hAnchor="HCENTER" />
				<orientation vAnchor="VCENTER" hAnchor="HCENTER" xOffset="0" yOffset="0" priorityOffset="0" />
				<event name="onInit" params="component, element">
					<![CDATA[
						component("includeBorder"):SetInt(1)
						component("topHeight"):SetFloat(2.0)
						component("bottomHeight"):SetFloat(2.0)
						component("leftWidth"):SetFloat(2.0)
						component("rightWidth"):SetFloat(2.0)
						component("alpha"):SetFloat(0.6)
						component("spriteName"):SetString("gfx/menu/menu_sale_redline_3slice")
						component("layer"):SetString("FrontPopUps")
						component("size"):SetFloat(0.50*game.menuScaleX())
					]]>
				</event>
				<event name="onPostInit" params="component, element">
					<![CDATA[
						component:DoStoredScript("refresh")
					]]>
				</event>
				<event name="refresh" params="component, element">
					<![CDATA[
						local width = element:parent():GetComponent("Text")("renderWidth"):GetFloat() + 4 * game.menuScaleX()
						component:setSize(Vector2(width, component:absH()))
						component:calculatePosition()
					]]>
				</event>
			</ninesliceComponent>
		</element>
	</element>

	<template type="template_spritesheetbutton" name="YesButton">
		<hudScale scale="game.hudScale()" />
		<templateVar name="$text" equals="" />
		<templateVar name="$spriteScale" equals="0.5" />
		<templateVar name="$layer" equals="FrontPopUps" />
		<templateVar name="$textYOffset" equals="35*game.hudScale()" />
		<position relativeTo="bg" vAnchor="BOTTOM" hAnchor="LEFT" />
		<orientation vAnchor="VCENTER" hAnchor="HCENTER" xOffset="60/game.hudScale()" yOffset="-10/game.hudScale()" priorityOffset="-1" />
		<touchComponent name="Touch">
			<position relativeTo="element:name()" vAnchor="VCENTER" hAnchor="HCENTER" />
			<orientation vAnchor="VCENTER" hAnchor="HCENTER" xOffset="0" yOffset="0" priorityOffset="-1" />
			<event name="onTouchDown" params="component, element">
				onTouchDown(component, element)
				element["Overlay"]:setColor(0.5, 0.5, 0.5)
			</event>
			<event name="onTouchUp" params="component, element">
				onTouchUp(component, element)
				element["Overlay"]:setColor(1.0, 1.0, 1.0)
				element:parent()("choice"):SetString("true")
				element:parent():DoStoredScript("queuePop")
			</event>
			<event name="onTouchRelease" params="component, element">
				onTouchRelease(component, element)
				element["Overlay"]:setColor(1.0, 1.0, 1.0)
			</event>
		</touchComponent>
		<spriteSheetComponent name="Overlay">
			<position relativeTo="element:name()" vAnchor="VCENTER" hAnchor="HCENTER" />
			<orientation vAnchor="VCENTER" hAnchor="HCENTER" xOffset="0" yOffset="0" priorityOffset="-1" />
			<event name="onInit" params="component, element">
				component("spriteName"):SetString("button_yes")
				component("sheetName"):SetString("xml_resources/context_buttons.xml")
				component("layer"):SetString("FrontPopUps")
				component("size"):SetFloat(0.5)
			</event>
		</spriteSheetComponent>
	</template>

	<template type="template_spritesheetbutton" name="NoButton">
		<hudScale scale="game.hudScale()" />
		<templateVar name="$text" equals="" />
		<templateVar name="$spriteScale" equals="0.5" />
		<templateVar name="$layer" equals="FrontPopUps" />
		<templateVar name="$buttonMapping" equals="game.cancelButton()" />
		<templateVar name="$textYOffset" equals="35*game.hudScale()" />
		<position relativeTo="bg" vAnchor="BOTTOM" hAnchor="RIGHT" />
		<orientation vAnchor="VCENTER" hAnchor="HCENTER" xOffset="-60/game.hudScale()" yOffset="-10/game.hudScale()" priorityOffset="-1" />
		<touchComponent name="Touch">
			<position relativeTo="element:name()" vAnchor="VCENTER" hAnchor="HCENTER" />
			<orientation vAnchor="VCENTER" hAnchor="HCENTER" xOffset="0" yOffset="0" priorityOffset="-1" />
			<event name="onTouchDown" params="component, element">
				onTouchDown(component, element)
				element["Overlay"]:setColor(0.5, 0.5, 0.5)
			</event>
			<event name="onTouchUp" params="component, element">
				onTouchUp(component, element)
				element["Overlay"]:setColor(1.0, 1.0, 1.0)

				element:parent()("choice"):SetString("false")
				element:parent():DoStoredScript("queuePop")
			</event>
			<event name="onTouchRelease" params="component, element">
				onTouchRelease(component, element)
				element["Overlay"]:setColor(1.0, 1.0, 1.0)
			</event>
		</touchComponent>
		<spriteSheetComponent name="Overlay">
			<position relativeTo="element:name()" vAnchor="VCENTER" hAnchor="HCENTER" />
			<orientation vAnchor="VCENTER" hAnchor="HCENTER" xOffset="0" yOffset="0" priorityOffset="-1" />
			<event name="onInit" params="component, element">
				component("spriteName"):SetString("button_no")
				component("sheetName"):SetString("xml_resources/context_buttons.xml")
				component("layer"):SetString("FrontPopUps")
				component("size"):SetFloat(0.5)
			</event>
		</spriteSheetComponent>
	</template>

	<element name="Sprite">
		<size dependentOnElement="element:name()" dependentOnComponent="Sprite" />
		<position relativeTo="bg" vAnchor="TOP" hAnchor="HCENTER" />
		<orientation vAnchor="VCENTER" hAnchor="HCENTER" xOffset="0" yOffset="58*game.hudScale()" priorityOffset="-1" />
		<spriteSheetComponent name="Sprite">
			<event name="onInit" params="component, element">
				component("spriteName"):SetString("food_01")
				component("sheetName"):SetString("xml_resources/hud01.xml")
				component("size"):SetFloat(0.75*game.hudScale())
				component("visible"):SetInt(0)
				component("layer"):SetString("FrontPopUps")
			</event>
		</spriteSheetComponent>
	</element>

	<event name="onInit" params="element">
		element("transitionState"):SetInt(1)
		element("transitionTime"):SetFloat(0.0)
		element("choice"):SetString("none")
		lua_sys.playSoundFx("audio/sfx/menu_slide.wav")
	</event>

	<event name="onPostInit" params="element">
		<![CDATA[
			local MenuHelpers = include("MenuHelpers")
			MenuHelpers.CenterHorizontally({
					element:GetElement("PremiumCost"),
					MenuHelpers.CreateSpacer(24*game.menuScaleX()),
					element:GetElement("RegularCost")
			})
		]]>
	</event>

	<event name="onTick" params="element, dt">
		<![CDATA[

			if(dt < game.maxTickTime()) then
				local transitionState = element("transitionState"):GetInt()

				if(transitionState ~= 0) then
					local transitionTime = element("transitionTime"):GetFloat()

					element:DoStoredScript("TickTransition")

					if(transitionState == 1) then
						transitionTime = (transitionTime + dt*3)
					elseif(transitionState == 2) then
						transitionTime = (transitionTime - dt*3)
					end

					transitionTime = clamp(transitionTime, 0.0, 1.0)

					element("transitionTime"):SetFloat(transitionTime)

					if(transitionTime >= 1.0) then
						element("transitionState"):SetInt(0)
						element("transitionTime"):SetFloat(1.0)
						element:DoStoredScript("TickTransition")
					elseif(transitionTime <= 0.0) then
						if(element("choice"):GetString() == "true") then
							element:root():popPopUp()
							game.submitConfirmation("PURCHASE_LOCKED_COSTUME", true)
						else
							element:root():popPopUp()
						end
					end
				end
			end
		]]>
	</event>

	<event name="TickTransition" params="element">
		<![CDATA[
		local transitionTime = element("transitionTime"):GetFloat()
		element["bg"]("xOffset"):SetFloat(lua_sys.screenWidth()*(0.5) + (-0.5)*lua_sys.screenWidth()*(1/transitionTime))
		element["FadedBG"]["Sprite"]("alpha"):SetFloat(transitionTime*0.5)
		]]>
	</event>

	<event name="queuePop" params="element">
		<![CDATA[
			element("transitionState"):SetInt(2)
		]]>
	</event>

	<event name="UpdatePrices" params="element">
		<![CDATA[
			local costumeId = element("CostumeId"):GetInt()
			local costumeData = game.getCostumeData(costumeId)

			--where does it come from? put that in the description text
			local descriptionText = LOC("COSTUME_PURCHASE_LOCKED_DESCRIPTION")
			local campaignDataList = game.getSortedBattleCampaignData(true)
			local itemFound = false
			local isVersus = false

			for i = 0, campaignDataList:size() - 1 do
				local campaignData = campaignDataList[i]

				if campaignData.reward.costumeId == costumeId then
					itemFound = true
					isVersus = campaignData.isPVP
				end
			end

			if(itemFound == true) then
				--unlocked in available event
				if isVersus then
					descriptionText = descriptionText:gsub("%${ACTION}", LOC("COSTUME_PURCHASE_LOCKED_AVAILABLE_PVP"))
				else
					descriptionText = descriptionText:gsub("%${ACTION}", LOC("COSTUME_PURCHASE_LOCKED_AVAILABLE_EVENT"))
				end
			else
				local costumeData = game.getCostumeData(costumeId)
				if(costumeData.unlockLevel > game.playerBattleLevel()) then
					--unlocked by level
					descriptionText = descriptionText:gsub("%${ACTION}", LOC("COSTUME_PURCHASE_LOCKED_LEVEL"))
				else
					-- unlocked in event
					descriptionText = descriptionText:gsub("%${ACTION}", LOC("COSTUME_PURCHASE_LOCKED_EVENT"))
				end
			end

			if costumeData.diamondCost > 0 then

				element["RegularCost"]["CurrencySprite"]("spriteName"):SetString(game.StoreContext_SPRITE_DIAMOND)
				element["RegularCost"]["CurrencySprite"]("sheetName"):SetString(game.StoreContext_CURRENCY_SPRITESHEET)
				element["RegularCost"]["Text"]("text"):SetString(costumeData.diamondCost)

				element["PremiumCost"]["CurrencySprite"]("spriteName"):SetString(game.StoreContext_SPRITE_DIAMOND)
				element["PremiumCost"]["CurrencySprite"]("sheetName"):SetString(game.StoreContext_CURRENCY_SPRITESHEET)
				element["PremiumCost"]["Text"]("text"):SetString(costumeData.diamondCost*game.costumeBuyNowMultiplier())
				element["PremiumCost"]["Text"]:setColor(RGB(game.StoreContext_diamondColour))

				descriptionText = descriptionText:gsub("%${AMOUNT}", costumeData.diamondCost*(game.costumeBuyNowMultiplier() - 1.0))
				descriptionText = descriptionText:gsub("%${CURRENCY}", LOC("DIAMONDS"))

			else

				if costumeData.action > 0 then

					local diamondCost = game.costumeMedalsToDiamonds(costumeData.medalCost)

					element["RegularCost"]["CurrencySprite"]("spriteName"):SetString(game.StoreContext_SPRITE_DIAMOND)
					element["RegularCost"]["CurrencySprite"]("sheetName"):SetString(game.StoreContext_CURRENCY_SPRITESHEET)
					element["RegularCost"]["Text"]("text"):SetString(diamondCost)

					element["PremiumCost"]["CurrencySprite"]("spriteName"):SetString(game.StoreContext_SPRITE_DIAMOND)
					element["PremiumCost"]["CurrencySprite"]("sheetName"):SetString(game.StoreContext_CURRENCY_SPRITESHEET)
					element["PremiumCost"]["Text"]("text"):SetString(diamondCost*game.costumeBuyNowMultiplier())
					element["PremiumCost"]["Text"]:setColor(RGB(game.StoreContext_diamondColour))

					descriptionText = descriptionText:gsub("%${AMOUNT}", diamondCost*(game.costumeBuyNowMultiplier() - 1.0))
					descriptionText = descriptionText:gsub("%${CURRENCY}", LOC("DIAMONDS"))

				else

					local coinCost = game.costumeMedalsToCoins(costumeData.medalCost)

					element["RegularCost"]["CurrencySprite"]("spriteName"):SetString(game.StoreContext_SPRITE_COINS)
					element["RegularCost"]["CurrencySprite"]("sheetName"):SetString(game.StoreContext_CURRENCY_SPRITESHEET)
					element["RegularCost"]["Text"]("text"):SetString(coinCost)

					element["PremiumCost"]["CurrencySprite"]("spriteName"):SetString(game.StoreContext_SPRITE_COINS)
					element["PremiumCost"]["CurrencySprite"]("sheetName"):SetString(game.StoreContext_CURRENCY_SPRITESHEET)
					element["PremiumCost"]["Text"]("text"):SetString(coinCost*game.costumeBuyNowMultiplier())
					element["PremiumCost"]["Text"]:setColor(RGB(game.StoreContext_coinColour))

					descriptionText = descriptionText:gsub("%${AMOUNT}", coinCost*(game.costumeBuyNowMultiplier() - 1.0))
					descriptionText = descriptionText:gsub("%${CURRENCY}", LOC("COINS"))

				end

			end

			element["RegularCost"]["Strikeout"]["Sprite"]:DoStoredScript("refresh")

			--update description
			element["Description"]["Text"]("text"):SetString(descriptionText)

			local MenuHelpers = include("MenuHelpers")
			MenuHelpers.CenterHorizontally({
					element:GetElement("PremiumCost"),
					MenuHelpers.CreateSpacer(32*game.menuScaleX()),
					element:GetElement("RegularCost")
			})
		]]>
	</event>

</menu>