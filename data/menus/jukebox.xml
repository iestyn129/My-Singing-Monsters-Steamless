<menu xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="menu.xsd">

	<element name="Fade">
		<size dependentOnElement="element:name()" dependentOnComponent="Sprite" />
		<position relativeTo="SCREEN" vAnchor="VCENTER" hAnchor="HCENTER" />
		<orientation vAnchor="VCENTER" hAnchor="HCENTER" xOffset="0" yOffset="0" priorityOffset="10" />

		<spriteComponent name="Sprite">
			<event name="onInit" params="component, element">
				<![CDATA[
			component("spriteName"):SetString("__BUILTIN__WHITE_TEXTURE")
			component:setScale(Vector2(lua_sys.screenWidth()*0.25, lua_sys.screenHeight()*0.25))
			component:setColor(0.0, 0.0, 0.0)
			--component("alpha"):SetFloat(0.5)
			component("layer"):SetString("MidPopUps")
			]]>
			</event>
		</spriteComponent>

		<touchComponent name="Touch">
			<size dependentOnElement="element:name()" />
			<position relativeTo="element:name()" vAnchor="VCENTER" hAnchor="HCENTER" />
			<orientation vAnchor="VCENTER" hAnchor="HCENTER" xOffset="0" yOffset="0" priorityOffset="0" />
		</touchComponent>
	</element>

	<element name="Bg">
		<size dependentOnElement="element:name()" dependentOnComponent="Sprite"/>
		<position relativeTo="PARENT" vAnchor="VCENTER" hAnchor="HCENTER" />
		<orientation vAnchor="VCENTER" hAnchor="HCENTER" xOffset="0" yOffset="lua_sys.screenHeight() * 2.0" priorityOffset="5" />
		<ninesliceComponent name="Sprite">
			<size w="260*game.menuScaleX()" h="225*game.menuScaleY()" />
			<position relativeTo="PARENT" vAnchor="VCENTER" hAnchor="HCENTER" />
			<orientation vAnchor="VCENTER" hAnchor="HCENTER" xOffset="0" yOffset="0" priorityOffset="0" />
			<event name="onInit" params="component, element">
				<![CDATA[
						component("topHeight"):SetFloat(50.0)
						component("bottomHeight"):SetFloat(50.0)
						component("leftWidth"):SetFloat(50.0)
						component("rightWidth"):SetFloat(50.0)
						component("size"):SetFloat(0.5)
						component("includeBorder"):SetInt(1)
						component("spriteName"):SetString("gfx/menu/Black9SFrame50")
						component("layer"):SetString("MidPopUps")
					]]>
			</event>
		</ninesliceComponent>

		<spriteSheetComponent name="Flourish1">
			<position relativeTo="element:name()" vAnchor="TOP" hAnchor="LEFT" />
			<orientation vAnchor="TOP" hAnchor="LEFT" xOffset="7" yOffset="7" priorityOffset="-5" />
			<event name="onInit" params="component, element">
				<![CDATA[
					component("spriteName"):SetString("menu_swirl_01")
					component("sheetName"):SetString("xml_resources/hud01.xml")
					component("size"):SetFloat(0.5*game.menuScaleX())
					component("layer"):SetString("MidPopUps")
				]]>
			</event>
		</spriteSheetComponent>

		<spriteSheetComponent name="Flourish2">
			<position relativeTo="element:name()" vAnchor="BOTTOM" hAnchor="RIGHT" />
			<orientation vAnchor="BOTTOM" hAnchor="RIGHT" xOffset="7" yOffset="10" priorityOffset="-5" />
			<event name="onInit" params="component, element">
				<![CDATA[
					component("spriteName"):SetString("menu_swirl_02")
					component("sheetName"):SetString("xml_resources/hud01.xml")
					component("size"):SetFloat(0.5*game.menuScaleX())
					component("layer"):SetString("MidPopUps")
				]]>
			</event>
		</spriteSheetComponent>

		<spriteSheetComponent name="Flute01">
			<position relativeTo="element:name()" vAnchor="TOP" hAnchor="LEFT" />
			<orientation vAnchor="VCENTER" hAnchor="HCENTER" xOffset="7*game.menuScaleX()" yOffset="59*game.menuScaleX()" priorityOffset="1" />
			<event name="onInit" params="component, element">
				<![CDATA[
					component("spriteName"):SetString("menu_flute")
					component("sheetName"):SetString("xml_resources/hud01.xml")
					component("size"):SetFloat(0.4*game.menuScaleX())
					component("rotation"):SetFloat(-0.6)
					component("layer"):SetString("MidPopUps")
				]]>
			</event>
		</spriteSheetComponent>

		<spriteSheetComponent name="Flute01Leaves">
			<position relativeTo="element:name()" vAnchor="TOP" hAnchor="LEFT" />
			<orientation vAnchor="VCENTER" hAnchor="HCENTER" xOffset="0" yOffset="59*game.menuScaleX()" priorityOffset="-1" />
			<event name="onInit" params="component, element">
				<![CDATA[
					component("spriteName"):SetString("menu_leaves")
					component("sheetName"):SetString("xml_resources/hud01.xml")
					component("size"):SetFloat(0.5*game.menuScaleX())
					component("layer"):SetString("MidPopUps")
				]]>
			</event>
		</spriteSheetComponent>

		<spriteSheetComponent name="Flute02">
			<position relativeTo="element:name()" vAnchor="TOP" hAnchor="LEFT" />
			<orientation vAnchor="VCENTER" hAnchor="HCENTER" xOffset="2*game.menuScaleX()" yOffset="70*game.menuScaleX()" priorityOffset="2" />
			<event name="onInit" params="component, element">
				<![CDATA[
					component("spriteName"):SetString("menu_flute")
					component("sheetName"):SetString("xml_resources/hud01.xml")
					component("size"):SetFloat(0.4*game.menuScaleX())
					component("rotation"):SetFloat(-1.2)
					component("layer"):SetString("MidPopUps")
				]]>
			</event>
		</spriteSheetComponent>

		<spriteSheetComponent name="Flute02Leaves">
			<position relativeTo="element:name()" vAnchor="TOP" hAnchor="LEFT" />
			<orientation vAnchor="VCENTER" hAnchor="HCENTER" xOffset="0" yOffset="90*game.menuScaleX()" priorityOffset="1" />
			<event name="onInit" params="component, element">
				<![CDATA[
					component("spriteName"):SetString("menu_leaves")
					component("sheetName"):SetString("xml_resources/hud01.xml")
					component("size"):SetFloat(0.5*game.menuScaleX())
					component("layer"):SetString("MidPopUps")
					component("rotation"):SetFloat(-0.2);
				]]>
			</event>
		</spriteSheetComponent>

		<spriteSheetComponent name="Flute03">
			<position relativeTo="element:name()" vAnchor="VCENTER" hAnchor="RIGHT" />
			<orientation vAnchor="VCENTER" hAnchor="HCENTER" xOffset="0" yOffset="0" priorityOffset="1" />
			<event name="onInit" params="component, element">
				<![CDATA[
					component("spriteName"):SetString("menu_flute")
					component("sheetName"):SetString("xml_resources/hud01.xml")
					if(component("isSourceRotated"):GetInt() == 1) then
						component("hFlip"):SetInt(1)
					else
						component("vFlip"):SetInt(1)
					end
					component("size"):SetFloat(0.4*game.menuScaleX())
					component("rotation"):SetFloat(-2.55)
					component("layer"):SetString("MidPopUps")
				]]>
			</event>
		</spriteSheetComponent>

		<element name="RightLeaves">
			<size dependentOnElement="element:name()" dependentOnComponent="Sprite" />
			<position relativeTo="PARENT" vAnchor="VCENTER" hAnchor="RIGHT" />
			<orientation vAnchor="VCENTER" hAnchor="RIGHT" xOffset="-15*game.menuScaleX()" yOffset="13*game.hudScale()" priorityOffset="-1" />
			<spriteSheetComponent name="Sprite">
				<event name="onInit" params="component, element">
					<![CDATA[
						component("spriteName"):SetString("menu_leaves")
						component("sheetName"):SetString("xml_resources/hud01.xml")
						if(component("isSourceRotated"):GetInt() == 1) then
							component("vFlip"):SetInt(1)
						else
							component("hFlip"):SetInt(1)
						end
						component("size"):SetFloat(0.5*game.menuScaleX())
						component("layer"):SetString("MidPopUps")
					]]>
				</event>
			</spriteSheetComponent>
		</element>

		<element name="LowerLeaves">
			<size dependentOnElement="element:name()" dependentOnComponent="Sprite" />
			<position relativeTo="PARENT" vAnchor="BOTTOM" hAnchor="LEFT" />
			<orientation vAnchor="BOTTOM" hAnchor="LEFT" xOffset="-13*game.hudScale()" yOffset="20*game.menuScaleY()" priorityOffset="-1" />
			<spriteSheetComponent name="Sprite">
				<event name="onInit" params="component, element">
					<![CDATA[
						component("spriteName"):SetString("menu_leaves")
						component("sheetName"):SetString("xml_resources/hud01.xml")
						component("size"):SetFloat(0.5*game.menuScaleX())
						component("layer"):SetString("MidPopUps")
						component("rotation"):SetFloat(-0.4*math.pi);
					]]>
				</event>
			</spriteSheetComponent>
		</element>

	</element>

	<element name="Title">
		<size w="225*game.menuScaleX()" h="42*game.menuScaleY()" />
		<position relativeTo="Bg" vAnchor="TOP" hAnchor="HCENTER" />
		<orientation vAnchor="TOP" hAnchor="HCENTER" xOffset="0" yOffset="8*game.menuScaleY()" priorityOffset="-1" />

		<ninesliceComponent name="BlackCover">
			<size w="225*game.menuScaleX()" h="42*game.menuScaleY()" />
			<position relativeTo="element:name()" vAnchor="VCENTER" hAnchor="HCENTER" />
			<orientation vAnchor="VCENTER" hAnchor="HCENTER" xOffset="0" yOffset="0" priorityOffset="0" />
			<event name="onInit" params="component, element">
				<![CDATA[
					component("topHeight"):SetFloat(1.0)
					component("bottomHeight"):SetFloat(1.0)
					component("leftWidth"):SetFloat(1.0)
					component("rightWidth"):SetFloat(1.0)
					component("size"):SetFloat(0.5*game.hudScale())
					component("includeBorder"):SetInt(0)
					component("spriteName"):SetString("__BUILTIN__WHITE_TEXTURE")
					component:setColor(0.0, 0.0, 0.0)
					component("layer"):SetString("MidPopUps")
				]]>
			</event>
		</ninesliceComponent>

		<textComponent name="Text">
			<size w="225*game.menuScaleX()" h="60*game.menuScaleY()" />
			<position relativeTo="element:name()" vAnchor="VCENTER" hAnchor="HCENTER" />
			<orientation vAnchor="VCENTER" hAnchor="HCENTER" xOffset="0" yOffset="0" priorityOffset="-1" />
			<event name="onInit" params="component, element">
				<![CDATA[
				component("multiline"):SetInt(0)
				component("autoScale"):SetInt(1)
				component("font"):Set(game.getTextFont())
				component("size"):SetFloat(0.4*game.menuScaleY())
				component("alignment"):SetInt(lua_sys.MenuTextComponent_TEXT_HCENTER_ALIGNED)
				component:setColor(0.26, 0.96, 0.26) -- GREEN
				component("layer"):SetString("MidPopUps")
				component("text"):SetString("JUKEBOX_TITLE")
				]]>
			</event>
		</textComponent>
	</element>

	<element name="Contents">
		<size w="225*game.menuScaleX()" h="175*game.menuScaleY()" />
		<position relativeTo="Bg" vAnchor="BOTTOM" hAnchor="HCENTER" />
		<orientation vAnchor="BOTTOM" hAnchor="HCENTER" xOffset="0" yOffset="8*game.menuScaleY()" priorityOffset="-1" />

		<swipeComponent name="Swiper">
			<event name="onInit" params="component, element">
				<![CDATA[
						component("smoothMode"):SetInt(1)
					]]>
			</event>
			<function name="refresh" params="component, element">
				<![CDATA[
					include("ScrollingListHelper").SwiperRefresh(component, element)
				]]>
			</function>
			<event name="onTick" params="component, element, dt">
				<![CDATA[
					include("ScrollingListHelper").SwiperTick(component, element, dt)
				]]>
			</event>
		</swipeComponent>

		<touchComponent name="Touch">
			<size dependentOnElement="element:name()"/>
			<event name="onInit" params="component, element">
				component("singleTouch"):SetInt(1)
			</event>
		</touchComponent>

<!--
		<spriteComponent name="test_box">
			<position relativeTo="element:name()" vAnchor="VCENTER" hAnchor="HCENTER" />
			<orientation vAnchor="VCENTER" hAnchor="HCENTER" xOffset="0" yOffset="0" priorityOffset="-1" />
			<event name="onPostInit" params="component, element">
				<![CDATA[
					component("spriteName"):SetString("__BUILTIN__WHITE_TEXTURE")
					component:setScale(
						Vector2( element:absW() / 4.0, element:absH() / 4.0))
					component:setColor(1.0, 0.0, 0.0)
					component("alpha"):SetFloat(0.5)
					component("layer"):SetString("MidPopUps")
					component("visible"):SetInt(1)
				]]>
			</event>
		</spriteComponent>
-->

			<event name="onInit" params="element">
			<![CDATA[
				include("ScrollingListHelper").ListInit(element, {direction=MenuSwipeComponent_SwipeDirectionVertical})
			]]>
		</event>

		<event name="onPostInit" params="element">
			<![CDATA[
				element:DoStoredScript("populate")
			]]>
		</event>

		<event name="populate" params="element">
			<![CDATA[

				local musicIds = game.getBattleMusicIds()

				local createFunc = function(idx, entryName)

					local musicId = musicIds[idx]

					local battleMusicData = game.getBattleMusicData(musicId)
					local entry = menu:addTemplateElement("template_jukebox_entry", entryName, element)

					print("adding entry:", battleMusicData.name)

					entry("songId"):SetInt(battleMusicData.id)
					entry("songName"):SetString(battleMusicData.name)
					entry("unlockLevel"):SetInt(battleMusicData.unlockLevel)

					local battlePlayerData = game.getBattlePlayerData()

					if battleMusicData.unlockLevel > battlePlayerData.level then
						entry("locked"):SetInt(1)
					else
						entry("locked"):SetInt(0)
					end

					if battlePlayerData:getCurrentlyPlayingBattleMusic() == battleMusicData.id then
						entry("selected"):SetInt(1)
					else
						entry("selected"):SetInt(0)
					end

					return entry

				end

				include("ScrollingListHelper").ListPopulate(element, musicIds:size(), createFunc)
			]]>
		</event>

		<event name="onTick" params="element, dt">
			<![CDATA[
					include("ScrollingListHelper").ListTick(element, dt)
					--update clipping
					local MenuHelpers = include("MenuHelpers")
					MenuHelpers.ForEachEntry(element,
						function(entry)
							entry("clipX"):SetFloat(element:absX())
							entry("clipY"):SetFloat(element:absY())
							entry("clipW"):SetFloat(element:absW())
							entry("clipH"):SetFloat(element:absH())
							entry:DoStoredScript("updateClipping")
						end
					)
				]]>
		</event>


		<event name="onSelectEntry" params="element">
			<![CDATA[
				local selectedEntryName = element("SelectedEntry"):GetString()
				local selectedEntry = element:GetElement(selectedEntryName)
				local songId = selectedEntry("songId"):GetInt()
				local battleMusicData = game.getBattleMusicData(songId)

				if selectedEntry("locked"):GetInt() == 1 then
					local notification = game.getLocalizedText("NOTIFICATION_JUKEBOX_UNLOCK_TRACK")
					notification = notification:gsub("%${LEVEL}", battleMusicData.unlockLevel)
					game.displayNotification(notification)
				else
					local battlePlayerData = game.getBattlePlayerData()
					if battlePlayerData:getCurrentlyPlayingBattleMusic() ~= songId then
						print("selected song:", songId)

						game.selectBattleMusic(songId)

						include("MenuHelpers").ForEachEntry(element,
							function(entry)
								if entry:name() == selectedEntryName then
									entry("selected"):SetInt(1)
								else
									entry("selected"):SetInt(0)
								end
								entry:DoStoredScript("refresh")
							end)

					end
				end
			]]>
		</event>

	</element>

	<element name="TopFade">
		<size dependentOnElement="element:name()" dependentOnComponent="Sprite" />
		<position relativeTo="Contents" vAnchor="TOP" hAnchor="HCENTER" />
		<orientation vAnchor="TOP" hAnchor="HCENTER" xOffset="0" yOffset="0" priorityOffset="-3" />
		<spriteComponent name="Sprite">
			<event name="onInit" params="component, element">
				<![CDATA[
					component("spriteName"):SetString("gfx/fade_sprite")
					component:setScale(Vector2(225 * game.menuScaleX() / 16, 0.5*game.menuScaleY()))
					component("layer"):SetString("MidPopUps")
				]]>
			</event>
		</spriteComponent>
	</element>

	<element name="BottomFade">
		<size dependentOnElement="element:name()" dependentOnComponent="Sprite" />
		<position relativeTo="Contents" vAnchor="BOTTOM" hAnchor="HCENTER" />
		<orientation vAnchor="BOTTOM" hAnchor="HCENTER" xOffset="0" yOffset="0" priorityOffset="-3" />
		<spriteComponent name="Sprite">
			<event name="onInit" params="component, element">
				<![CDATA[
					component("spriteName"):SetString("gfx/fade_sprite")
					component:setScale(Vector2(225 * game.menuScaleX() / 16, 0.5*game.menuScaleY()))
					component("vFlip"):SetInt(1)
					component("layer"):SetString("MidPopUps")
				]]>
			</event>
		</spriteComponent>
	</element>

	<element name="ScrollBar">
		<size dependentOnElement="element:name()" dependentOnComponent="Sprite" />
		<position relativeTo="Bg" vAnchor="VCENTER" hAnchor="RIGHT" />
		<orientation vAnchor="VCENTER" hAnchor="RIGHT" xOffset="20*game.hudScale()" yOffset="0" priorityOffset="-1" />
		<spriteSheetComponent name="Sprite">
			<event name="onInit" params="component, element">
				<![CDATA[
					component("spriteName"):SetString("scroll_bar_01")
					component("sheetName"):SetString("xml_resources/buttons01.xml")
					component("size"):SetFloat(0.4*game.menuScaleY())
					component("layer"):SetString("MidPopUps")
				]]>
			</event>
		</spriteSheetComponent>
	</element>

	<element name="ScrollMarker">
		<size dependentOnElement="element:name()" dependentOnComponent="Marker" />
		<position relativeTo="ScrollBar" vAnchor="TOP" hAnchor="HCENTER" />
		<orientation vAnchor="TOP" hAnchor="HCENTER" xOffset="0" yOffset="6*game.menuScaleY()" priorityOffset="-1" />
		<spriteSheetComponent name="Marker">
			<event name="onInit" params="component, element">
				<![CDATA[
				component("useOffsets"):SetInt(1)
				component("spriteName"):SetString("scroll_bar_dot")
				component("sheetName"):SetString("xml_resources/buttons01.xml")
				component("size"):SetFloat(0.4*game.menuScaleY())
				component("layer"):SetString("MidPopUps")
				element("originalYOffset"):SetInt(element("yOffset"):GetInt())
				]]>
			</event>
		</spriteSheetComponent>
		<touchComponent name="Touch">
			<size dependentOnElement="element:name()" dependentOnComponent="Marker" />
			<position relativeTo="PARENT" vAnchor="TOP" hAnchor="LEFT" />
			<orientation vAnchor="TOP" hAnchor="LEFT" xOffset="0" yOffset="0" priorityOffset="0" />
			<event name="onInit" params="component, element">
				<![CDATA[
					include("ScrollingListHelper").ScrollMarkerOnInit(component, element, "Contents", "ScrollBar")
				]]>
			</event>
			<event name="onTouchDrag" params="component, element, x, y">
				<![CDATA[
					include("ScrollingListHelper").ScrollMarkerOnTouchDrag(component, element, x, y)
				]]>
			</event>
			<event name="onTick" params="component, element, dt">
				<![CDATA[
					include("ScrollingListHelper").ScrollMarkerOnTick(component, element, dt)
				]]>
			</event>
		</touchComponent>
	</element>

	<event name="queuePop" params="element">
		<![CDATA[
			element:DoStoredScript("hide")
		]]>
	</event>

	<event name="onInit" params="element">
		<![CDATA[
			local offsetTransition = include("MenuElementPositionOffsetTransition")
			offsetTransition.OnInit(element:GetElement("Bg"), {startY = lua_sys.screenHeight() * 2.0, endY = 6*game.hudScale(), duration = 0.66})

			local FadeTransition = include("FadeTransition")
			local fadeSprite = element:GetElement("Fade"):GetComponent("Sprite")
			fadeSprite.FadeTransition = FadeTransition:new({
				duration = 0.66,
				maxFade = 0.5,
				onUpdate = function(alpha)
					fadeSprite:GetVar("alpha"):SetFloat(alpha)
				end
			})

		]]>
	</event>

	<event name="onPostInit" params="element">
		<![CDATA[
			local fadeSprite = element:GetElement("Fade"):GetComponent("Sprite")
			fadeSprite.FadeTransition:SetAlpha(0)
			element:DoStoredScript("show")
		]]>
	</event>


	<event name="onTick" params="element, dt">
		<![CDATA[
			local offsetTransition = include("MenuElementPositionOffsetTransition")
			local options = {
				ease = lua_sys.Quadratic_EaseIn,
				onDoneHide = function(e) e:root():popPopUp() end
			}
			offsetTransition.OnTick(element:GetElement("Bg"), dt, options)

			local fadeSprite = element:GetElement("Fade"):GetComponent("Sprite")
			fadeSprite.FadeTransition:Tick(dt)
		]]>
	</event>

	<event name="show" params="element">
		<![CDATA[
			local offsetTransition = include("MenuElementPositionOffsetTransition")
			offsetTransition.Show(element:GetElement("Bg"))

			local fadeSprite = element:GetElement("Fade"):GetComponent("Sprite")
			fadeSprite.FadeTransition:Show()

			playSoundFx("audio/sfx/menu_slide.wav")
		]]>
	</event>

	<event name="hide" params="element">
		<![CDATA[
			local offsetTransition = include("MenuElementPositionOffsetTransition")
			offsetTransition.Hide(element:GetElement("Bg"))

			local fadeSprite = element:GetElement("Fade"):GetComponent("Sprite")
			fadeSprite.FadeTransition:Hide()

			playSoundFx("audio/sfx/menu_slide.wav")
		]]>
	</event>

</menu>