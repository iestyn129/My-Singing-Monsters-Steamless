<?xml version="1.0" encoding="utf-8"?>
<menu xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="menu.xsd">
	<element name="FadedBG">
		<size dependentOnElement="element:name()" dependentOnComponent="Sprite" />
		<position relativeTo="SCREEN" vAnchor="VCENTER" hAnchor="HCENTER" />
		<orientation vAnchor="VCENTER" hAnchor="HCENTER" xOffset="0" yOffset="0" priorityOffset="10" />
		<spriteComponent name="Sprite">
			<event name="onInit" params="component, element">
				component("spriteName"):SetString("__BUILTIN__WHITE_TEXTURE")
				component:setScale(Vector2(lua_sys.screenWidth()*0.25, lua_sys.screenHeight()*0.25))
				component:setColor(0.0, 0.0, 0.0)
				component("alpha"):SetFloat(0.5)
				component("layer"):SetString("MidPopUps")
			</event>
		</spriteComponent>
		<touchComponent name="Touch">
			<size dependentOnElement="element:name()" />
			<position relativeTo="element:name()" vAnchor="VCENTER" hAnchor="HCENTER" />
			<orientation vAnchor="VCENTER" hAnchor="HCENTER" xOffset="0" yOffset="0" priorityOffset="0" />
		</touchComponent>
	</element>
	
	<element name="Frame">
		<size dependentOnElement="element:name()" dependentOnComponent="Sprite"/>
		<position relativeTo="PARENT" vAnchor="VCENTER" hAnchor="HCENTER" />
		<orientation vAnchor="VCENTER" hAnchor="HCENTER" xOffset="0" yOffset="-5*game.menuScaleY()" priorityOffset="9" />
		<ninesliceComponent name="Sprite">
			<size w="235*game.menuScaleX()" h="250*game.menuScaleY()" />
			<event name="onInit" params="component, element">			
				component("topHeight"):SetFloat(50.0)
				component("bottomHeight"):SetFloat(50.0)
				component("leftWidth"):SetFloat(50.0)
				component("rightWidth"):SetFloat(50.0)
				component("size"):SetFloat(0.5)
				component("includeBorder"):SetInt(1)
				component("spriteName"):SetString("gfx/menu/Black9SFrame50")
				component("layer"):SetString("MidPopUps")
				game.setClipping("Clipping", 0, (element:absY() + element:parent():GetElement("TitleFrame"):absH())*lua_sys.deviceScaleY(), lua_sys.screenWidth()*lua_sys.deviceScaleX(), (element:absH()-60)*lua_sys.deviceScaleY())
			</event>
		</ninesliceComponent>
	</element>
	
	<touchComponent name="TouchBlockerTop">
		<size w="lua_sys.screenWidth()" h="lua_sys.screenHeight()" />
		<position relativeTo="SCREEN" vAnchor="TOP" hAnchor="LEFT" />
		<orientation vAnchor="TOP" hAnchor="LEFT" xOffset="0" yOffset="0" priorityOffset="0" />
		<event name="onPostInit" params="component, element">
		
			--call this because otherwise positions don't get updated properly until the onTicks
			element:setPositionBroadcast(true)
			
			local topSprite = element:GetElement("TitleFrame");

			component:setOrientation(lua_sys.MenuOrientation(0, -(topSprite:absY() + topSprite:absH()), 0, lua_sys.LEFT, lua_sys.BOTTOM))
			component:setRelativeObjectAnchors(lua_sys.LEFT, lua_sys.TOP)
		</event>
	</touchComponent>
	
	<touchComponent name="TouchBlockerBot">
		<size w="lua_sys.screenWidth()" h="lua_sys.screenHeight()" />
		<position relativeTo="SCREEN" vAnchor="TOP" hAnchor="LEFT" />
		<orientation vAnchor="TOP" hAnchor="LEFT" xOffset="0" yOffset="0" priorityOffset="6" />
		<event name="onPostInit" params="component, element">
		
			--call this because otherwise positions don't get updated properly until the onTicks
			element:setPositionBroadcast(true)
			
			local botSprite = element:GetElement("Frame");
			
			component:setOrientation(lua_sys.MenuOrientation(0, (botSprite:absY() + botSprite:absH() - 10), 6, lua_sys.LEFT, lua_sys.TOP))
			component:setRelativeObjectAnchors(lua_sys.LEFT, lua_sys.TOP)

		</event>
	</touchComponent>
	
	<element name="TitleFrame">
		<size dependentOnElement="element:name()" dependentOnComponent="Sprite" />
		<position relativeTo="Frame" vAnchor="TOP" hAnchor="HCENTER" />
		<orientation vAnchor="TOP" hAnchor="HCENTER" xOffset="0" yOffset="0" priorityOffset="-1" />
		<ninesliceComponent name="Sprite">
			<size w="235*game.menuScaleX()" h="50" />
			<event name="onInit" params="component, element">
				component("topHeight"):SetFloat(50.0)
				component("bottomHeight"):SetFloat(50.0)
				component("leftWidth"):SetFloat(50.0)
				component("rightWidth"):SetFloat(50.0)
				component("size"):SetFloat(0.5)
				component("includeBorder"):SetInt(1)
				component("spriteName"):SetString("gfx/menu/GreyTitleFrame")
				component("layer"):SetString("MidPopUps")
			</event>
		</ninesliceComponent>
	</element>
	
	<element name="TitleText">
		<size dependentOnElement="element:name()" dependentOnComponent="Text" />
		<position relativeTo="TitleFrame" vAnchor="VCENTER" hAnchor="HCENTER" />
		<orientation vAnchor="VCENTER" hAnchor="HCENTER" xOffset="0" yOffset="0" priorityOffset="-1" />
		<textComponent name="Text">
			<size w="205*game.hudScale()" h="50" />
			<event name="onInit" params="component, element">
				component("font"):Set(game.getTextFont())
				component("autoScale"):SetInt(1)
				component("multiline"):SetInt(0)
				component("alignment"):SetInt(lua_sys.MenuTextComponent_TEXT_LEFT_ALIGNED)
				component:setColor(0.43, 0.98, 0.02)
				component("text"):SetString("PLACE_MONSTER")
				component("layer"):SetString("MidPopUps")
			</event>
		</textComponent>
	</element>
	
	<element name="NoMonstersLabel">
		<size dependentOnElement="element:name()" dependentOnComponent="Text" />
		<position relativeTo="TitleFrame" vAnchor="BOTTOM" hAnchor="HCENTER" />
		<orientation vAnchor="TOP" hAnchor="HCENTER" xOffset="0" yOffset="10*game.menuScaleY()" />
		<textComponent name="Text">
			<size w="200*game.menuScaleX()" h="50*game.menuScaleY()" />
			<position relativeTo="PARENT" vAnchor="VCENTER" hAnchor="HCENTER" />
			<orientation vAnchor="VCENTER" hAnchor="HCENTER" xOffset="0" yOffset="0" priorityOffset="0" />
			<event name="onInit" params="component, element">
				component("font"):Set(game.getTextFont())
				component("size"):SetFloat(0.25*game.menuScaleX())
				component("alignment"):SetInt(lua_sys.MenuTextComponent_TEXT_HCENTER_ALIGNED)
				component("text"):SetString("GOLD_PLACE_MONSTER_DESC")
				component("layer"):SetString("MidPopUps")
			</event>
		</textComponent>
	</element>
	
	<element name="Entries">
		<size dependentOnElement="Frame" dependentOnComponent="Sprite" />
		<position relativeTo="TitleFrame" vAnchor="BOTTOM" hAnchor="HCENTER" />
		<orientation vAnchor="TOP" hAnchor="HCENTER" xOffset="10*game.menuScaleX()" yOffset="-30 * game.menuScaleY()" priorityOffset="0" />
		<swipeComponent name="Swiper">
			<event name="onInit" params="component, element">
				<![CDATA[
					component("smoothMode"):SetInt(1)
				]]>
			</event>
			<function name="refresh" params="component, element">
				<![CDATA[
					include("ScrollingListHelper").SwiperRefresh(component, element)
				]]>
			</function>

			<event name="onTick" params="component, element, dt">
				<![CDATA[
					include("ScrollingListHelper").SwiperTick(component, element, dt)
				]]>
			</event>
		</swipeComponent>
		<touchComponent name="Touch">
			<size dependentOnElement="element:name()" />
			<event name="onInit" params="component, element">
				component("singleTouch"):SetInt(1)
			</event>
		</touchComponent>
		<event name="onInit" params="element">
			<![CDATA[
				include("ScrollingListHelper").ListInit(element, {
					direction=MenuSwipeComponent_SwipeDirectionVertical,
					spacing = 12 * game.menuScaleY(),
					padding = 36 * game.menuScaleY() --0*8 * game.hudScale()
				})
			]]>
		</event>
		<event name="onPostInit" params="element">
			<![CDATA[
				element:DoStoredScript("populate")
			]]>
		</event>
		<event name="populate" params="element">
			<![CDATA[
			local monsterVector = game.maxLevelMonstersNotPlacedOnGoldIsland()
			
			local createFunc = function(idx, entryName)
				local monsterId = monsterVector[idx]
				
				--temp way to check if allowed on gold island to fix 3.2.0 --> 3.3.0 issue
				local isAllowedOnGoldIsland = function(id)
					local allowedOnGold = {188, 201, 247, 267, 274} -- list of entities allowed on gold island
					local entityId = game.monsterEntityId(id)
					for i=1, #allowedOnGold do
						if allowedOnGold[i] == entityId then
							return true
						end
					end
					return false
				end
				local entry = nil;
				if(game.allowOnGold(monsterId) == true or isAllowedOnGoldIsland(monsterId) == true) then
				
					entry = menu:addTemplateElement("template_goldislandentry", entryName, element)
					entry("MonsterID"):SetInt(monsterId)
				end
				return entry;
			end
			
			
			include("ScrollingListHelper").ListPopulate(element, monsterVector:size(), createFunc)
		
			
			if(element("numEntries"):GetInt() ~= 0) then
				element:parent():GetElement("NoMonstersLabel")["Text"]("visible"):SetInt(0)
			end
			]]>
		</event>
		<event name="onTick" params="element, dt">
			<![CDATA[
					include("ScrollingListHelper").ListTick(element, dt)
					--update clipping
					local MenuHelpers = include("MenuHelpers")
					MenuHelpers.ForEachEntry(element,
						function(entry)
							entry("clipX"):SetFloat(element:absX())
							entry("clipY"):SetFloat(element:absY())
							entry("clipW"):SetFloat(element:absW())
							entry("clipH"):SetFloat(element:absH())
							entry:DoStoredScript("updateClipping")
						end
					)
				]]>
		</event>
	</element>
	<element name="ScrollBar">
		<size dependentOnElement="element:name()" dependentOnComponent="Sprite" />
		<position relativeTo="Frame" vAnchor="VCENTER" hAnchor="RIGHT" />
		<orientation vAnchor="VCENTER" hAnchor="RIGHT" xOffset="10*game.hudScale()" yOffset="0" priorityOffset="-1" />
		<spriteSheetComponent name="Sprite">
			<event name="onInit" params="component, element">
				<![CDATA[
					component("spriteName"):SetString("scroll_bar_01")
					component("sheetName"):SetString("xml_resources/buttons01.xml")
					component("size"):SetFloat(0.4*game.menuScaleY())
					component("layer"):SetString("MidPopUps")
				]]>
			</event>
		</spriteSheetComponent>
	</element>

	<element name="ScrollMarker">
		<size dependentOnElement="element:name()" dependentOnComponent="Marker" />
		<position relativeTo="ScrollBar" vAnchor="TOP" hAnchor="HCENTER" />
		<orientation vAnchor="TOP" hAnchor="HCENTER" xOffset="0" yOffset="6*game.menuScaleY()" priorityOffset="-1" />
		<spriteSheetComponent name="Marker">
			<event name="onInit" params="component, element">
				<![CDATA[
				component("useOffsets"):SetInt(1)
				component("spriteName"):SetString("scroll_bar_dot")
				component("sheetName"):SetString("xml_resources/buttons01.xml")
				component("size"):SetFloat(0.4*game.menuScaleY())
				component("layer"):SetString("MidPopUps")
				element("originalYOffset"):SetInt(element("yOffset"):GetInt())
				]]>
			</event>
		</spriteSheetComponent>
		<touchComponent name="Touch">
			<size dependentOnElement="element:name()" dependentOnComponent="Marker" />
			<position relativeTo="PARENT" vAnchor="TOP" hAnchor="LEFT" />
			<orientation vAnchor="TOP" hAnchor="LEFT" xOffset="0" yOffset="0" priorityOffset="0" />
			<event name="onInit" params="component, element">
				<![CDATA[
					include("ScrollingListHelper").ScrollMarkerOnInit(component, element, "Entries", "ScrollBar")
				]]>
			</event>
			<event name="onTouchDrag" params="component, element, x, y">
				<![CDATA[
					include("ScrollingListHelper").ScrollMarkerOnTouchDrag(component, element, x, y)
				]]>
			</event>
			<event name="onTick" params="component, element, dt">
				<![CDATA[
					include("ScrollingListHelper").ScrollMarkerOnTick(component, element, dt)
				]]>
			</event>
		</touchComponent>
	</element>
	
	<event name="queuePop" params="element">
		element:root():popPopUp()
	</event>
	
</menu>