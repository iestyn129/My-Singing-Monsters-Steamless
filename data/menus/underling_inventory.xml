<?xml version="1.0" encoding="utf-8"?>
<menu xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="menu.xsd">


	<!-- viewable from other islands, but inefficient compared to box_inventory (which should be used when on the underling island -->
	<event name="onInit" params="element">
		element("monsterUid"):SetInt(game.getSelectedUnderling())
	</event>
	
	<element name="FadedBG">
		<size dependentOnElement="element:name()" dependentOnComponent="Sprite" />
		<position relativeTo="SCREEN" vAnchor="VCENTER" hAnchor="HCENTER" />
		<orientation vAnchor="VCENTER" hAnchor="HCENTER" xOffset="0" yOffset="0" priorityOffset="10" />
		<spriteComponent name="Sprite">
			<event name="onInit" params="component, element">
				component("spriteName"):SetString("__BUILTIN__WHITE_TEXTURE")
				component:setScale(Vector2(lua_sys.screenWidth()*0.25, lua_sys.screenHeight()*0.25))
				component:setColor(0.0, 0.0, 0.0)
				component("alpha"):SetFloat(0.5)
				component("layer"):SetString("MidPopUps")
			</event>
		</spriteComponent>
		<touchComponent name="Touch">
			<size dependentOnElement="element:name()" />
			<position relativeTo="element:name()" vAnchor="VCENTER" hAnchor="HCENTER" />
			<orientation vAnchor="VCENTER" hAnchor="HCENTER" xOffset="0" yOffset="0" priorityOffset="0" />
		</touchComponent>
	</element>
	
	<element name="BoxMonsterTitle">
		<size dependentOnElement="element:name()" dependentOnComponent="BackingSprite" />
		<position relativeTo="PARENT" vAnchor="TOP" hAnchor="HCENTER" />
		<orientation vAnchor="TOP" hAnchor="HCENTER" xOffset="0" yOffset="20*game.menuScaleX()" priorityOffset="5" />
		<ninesliceComponent name="BackingSprite">
			<event name="onInit" params="component, element">
				component("topHeight"):SetFloat(50.0)
				component("bottomHeight"):SetFloat(50.0)
				component("leftWidth"):SetFloat(50.0)
				component("rightWidth"):SetFloat(50.0)
				
				local scalex = lua_sys.screenWidth()/480.0
				
				component("size"):SetFloat(0.4 * scalex)
				component("width"):SetInt(210.0 * scalex)
				component("height"):SetInt(3.33 * game.hudScale())
				component("spriteName"):SetString("gfx/menu/BlackTitleFrame")
				component("layer"):SetString("FrontPopUps")
			</event>
		</ninesliceComponent>
		<textComponent name="Text">
			<size w="240*game.menuScaleX()" />
			<size dependentOnElement="element:name()" dependentOnComponent="BackingSprite" />
			<position relativeTo="element:name()" vAnchor="VCENTER" hAnchor="HCENTER" />
			<orientation vAnchor="VCENTER" hAnchor="HCENTER" xOffset="0" yOffset="0" priorityOffset="-1" />
			<event name="onInit" params="component, element" >
				component("multiline"):SetInt(0)
				component("font"):Set(game.getTitleFont())
				component("size"):SetFloat(0.6*game.hudScale())
				component("alignment"):SetInt(lua_sys.MenuTextComponent_TEXT_HCENTER_ALIGNED)
				component("text"):SetString("CONTEXTBAR_INVENTORY_LABEL")
				
				component("autoScale"):SetInt(1)
				component("layer"):SetString("FrontPopUps")
				game.StoreContext_setCoinTextColour(component)
			</event>
		</textComponent>
	</element>
	
	<element name="TimeRemaining">
		<size dependentOnElement="element:name()" dependentOnComponent="Text"/>
		<position relativeTo="EggListBg" component="" vAnchor="BOTTOM" hAnchor="HCENTER" />
		<orientation vAnchor="BOTTOM" hAnchor="HCENTER" xOffset="0" yOffset="8*game.menuScaleY()" priorityOffset="-1" />
		<textComponent name="Text">
			<size w="120*game.menuScaleX()" h="120*game.menuScaleY()" />
			<event name="onInit" params="component, element">
			<![CDATA[
				component("multiline"):SetInt(0)
				component("font"):Set(game.getTextFont())
				component("size"):SetFloat(0.75*game.menuScaleX())
				component("alignment"):SetInt(lua_sys.MenuTextComponent_TEXT_LEFT_ALIGNED)
				component("text"):SetString("00d 00h 00m")
				component("layer"):SetString("FrontPopUps")
				component("autoScale"):SetInt(1)
				
				local timeLeft = game.underlingTime(element:parent()("monsterUid"):GetInt())
				if(timeLeft <= 0) then
					element["Text"]("visible"):SetInt(0)
				else
					element["Text"]("text"):SetString(game.timeToString(timeLeft))
				end
			]]>
			</event>
		</textComponent>
		<event name="onTick" params="element, dt">
			<![CDATA[
				if(element["Text"]("visible"):GetInt() == 1) then
					local timeLeft = game.underlingTime(element:parent()("monsterUid"):GetInt())
					
					if(timeLeft <= 0) then
						element["Text"]("visible"):SetInt(0)
					else
						element["Text"]("text"):SetString(game.timeToString(timeLeft))
					end
				end
			]]>
		</event>
	</element>
	
	<element name="EggListBg">
		<size dependentOnElement="element:name()" dependentOnComponent="Sprite"/>
		<position relativeTo="PARENT" vAnchor="VCENTER" hAnchor="HCENTER" />
		<orientation vAnchor="VCENTER" hAnchor="HCENTER" xOffset="0" yOffset="-10" priorityOffset="5" />		
		<ninesliceComponent name="Sprite">
			<size w="430*(lua_sys.screenWidth()/480.0)" h="260*game.menuScaleY()" />
			<event name="onInit" params="component, element">
				<![CDATA[
					component("topHeight"):SetFloat(50.0)
					component("bottomHeight"):SetFloat(50.0)
					component("leftWidth"):SetFloat(50.0)
					component("rightWidth"):SetFloat(50.0)
					component("size"):SetFloat(0.5*(lua_sys.screenWidth()/480.0))
					component("includeBorder"):SetInt(1)
					component("spriteName"):SetString("gfx/menu/Black9SFrame50")
					component("layer"):SetString("MidPopUps")
					
					if(game.hudScale() > 1) then
						component("height"):SetInt(component("height"):GetInt() + 20*game.hudScale())
					end
				]]>
			</event>
			<event name="onPostInit" params="component, element">
				local scrollerX = (element:absX() + (20*game.menuScaleX())) * lua_sys.deviceScaleX()
				local scrollerY = (element:absY() )*lua_sys.deviceScaleY()
				local scrollerWidth = (element:absW() - (20*game.menuScaleX()*2) )*lua_sys.deviceScaleX()
				local scrollerHeight = (360 * game.menuScaleY() * lua_sys.deviceScaleY()) 
				game.setClipping("Clipping", scrollerX, scrollerY, scrollerWidth, scrollerHeight)
				element:setPositionBroadcast(true)
			</event>
		</ninesliceComponent>
	</element>
	
	<element name="EggList">
		<position relativeTo="EggListBg" vAnchor="VCENTER" hAnchor="LEFT" />
		<orientation vAnchor="VCENTER" hAnchor="LEFT" xOffset="100*game.menuScaleX()" yOffset="60*game.menuScaleY()" priorityOffset="-1" />
		<script src="scripts/ZapInventoryEggList.lua" />
		<swipeComponent name="Swiper">
			<event name="onPostInit" params="component, element">
				component:GetVar("direction"):SetInt(lua_sys.MenuSwipeComponent_SwipeDirectionHorizontal)
				component:GetVar("mode"):SetInt(lua_sys.MenuSwipeComponent_SwipeModeFree)
				component:GetVar("tSteps"):SetFloat(25.0)
				component:listenToTouches(element)
				
				local firstEntry = element:parent():E("monsterEntry0")
				if(firstEntry ~= nil) then
					local firstWidth = firstEntry("actualWidth"):GetInt()
					local itemWidth = (firstWidth + (3 * game.menuScaleX())) * math.floor((element("NumDistinctMonsters"):GetInt() + 1) / 2)
					local scrollContainerWidth = element:parent():E("EggListBg"):absW() 
					
					if(itemWidth &gt; scrollContainerWidth) then
						component:setScrollSize(itemWidth - scrollContainerWidth)
						element:parent()["ScrollBar"]["Sprite"]("visible"):SetInt(1)
						element:parent()["ScrollMarker"]["Marker"]("visible"):SetInt(1)
					else
						component:setScrollSize(0)
						element:parent()["ScrollBar"]["Sprite"]("visible"):SetInt(0)
						element:parent()["ScrollMarker"]["Marker"]("visible"):SetInt(0)
					end
					element("scrollSize"):SetFloat(component:scrollSize())
				end
				
				component("mode"):SetInt(lua_sys.MenuSwipeComponent_SwipeModeFree)
			</event>
			<event name="onTick" params="component, element, dt">
				local swipeAnchor = element
				
				if(swipeAnchor) then
					local scrollOffset = component:scrollOffset()
					local anchorOffset = element.origXOffset + scrollOffset
				
					if(swipeAnchor:getOrientationPosition().x ~= anchorOffset) then
						
						swipeAnchor:setOrientationPosition(Vector2(anchorOffset, swipeAnchor("yOffset"):GetInt()))
						
						local scrollMarker = element:parent():E("ScrollMarker")
						
						--range without borders is [0, (scrollbarW-scrollMarkerW)]
						local markerMovementWidth = element:parent():E("ScrollBar"):absH() - (2*scrollMarker("markerBookend"):GetInt()) - scrollMarker:absH()
						
						local scrollMarkerXOffset = -(scrollOffset/component:scrollSize()) * markerMovementWidth
						scrollMarkerXOffset = clamp(scrollMarkerXOffset, 0, markerMovementWidth)
						
						scrollMarker("xOffset"):SetInt(scrollMarker.originalXOffset + scrollMarkerXOffset)
					end
				end
			</event>
			<event name="setScrollOffsetToMarker" params="component, element">
				component:setScrollOffset(element:parent():E("ScrollMarker")("scrollOffset"):GetFloat())
			</event>
		</swipeComponent>
		<touchComponent name="Touch">
			<size dependentOnElement="EggListBg" dependentOnComponent="Sprite" />
			<event name="onInit" params="component, element">
				component("singleTouch"):SetInt(1)
			</event>
		</touchComponent>
	</element>
	
	<element name="ScrollBar">
		<size dependentOnElement="element:name()" dependentOnComponent="Sprite" />
		<position relativeTo="EggListBg" vAnchor="BOTTOM" hAnchor="HCENTER" />
		<orientation vAnchor="BOTTOM" hAnchor="HCENTER" xOffset="0" yOffset="-20*game.menuScaleY()" priorityOffset="-1" />
		<spriteSheetComponent name="Sprite">
			<event name="onInit" params="component, element">
				component("spriteName"):SetString("scroll_bar_01")
				component("sheetName"):SetString("xml_resources/buttons01.xml")
				component("size"):SetFloat(0.5*game.menuScaleY())
				component("rotation"):SetFloat(-0.5*math.pi)
				component("layer"):SetString("MidPopUps")
			</event>
		</spriteSheetComponent>
	</element>
	
	<element name="ScrollMarker">
		<size dependentOnElement="element:name()" dependentOnComponent="Marker" />
		<position relativeTo="ScrollBar" vAnchor="VCENTER" hAnchor="HCENTER" />
		<orientation vAnchor="VCENTER" hAnchor="HCENTER" xOffset="0" yOffset="0" priorityOffset="-1" />
		<spriteSheetComponent name="Marker">
			<event name="onInit" params="component, element">
				component("useOffsets"):SetInt(1)
				component("spriteName"):SetString("scroll_bar_dot")
				component("sheetName"):SetString("xml_resources/buttons01.xml")
				component("size"):SetFloat(0.5*game.menuScaleY())
				component("rotation"):SetFloat(-0.5*math.pi)
				component("layer"):SetString("MidPopUps")
				element("markerBookend"):SetInt(7*game.menuScaleY())
			</event>
			<event name="onPostInit" params="component, element">
				element("xOffset"):SetInt(-element:parent():E("ScrollBar"):absH()/2 + element("markerBookend"):GetInt() + element:absH()/2)
				element.originalXOffset = element("xOffset"):GetInt()
			</event>
		</spriteSheetComponent>
		<touchComponent name="Touch">
			<size dependentOnElement="element:name()" dependentOnComponent="Marker" />
			<position relativeTo="PARENT" vAnchor="TOP" hAnchor="LEFT" />
			<orientation vAnchor="TOP" hAnchor="LEFT" xOffset="0" yOffset="0" priorityOffset="0" />
			<event name="onTouchDrag" params="component, element, x, y">
			
				local scrollBar = element:parent():E("ScrollBar")
				
				local scrollSize = 0
				if(element:parent():E("EggList")("scrollSize") ~= nil) then
					scrollSize = element:parent():E("EggList")("scrollSize"):GetFloat()
				end
				
				local fromLeftmostMarkerRange = x - scrollBar:absX() - element.originalXOffset
				local scrollOffset = -((fromLeftmostMarkerRange)*scrollSize)/(scrollBar:absH() - 2*element("markerBookend"):GetInt() - element:absH())
				
				scrollOffset = clamp(scrollOffset, -scrollSize, 0)
				
				element("scrollOffset"):SetFloat(scrollOffset)
				element:parent():E("EggList")["Swiper"]:DoStoredScript("setScrollOffsetToMarker")
			</event>
		</touchComponent>
	</element>
	
	<script src="scripts/BoxInventory.lua" />
</menu>
