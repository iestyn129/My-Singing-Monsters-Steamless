<?xml version="1.0" encoding="utf-8"?>
<menu xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="menu.xsd">
	
	<element name="FadedBG">
		<size dependentOnElement="element:name()" dependentOnComponent="Sprite" />
		<position relativeTo="SCREEN" vAnchor="VCENTER" hAnchor="HCENTER" />
		<orientation vAnchor="VCENTER" hAnchor="HCENTER" xOffset="0" yOffset="0" priorityOffset="3" />
		<spriteComponent name="Sprite">
			<event name="onInit" params="component, element">
				component("spriteName"):SetString("__BUILTIN__WHITE_TEXTURE")
				component:setScale(Vector2(lua_sys.screenWidth()*0.25, lua_sys.screenHeight()*0.25))
				component:setColor(0.0, 0.0, 0.0)
				component("alpha"):SetFloat(0.0)
				component("layer"):SetString("FrontPopUps")
			</event>
		</spriteComponent>
		<touchComponent name="Touch">
			<size dependentOnElement="element:name()" />
			<position relativeTo="element:name()" vAnchor="VCENTER" hAnchor="HCENTER" />
			<orientation vAnchor="VCENTER" hAnchor="HCENTER" xOffset="0" yOffset="0" priorityOffset="0" />
		</touchComponent>
	</element>
	
	<element name="bg">
		<size dependentOnElement="element:name()" dependentOnComponent="Sprite" />
		<position relativeTo="PARENT" vAnchor="VCENTER" hAnchor="HCENTER" />
		<orientation vAnchor="VCENTER" hAnchor="HCENTER" xOffset="-1*lua_sys.screenWidth()" yOffset="-15*game.hudScale()" priorityOffset="2" />
		<ninesliceComponent name="Sprite">
			<size w="370*game.menuScaleX()" h="230*game.menuScaleX()" />
			<event name="onInit" params="component, element">
				component("topHeight"):SetFloat(50.0)
				component("bottomHeight"):SetFloat(50.0)
				component("leftWidth"):SetFloat(50.0)
				component("rightWidth"):SetFloat(50.0)
				component("size"):SetFloat(0.5)
				component("includeBorder"):SetInt(1)
				component("spriteName"):SetString("gfx/menu/Black9SFrame50")
				component("layer"):SetString("FrontPopUps")
			</event>
		</ninesliceComponent>
		<spriteSheetComponent name="Flourish1">
			<position relativeTo="element:name()" vAnchor="TOP" hAnchor="LEFT" />
			<orientation vAnchor="TOP" hAnchor="LEFT" xOffset="7" yOffset="7" priorityOffset="-1" />
			<event name="onInit" params="component, element">
				component("spriteName"):SetString("menu_swirl_01")
				component("sheetName"):SetString("xml_resources/hud01.xml")
				component("size"):SetFloat(0.5*game.menuScaleX())
				component("layer"):SetString("FrontPopUps")
			</event>
		</spriteSheetComponent>
	</element>
	
	<element name="CloseButton">
		<size dependentOnElement="element:name()" dependentOnComponent="CloseImage" />
		<position relativeTo="bg" vAnchor="TOP" hAnchor="RIGHT" />
		<orientation vAnchor="VCENTER" hAnchor="HCENTER" xOffset="-20*game.hudScale()" yOffset="20*game.hudScale()" priorityOffset="-1" />
		<spriteSheetComponent name="CloseImage">
			<position relativeTo="element:name()" vAnchor="VCENTER" hAnchor="HCENTER" />
			<orientation vAnchor="VCENTER" hAnchor="HCENTER" xOffset="0" yOffset="0" priorityOffset="0" />
			<event name="onInit" params="component, element">
				component("spriteName"):SetString("button_bamboo_close")
				component("sheetName"):SetString("xml_resources/buttons01.xml")
				component("size"):SetFloat(0.5*game.hudScale())
				component("layer"):SetString("FrontPopUps")
			</event>
		</spriteSheetComponent>
		<touchComponent name="Touch">
			<size dependentOnElement="element:name()" dependentOnComponent="CloseImage" />
			<position relativeTo="element:name()" vAnchor="VCENTER" hAnchor="HCENTER" />
			<orientation vAnchor="VCENTER" hAnchor="HCENTER" xOffset="0" yOffset="0" priorityOffset="0" />
			<event name="onTouchDown" params="component, element">
				element["CloseImage"]:setColor(0.5, 0.5, 0.5)
			</event>
			<event name="onTouchUp" params="component, element">
				element["CloseImage"]:setColor(1.0, 1.0, 1.0)
				element:parent()("transitionState"):SetInt(2)
				element:parent().choice = 1
			</event>
			<event name="onTouchRelease" params="component, element">
				element["CloseImage"]:setColor(1.0, 1.0, 1.0)
			</event>
		</touchComponent>
		<event name="onInit" params="element">
			element("ButtonMapping"):SetInt(game.cancelButton())
			element("buttonDown"):SetInt(0)
			element:SetupGenericListener(game.engineReceiver(), "sys::msg::MsgKeyDown", "gotMsgKeyDown")
			element:SetupGenericListener(game.engineReceiver(), "sys::msg::MsgKeyUp", "gotMsgKeyUp")
		</event>		
		<event name="gotMsgKeyDown" params="element, msg">
			if(element("ButtonMapping"):GetInt() == msg.key.val and element["Touch"]("enabled"):GetInt() ~= 0 and element("buttonDown"):GetInt() == 0) then
				element["Touch"]("checkOnTop"):SetInt(0)
				if(element["Touch"]("onTop"):GetInt() == 1) then
					element("buttonDown"):SetInt(msg.key.val)
					element["Touch"]:DoStoredScript("onTouchDown")
				end
			end
		</event>
		<event name="gotMsgKeyUp" params="element, msg">
			if(element("ButtonMapping"):GetInt() == msg.key.val and element["Touch"]("enabled"):GetInt() ~= 0 and element("buttonDown"):GetInt() == msg.key.val) then
				element("buttonDown"):SetInt(0)
				element["Touch"]:DoStoredScript("onTouchUp")
			end
		</event>
	</element>
	
	<element name="TitleFrame">
		<size dependentOnElement="element:name()" dependentOnComponent="Sprite" />
		<position relativeTo="bg" vAnchor="TOP" hAnchor="HCENTER" />
		<orientation vAnchor="VCENTER" hAnchor="HCENTER" xOffset="0" yOffset="0" priorityOffset="-1" />
		<ninesliceComponent name="Sprite">
			<size w="175*game.hudScale()" h="50" />
			<event name="onInit" params="component, element">
				component("topHeight"):SetFloat(50.0)
				component("bottomHeight"):SetFloat(50.0)
				component("leftWidth"):SetFloat(50.0)
				component("rightWidth"):SetFloat(50.0)
				component("size"):SetFloat(0.5)
				component("includeBorder"):SetInt(1)
				component("spriteName"):SetString("gfx/menu/GreyTitleFrame")
				component("layer"):SetString("FrontPopUps")
			</event>
		</ninesliceComponent>
	</element>
	
	<element name="TitleLabel">
		<size dependentOnElement="element:name()" dependentOnComponent="Text" />
		<position relativeTo="TitleFrame" vAnchor="VCENTER" hAnchor="HCENTER" />
		<orientation vAnchor="VCENTER" hAnchor="HCENTER" xOffset="0" yOffset="0" priorityOffset="-1" />
		<textComponent name="Text">
			<size w="160*game.hudScale()" h="35" />
			<position relativeTo="element:name()" vAnchor="VCENTER" hAnchor="HCENTER" />
			<orientation vAnchor="VCENTER" hAnchor="HCENTER" xOffset="0" yOffset="0" priorityOffset="0" />
			<event name="onInit" params="component, element">
				component("multiline"):SetInt(0)
				component("font"):Set(game.getTitleFont())
				component:setColor(0.43, 0.98, 0.02)
				component("size"):SetFloat(0.45*game.hudScale())
				component("alignment"):SetInt(lua_sys.MenuTextComponent_TEXT_HCENTER_ALIGNED)
				component("text"):SetString(game.localizedUpper(game.getLocalizedText("CONFIRMATION_TITLE")))
				component("autoScale"):SetInt(1)
				component("layer"):SetString("FrontPopUps")
			</event>
		</textComponent>
	</element>
	
	<element name="Notification">
		<size dependentOnElement="element:name()" dependentOnComponent="Text" />
		<position relativeTo="bg" vAnchor="VCENTER" hAnchor="HCENTER" />
		<orientation vAnchor="VCENTER" hAnchor="HCENTER" xOffset="0" yOffset="-40*game.hudScale()" priorityOffset="-1" />
		<textComponent name="Text">
			<size w="300*game.menuScaleX()" h="120*game.menuScaleX()" />
			<position relativeTo="element:name()" vAnchor="VCENTER" hAnchor="HCENTER" />
			<orientation vAnchor="VCENTER" hAnchor="HCENTER" xOffset="0" yOffset="0" priorityOffset="0" />
			<event name="onInit" params="component, element">
				component("multiline"):SetInt(1)
				component("font"):Set(game.getTextFont())
				component("alignment"):SetInt(lua_sys.MenuTextComponent_TEXT_HCENTER_ALIGNED)
				component("text"):SetString("CONFIRMATION_PURCHASE_BOX_FILL_v2")
				component("size"):SetFloat(0.4*game.menuScaleX())
				component("layer"):SetString("FrontPopUps")
				component("autoScale"):SetInt(1)
			</event>
		</textComponent>
	</element>
	
	<element name="WildcardSwitch">
		<size dependentOnElement="element:name()" dependentOnComponent="Sprite" />
		<position relativeTo="Notification" vAnchor="BOTTOM" hAnchor="RIGHT" />
		<orientation vAnchor="VCENTER" hAnchor="RIGHT" xOffset="0" yOffset="40*game.hudScale()" priorityOffset="0" />
		<spriteSheetComponent name="Sprite">
			<position relativeTo="element:name()" vAnchor="VCENTER" hAnchor="RIGHT" />
			<orientation vAnchor="VCENTER" hAnchor="RIGHT" xOffset="0" yOffset="0" priorityOffset="0" />
			<event name="onInit" params="component, element">
				
				if(element:parent().preferWildcards == 0) then
					component("spriteName"):SetString("menu_switch_off")
				else
					component("spriteName"):SetString("menu_switch_on")
				end
				component("sheetName"):SetString("xml_resources/menu_assets_01.xml")
				component("size"):SetFloat(0.5*game.menuScaleX())
				component("layer"):SetString("FrontPopUps")
			</event>
		</spriteSheetComponent>
		
		<touchComponent name="Touch">
			<size dependentOnElement="element:name()" dependentOnComponent="Sprite" />
			<position relativeTo="element:name()" vAnchor="VCENTER" hAnchor="HCENTER" />
			<orientation vAnchor="VCENTER" hAnchor="HCENTER" xOffset="0" yOffset="0" priorityOffset="0" />
			<event name="onTouchDown" params="component, element">
				--element["Switch"]["Sprite"]:setColor(0.5, 0.5, 0.5)
				element:touchDownCallback()
			</event>
			<event name="onTouchUp" params="component, element">
				--element["Sprite"]:setColor(1.0, 1.0, 1.0)
				lua_sys.playSoundFx("audio/sfx/menu_click_small.wav")
				element:touchUpCallback()
			</event>
			<event name="onTouchRelease" params="component, element">
				--element["Sprite"]:setColor(1.0, 1.0, 1.0)
				element:touchReleaseCallback()
			</event>
		</touchComponent>
		<event name="touchUpCallback" params="element">
			if(element:parent().preferWildcards == 0) then
				element:parent().preferWildcards = 1
			else
				element:parent().preferWildcards = 0
			end
			
			game.updateBoxFillCost(element:parent().preferWildcards ~= 0)
			
			element:parent():update()
		</event>
		<event name="touchDownCallback" params="element">
		</event>
		<event name="touchReleaseCallback" params="element">
		</event>
		<event name="turnOn" params="element">
			element["Sprite"]("spriteName"):SetString("menu_switch_on")
		</event>
		<event name="turnOff" params="element">
			element["Sprite"]("spriteName"):SetString("menu_switch_off")
		</event>
	</element>
	
	<element name="UseWildcardText">
		<size dependentOnElement="element:name()" dependentOnComponent="Text" />
		<position relativeTo="Notification" vAnchor="BOTTOM" hAnchor="LEFT" />
		<orientation vAnchor="VCENTER" hAnchor="LEFT" xOffset="0" yOffset="40*game.hudScale()" priorityOffset="0" />
		<textComponent name="Text">
			<size w="230*game.menuScaleX()" h="120*game.menuScaleX()" />
			<position relativeTo="element:name()" vAnchor="VCENTER" hAnchor="LEFT" />
			<orientation vAnchor="VCENTER" hAnchor="LEFT" xOffset="0" yOffset="0" priorityOffset="0" />
			<event name="onInit" params="component, element">
				component("multiline"):SetInt(0)
				component("font"):Set(game.getTextFont())
				component("alignment"):SetInt(lua_sys.MenuTextComponent_TEXT_LEFT_ALIGNED)
				component("text"):SetString("PREFER_WILDCARD_COST_LABEL")
				component("size"):SetFloat(0.4*game.menuScaleX())
				component("layer"):SetString("FrontPopUps")
				component("autoScaleFactor"):SetFloat(0.05)
				component("autoScale"):SetInt(1)
			</event>
			<event name="onPostInit" params="component, element">
				--element("xOffset"):SetInt(-element:parent():E("WildcardSwitch"):C("Sprite")("width"):GetInt()/2)
			</event>
		</textComponent>
	</element>
	
	<element name="DiamondPrice">
		<size dependentOnElement="element:name()" dependentOnComponent="BackingSprite" />
		<position relativeTo="bg" vAnchor="BOTTOM" hAnchor="HCENTER" />
		<orientation vAnchor="VCENTER" hAnchor="HCENTER" xOffset="0" yOffset="0" priorityOffset="-1" />
		<spriteSheetComponent name="BackingSprite">
			<event name="onInit" params="component, element">
				<![CDATA[
					component("spriteName"):SetString("stats_bar")
					component("sheetName"):SetString("xml_resources/hud01.xml")
					component("size"):SetFloat(0.5*game.menuScaleX())
					component("layer"):SetString("FrontPopUps")
				]]>
			</event>
		</spriteSheetComponent>
		<aeComponent name="CurrencySprite">
			<position relativeTo="element:name()" vAnchor="VCENTER" hAnchor="LEFT" />
			<orientation vAnchor="VCENTER" hAnchor="HCENTER" xOffset="80*game.hudScale()" yOffset="0" priorityOffset="-1" />
			<event name="onInit" params="component, element">
				<![CDATA[
					component("animationName"):SetString("xml_bin/diamondAnim.bin")
					component("animation"):SetString("diamond")
					component:setScale(Vector2(0.16*game.menuScaleX(), 0.16*game.menuScaleX()))
					component("layer"):SetString("FrontPopUps")
				]]>
			</event>
		</aeComponent>
		<textComponent name="Text">
			<size w="65*game.menuScaleX()" h="50*game.menuScaleX()" />
			<position relativeTo="element:name()" vAnchor="VCENTER" hAnchor="HCENTER" />
			<orientation vAnchor="VCENTER" hAnchor="HCENTER" xOffset="5*game.menuScaleX()" yOffset="-2*game.menuScaleY()" priorityOffset="-1" />
			<event name="onInit" params="component, element">
				<![CDATA[
					component("multiline"):SetInt(0)
					component("autoScaleFactor"):SetFloat(0.01)
					component("autoScale"):SetInt(1)
					component("font"):Set(game.getTextFont())
					component("alignment"):SetInt(MenuTextComponent_TEXT_HCENTER_ALIGNED)
					component("size"):SetFloat(0.25*game.menuScaleX())
					component("text"):SetString("0")
					component("layer"):SetString("FrontPopUps")
					
					game.StoreContext_setDiamondTextColour(component)
				]]>
			</event>
		</textComponent>
		
	</element>
	
	<element name="Plus">
		<size dependentOnElement="element:name()" dependentOnComponent="Text" />
		<position relativeTo="DiamondPrice" vAnchor="VCENTER" hAnchor="HCENTER" />
		<orientation vAnchor="VCENTER" hAnchor="HCENTER" xOffset="-60*game.menuScaleX()" yOffset="-4*game.menuScaleY()" priorityOffset="0" />
		<textComponent name="Text">
			<size w="64*game.menuScaleX()" h="64*game.menuScaleX()" />
			<position relativeTo="element:name()" vAnchor="VCENTER" hAnchor="HCENTER" />
			<orientation vAnchor="VCENTER" hAnchor="HCENTER" xOffset="0" yOffset="0" priorityOffset="0" />
			<event name="onInit" params="component, element">
				<![CDATA[
					component("multiline"):SetInt(0)
					component("autoScaleFactor"):SetFloat(0.01)
					component("autoScale"):SetInt(1)
					component("font"):Set(game.getTextFont())
					component("alignment"):SetInt(MenuTextComponent_TEXT_HCENTER_ALIGNED)
					component("size"):SetFloat(0.4*game.menuScaleX())
					component("text"):SetString("+")
					component("layer"):SetString("FrontPopUps")
				]]>
			</event>
		</textComponent>
	</element>
	
	<template type="template_spritesheetbutton" name="BuyButton">
		<templateVar name="$upSpriteName" equals="'button_buy'" />
		<templateVar name="$sheetName" equals="'xml_resources/buttons01.xml'" />
		<templateVar name="$spriteScale" equals="0.5*game.menuScaleX()" />
		<templateVar name="$layer" equals="FrontPopUps" />
		<position relativeTo="DiamondPrice" vAnchor="VCENTER" hAnchor="RIGHT" />
		<orientation vAnchor="VCENTER" hAnchor="LEFT" xOffset="-20" yOffset="-5*game.hudScale()" priorityOffset="0" />
		
		<textComponent name="Text">
			<size w="65*game.menuScaleX()" />
			<position relativeTo="element:name()" vAnchor="VCENTER" hAnchor="HCENTER" />
			<orientation vAnchor="VCENTER" hAnchor="HCENTER" xOffset="8*game.menuScaleX()" yOffset="0" priorityOffset="-1" />
			<event name="onInit" params="component, element">
				<![CDATA[
					component("multiline"):SetInt(0)
					component("autoScale"):SetInt(1)
					component("autoScaleFactor"):SetFloat(0.01)
					component("font"):SetString(game.getTextFont())
					component("size"):SetFloat(0.25*game.menuScaleX())
					component("alignment"):SetInt(MenuTextComponent_TEXT_HCENTER_ALIGNED)
					component("text"):SetString("BUY_BUTTON")
					component("layer"):SetString("FrontPopUps")
				]]>
			</event>
		</textComponent>
		<touchComponent name="Touch">
			<event name="onTouchDown" params="component, element">
				<![CDATA[
					onTouchDown(component, element)
					element["Text"]:setColor(0.5, 0.5, 0.5)
				]]>
			</event>
			<event name="onTouchUp" params="component, element">
				<![CDATA[
					
					if(element:parent().notEnoughDiamonds and element:parent().notEnoughWildcards) then
						
						game.displayNotification("NOTIFICATION_NOT_ENOUGH_FOR_INV_FILL")
						
					elseif(element:parent().notEnoughDiamonds) then
					
						game.displayConfirmation("GET_DIAMONDS", "NOTIFICATION_NOT_ENOUGH_DIAMONDS")
					
					elseif(element:parent().notEnoughWildcards) then
					
						game.displayNotification("NOTIFICATION_NOT_ENOUGH_WILDCARDS")
					
					else
					
						onTouchUp(component, element)
						element["Text"]:setColor(1.0, 1.0, 1.0)
						element:parent()("transitionState"):SetInt(2)
						element:parent().choice = 2
					end
				]]>
			</event>
			<event name="onTouchRelease" params="component, element">
				<![CDATA[
					onTouchRelease(component, element)
					element["Text"]:setColor(1.0, 1.0, 1.0)
				]]>
			</event>
		</touchComponent>
	</template>
	
	<element name="WildcardPrice">
		<size dependentOnElement="element:name()" dependentOnComponent="BackingSprite" />
		<position relativeTo="Plus" vAnchor="VCENTER" hAnchor="HCENTER" />
		<orientation vAnchor="VCENTER" hAnchor="HCENTER" xOffset="-60*game.menuScaleX()" yOffset="4*game.menuScaleY()" priorityOffset="0" />
		<spriteSheetComponent name="BackingSprite">
			<position relativeTo="element:name()" vAnchor="TOP" hAnchor="LEFT" />
			<orientation vAnchor="TOP" hAnchor="LEFT" xOffset="0" yOffset="0" priorityOffset="0" />
			<event name="onInit" params="component, element">
				<![CDATA[
					component("spriteName"):SetString("stats_bar")
					component("sheetName"):SetString("xml_resources/hud01.xml")
					component("size"):SetFloat(0.5*game.menuScaleX())
					component("layer"):SetString("FrontPopUps")
				]]>
			</event>
		</spriteSheetComponent>
		<aeComponent name="CurrencySprite">
			<position relativeTo="element:name()" vAnchor="VCENTER" hAnchor="LEFT" />
			<orientation vAnchor="VCENTER" hAnchor="HCENTER" xOffset="80*game.hudScale()" yOffset="0" priorityOffset="-1" />
			<event name="onInit" params="component, element">
				<![CDATA[
					component("animationName"):SetString("xml_bin/Relic_confetti01.bin")
					component("animation"):SetString("wild card rotation")
					component:setScale(Vector2(0.16*game.menuScaleX(), 0.16*game.menuScaleX()))
					component("layer"):SetString("FrontPopUps")
				]]>
			</event>
		</aeComponent>
		<textComponent name="Text">
			<size w="65*game.menuScaleX()" h="50*game.menuScaleX()" />
			<position relativeTo="element:name()" vAnchor="VCENTER" hAnchor="HCENTER" />
			<orientation vAnchor="VCENTER" hAnchor="HCENTER" xOffset="5*game.menuScaleX()" yOffset="-2*game.menuScaleY()" priorityOffset="-1" />
			<event name="onInit" params="component, element">
				<![CDATA[
					component("multiline"):SetInt(0)
					component("autoScaleFactor"):SetFloat(0.01)
					component("autoScale"):SetInt(1)
					component("font"):Set(game.getTextFont())
					component("alignment"):SetInt(MenuTextComponent_TEXT_HCENTER_ALIGNED)
					component("size"):SetFloat(0.25*game.menuScaleX())
					component("text"):SetString("0")
					component("layer"):SetString("FrontPopUps")

					game.StoreContext_setEggWildcardTextColour(component)
				]]>
			</event>
		</textComponent>
	</element>
	
	<event name="onInit" params="element">
		element("transitionState"):SetInt(1)
		element("transitionTime"):SetFloat(0.0)
		
		element.choice = 0
		element.preferWildcards = 1
		
		element("diamondPrice"):SetInt(0)
		element("wildcardPrice"):SetInt(0)
		
		element.notEnoughDiamonds = false
		element.notEnoughWildcards = false

		lua_sys.playSoundFx("audio/sfx/menu_slide.wav")
	</event>
	
	<event name="update" params="element">
		if(element.preferWildcards == 0) then
			element:E("WildcardSwitch"):turnOff()
		else
			element:E("WildcardSwitch"):turnOn()
		end
		
		local diamondPrice = element("diamondPrice"):GetInt()
		local wildcardPrice = element("wildcardPrice"):GetInt()
		
		element:E("DiamondPrice"):C("Text"):V("text"):SetString(game.commaizeNumber(diamondPrice))
		element:E("WildcardPrice"):C("Text"):V("text"):SetString(game.commaizeNumber(wildcardPrice))

		if(diamondPrice > game.playerDiamonds()) then
			element.notEnoughDiamonds = true
		else
			element.notEnoughDiamonds = false
		end
		
		if(wildcardPrice > game.playerEggWildcards()) then
			element.notEnoughWildcards = true
		else
			element.notEnoughWildcards = false
		end
		
		if(element.notEnoughDiamonds or element.notEnoughWildcards) then
			element.BuyButton:disable()
			element.BuyButton.Touch:V("enabled"):SetInt(1)
		else
			element.BuyButton:enable()
		end
	</event>
	
	
	<event name="onTick" params="element, dt">
		<![CDATA[
			if(dt < game.maxTickTime()) then
				local transitionState = element("transitionState"):GetInt()
				
				if(transitionState ~= 0) then
					local transitionTime = element("transitionTime"):GetFloat()
					
					element:DoStoredScript("TickTransition")
					
					if(transitionState == 1) then
						transitionTime = (transitionTime + dt*3)
					elseif(transitionState == 2) then
						transitionTime = (transitionTime - dt*3)
					end
					
					transitionTime = clamp(transitionTime, 0.0, 1.0)
					
					element("transitionTime"):SetFloat(transitionTime)
					
					if(transitionTime >= 1.0) then
						element("transitionState"):SetInt(0)
						element("transitionTime"):SetFloat(1.0)
						element:DoStoredScript("TickTransition")
					elseif(transitionTime <= 0.0) then
					
						local textID = element["Notification"]["Text"]("text"):GetString()
						if string.match(textID, " ") then
							textID = ""
						end
						
						--close/cancel button pushed:
						if(element.choice == 1) then
							element:root():popPopUp()
							
						--BuyButton pushed
						elseif(element.choice == 2) then
							element:root():popPopUp()
							if(element.preferWildcards ~= 0) then
								game.submitConfirmation(element("messageID"):GetString(), true, textID)
							else
								game.submitConfirmation(element("messageID"):GetString(), false, textID)
							end
							
						end
					end
				end
			end
			
		]]>
	</event>
	
	<event name="TickTransition" params="element">
		local transitionTime = element("transitionTime"):GetFloat()
		element["bg"]("xOffset"):SetFloat(lua_sys.screenWidth()*(0.5) + (-0.5)*lua_sys.screenWidth()*(1/transitionTime))
		element["FadedBG"]["Sprite"]("alpha"):SetFloat(transitionTime*0.5)
	</event>
	
	<event name="queuePop" params="element">
		element("transitionState"):SetInt(2)
	</event>
	
</menu>