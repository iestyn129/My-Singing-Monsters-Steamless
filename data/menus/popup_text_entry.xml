<?xml version="1.0" encoding="utf-16"?>
<menu xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="menu.xsd">
	
	<element name="FadedBG">
		<size dependentOnElement="element:name()" dependentOnComponent="Sprite" />
		<position relativeTo="SCREEN" vAnchor="VCENTER" hAnchor="HCENTER" />
		<orientation vAnchor="VCENTER" hAnchor="HCENTER" xOffset="0" yOffset="0" priorityOffset="3" />
		<spriteComponent name="Sprite">
			<event name="onInit" params="component, element">
				component("spriteName"):SetString("__BUILTIN__WHITE_TEXTURE")
				component:setScale(Vector2(lua_sys.screenWidth()*0.25, lua_sys.screenHeight()*0.25))
				component:setColor(0.0, 0.0, 0.0)
				component("alpha"):SetFloat(0.0)
				component("layer"):SetString("FrontPopUps")
			</event>
		</spriteComponent>
		<touchComponent name="Touch">
			<size dependentOnElement="element:name()" />
			<position relativeTo="element:name()" vAnchor="VCENTER" hAnchor="HCENTER" />
			<orientation vAnchor="VCENTER" hAnchor="HCENTER" xOffset="0" yOffset="0" priorityOffset="0" />
		</touchComponent>
	</element>
	
	<element name="bg">
		<size dependentOnElement="element:name()" dependentOnComponent="Sprite" />
		<position relativeTo="PARENT" vAnchor="VCENTER" hAnchor="HCENTER" />
		<orientation vAnchor="VCENTER" hAnchor="HCENTER" xOffset="-1*lua_sys.screenWidth()" yOffset="-15*game.hudScale()" priorityOffset="2" />
		<ninesliceComponent name="Sprite">
			<size w="340*game.hudScale()" h="160*game.hudScale()" />
			<event name="onInit" params="component, element">
				component("topHeight"):SetFloat(50.0)
				component("bottomHeight"):SetFloat(50.0)
				component("leftWidth"):SetFloat(50.0)
				component("rightWidth"):SetFloat(50.0)
				component("size"):SetFloat(0.5)
				component("includeBorder"):SetInt(1)
				component("spriteName"):SetString("gfx/menu/Black9SFrame50")
				component("layer"):SetString("FrontPopUps")
				component("visible"):SetInt(1)
			</event>
		</ninesliceComponent>
		<spriteSheetComponent name="Flourish1">
			<position relativeTo="element:name()" vAnchor="TOP" hAnchor="LEFT" />
			<orientation vAnchor="TOP" hAnchor="LEFT" xOffset="7" yOffset="7" priorityOffset="-1" />
			<event name="onInit" params="component, element">
				component("spriteName"):SetString("menu_swirl_01")
				component("sheetName"):SetString("xml_resources/hud01.xml")
				component("size"):SetFloat(0.5*game.menuScaleX())
				component("layer"):SetString("FrontPopUps")
			</event>
		</spriteSheetComponent>
		<spriteSheetComponent name="Flourish2">
			<position relativeTo="element:name()" vAnchor="TOP" hAnchor="RIGHT" />
			<orientation vAnchor="TOP" hAnchor="RIGHT" xOffset="7" yOffset="10" priorityOffset="-1" />
			<event name="onInit" params="component, element">
				component("spriteName"):SetString("menu_swirl_02")
				component("sheetName"):SetString("xml_resources/hud01.xml")
				component("size"):SetFloat(0.5*game.menuScaleX())
				component("rotation"):SetFloat(-0.5*math.pi)
				component("layer"):SetString("FrontPopUps")
			</event>
		</spriteSheetComponent>
	</element>
	
	<element name="TitleFrame">
		<size dependentOnElement="element:name()" dependentOnComponent="Sprite" />
		<position relativeTo="bg" vAnchor="TOP" hAnchor="HCENTER" />
		<orientation vAnchor="VCENTER" hAnchor="HCENTER" xOffset="0" yOffset="0" priorityOffset="-1" />
		<ninesliceComponent name="Sprite">
			<size w="175*game.hudScale()" h="50" />
			<event name="onInit" params="component, element">
				component("topHeight"):SetFloat(50.0)
				component("bottomHeight"):SetFloat(50.0)
				component("leftWidth"):SetFloat(50.0)
				component("rightWidth"):SetFloat(50.0)
				component("size"):SetFloat(0.5)
				component("includeBorder"):SetInt(1)
				component("spriteName"):SetString("gfx/menu/GreyTitleFrame")
				component("layer"):SetString("FrontPopUps")
			</event>
		</ninesliceComponent>
	</element>
	
	<element name="TitleLabel">
		<size dependentOnElement="element:name()" dependentOnComponent="Text" />
		<position relativeTo="TitleFrame" vAnchor="VCENTER" hAnchor="HCENTER" />
		<orientation vAnchor="VCENTER" hAnchor="HCENTER" xOffset="0" yOffset="0" priorityOffset="-1" />
		<textComponent name="Text">
			<size w="160*game.hudScale()" h="35" />
			<position relativeTo="element:name()" vAnchor="VCENTER" hAnchor="HCENTER" />
			<orientation vAnchor="VCENTER" hAnchor="HCENTER" xOffset="0" yOffset="0" priorityOffset="0" />
			<event name="onInit" params="component, element">
				component("multiline"):SetInt(0)
				component("font"):Set(game.getTitleFont())
				component:setColor(0.43, 0.98, 0.02)
				component("size"):SetFloat(0.45*game.hudScale())
				component("alignment"):SetInt(lua_sys.MenuTextComponent_TEXT_HCENTER_ALIGNED)
				component("text"):SetString(game.localizedUpper(game.getLocalizedText("CONFIRMATION_TITLE")))
				component("autoScale"):SetInt(1)
				component("layer"):SetString("FrontPopUps")
			</event>
		</textComponent>
	</element>
	
	<element name="Description">
		<size dependentOnElement="element:name()" dependentOnComponent="Text" />
		<position relativeTo="bg" vAnchor="TOP" hAnchor="HCENTER" />
		<orientation vAnchor="VCENTER" hAnchor="HCENTER" xOffset="0" yOffset="40*game.menuScaleX()" priorityOffset="-2" />
		<textComponent name="Text">
			<size w="310*game.hudScale()"  h="150*game.hudScale()"/>
			<position relativeTo="element:name()" vAnchor="VCENTER" hAnchor="HCENTER" />
			<orientation vAnchor="VCENTER" hAnchor="HCENTER" xOffset="0" yOffset="0" priorityOffset="0" />
			<event name="onInit" params="component, element">
				component("multiline"):SetInt(1)
				component("font"):Set(game.getTextFont())
				component("size"):SetFloat(0.35*game.hudScale())
				component("alignment"):SetInt(lua_sys.MenuTextComponent_TEXT_HCENTER_ALIGNED)
				component("text"):SetString(game.getLocalizedText("ENTER_MONSTER_NAME"))
				component("autoScaleFactor"):SetFloat(0.01)
				component("autoScale"):SetInt(1)
				component("layer"):SetString("FrontPopUps")
			</event>
		</textComponent>
	</element>
	
<!--	<template type="template_spritesheetbutton" name="LikesButton">
		<templateVar name="$upSpriteName" equals="'button_long_green@2x'" />
		<templateVar name="$sheetName" equals="'xml_resources/buttons01.xml'" />
		<templateVar name="$spriteScale" equals="0.5*game.menuScaleX()" />
		<templateVar name="$text" equals="hello" />
		<templateVar name="$layer" equals="FrontPopUps" />
		<position relativeTo="bg" vAnchor="VCENTER" hAnchor="HCENTER" />
		<orientation vAnchor="VCENTER" hAnchor="HCENTER" xOffset="0" yOffset="0" priorityOffset="-2" />
	</template>-->
	
	<element name="TextEntry">
		<size dependentOnElement="element:name()" dependentOnComponent="Text" />
		<position relativeTo="bg" vAnchor="VCENTER" hAnchor="HCENTER" />
		<orientation vAnchor="VCENTER" hAnchor="HCENTER" xOffset="0" yOffset="0" priorityOffset="-1" />
		<textComponent name="Text">
			<size w="280*game.hudScale()" h="120*game.hudScale()" />
			<position relativeTo="element:name()" vAnchor="VCENTER" hAnchor="HCENTER" />
			<orientation vAnchor="VCENTER" hAnchor="HCENTER" xOffset="0" yOffset="0" priorityOffset="0" />
			<event name="onInit" params="component, element">
				component("multiline"):SetInt(0)
				component("font"):Set(game.getTextFont())
				component("alignment"):SetInt(lua_sys.MenuTextComponent_TEXT_HCENTER_ALIGNED)
				component("size"):SetFloat(0.4*game.hudScale())
				component("targetSize"):SetFloat(0.4*game.hudScale())
				component("layer"):SetString("FrontPopUps")
				component("autoScale"):SetInt(1)
			</event>
			<event name="moveDown" params="component, element">
				component("yOffset"):SetFloat(20*game.hudScale())
			</event>
		</textComponent>
		
		<textComponent name="Cursor">
			<size dependentOnElement="element:name()" dependentOnComponent="Text" />
			<position relativeTo="element:name()" component="Text" vAnchor="VCENTER" hAnchor="RIGHT" />
			<orientation vAnchor="VCENTER" hAnchor="LEFT" xOffset="2" yOffset="0" priorityOffset="0" />
			<event name="onInit" params="component, element">
				component("font"):Set(game.getTextFont())
				component("size"):SetFloat(0.3*game.hudScale())
				component("alignment"):SetInt(lua_sys.MenuTextComponent_TEXT_LEFT_ALIGNED)
				component("text"):SetString("|")
				component("visible"):SetInt(1)
				component("layer"):SetString("FrontPopUps")
			</event>
		</textComponent>
	
	</element>
	
	<!--<template type="template_textentry" name="TextEntry">
		<templateVar name="$upSpriteName" equals="'button_continue_green'" />
		<templateVar name="$spriteScale" equals="0.5*(game.menuScaleX())" />
		<templateVar name="$textScale" equals="0.3*(game.hudScale())" />
		<templateVar name="$layer" equals="FrontPopUps" />
		<position relativeTo="bg" vAnchor="VCENTER" hAnchor="HCENTER" />
		<orientation vAnchor="VCENTER" hAnchor="HCENTER" xOffset="0" yOffset="0" priorityOffset="-2" />
		<textComponent name="Text">
		<size dependentOnElement="element:name()" dependentOnComponent="UpSprite" />
			<position relativeTo="element:name()" vAnchor="VCENTER" hAnchor="HCENTER" />
			<orientation vAnchor="VCENTER" hAnchor="HCENTER" xOffset="0" yOffset="-3*game.hudScale()" priorityOffset="-2" />
			<event name="onInit" params="component, element">
				component("multiline"):SetInt(0)
				component("font"):Set(game.getTextFont())
				component("size"):SetFloat(0.3*game.hudScale())
				component("textPadding"):SetFloat(12.0*game.hudScale())
				component("alignment"):SetInt(lua_sys.MenuTextComponent_TEXT_HCENTER_ALIGNED)
				component("autoScale"):SetInt(1)
				component("text"):SetString(game.localizedUpper(game.getLocalizedText("CONFIRMATION_TITLE")))
				component("layer"):SetString("FrontPopUps")
			</event>
		</textComponent -->
	<!--	<touchComponent name="Touch">
			<event name="onTouchUp" params="component, element">
				element:parent()["Touch"]("enabled"):SetInt(1)
			</event>
		</touchComponent>-->
	<!--</template>-->

		<!--<touchComponent name="Touch">
		<size w="lua_sys.screenWidth()" h="lua_sys.screenHeight()" />
		<position relativeTo="PARENT" vAnchor="VCENTER" hAnchor="HCENTER" />
		<orientation vAnchor="VCENTER" hAnchor="HCENTER" xOffset="0" yOffset="0" priorityOffset="3" />
		<event name="onInit" params="element">
			element("enabled"):SetInt(0)
		</event>
		<event name="onTouchUp" params="component, element">
			element["TextEntry"]:DoStoredScript("deactivate")
			component("enabled"):SetInt(0)
		
		</event>
	</touchComponent>-->
	
	<template type="template_spritesheetbutton" name="YesButton">
		<hudScale scale="game.hudScale()" />
		<templateVar name="$text" equals="" />
		<templateVar name="$spriteScale" equals="0.5" />
		<templateVar name="$layer" equals="FrontPopUps" />
		<position relativeTo="bg" vAnchor="BOTTOM" hAnchor="LEFT" />
		<orientation vAnchor="VCENTER" hAnchor="HCENTER" xOffset="60/game.hudScale()" yOffset="-10/game.hudScale()" priorityOffset="-1" />
		<touchComponent name="Touch">
			<position relativeTo="element:name()" vAnchor="VCENTER" hAnchor="HCENTER" />
			<orientation vAnchor="VCENTER" hAnchor="HCENTER" xOffset="0" yOffset="0" priorityOffset="-1" />
			<event name="onTouchDown" params="component, element">
				onTouchDown(component, element)
				element["Overlay"]:setColor(0.5, 0.5, 0.5)
			</event>
			<event name="onTouchUp" params="component, element">
				onTouchUp(component, element)
				element["Overlay"]:setColor(1.0, 1.0, 1.0)
				element:parent()("transitionState"):SetInt(2)
				element:parent()("choice"):SetString("true")
			</event>
			<event name="onTouchRelease" params="component, element">
				onTouchRelease(component, element)
				element["Overlay"]:setColor(1.0, 1.0, 1.0)
			</event>
		</touchComponent>
		<spriteSheetComponent name="Overlay">
			<position relativeTo="element:name()" vAnchor="VCENTER" hAnchor="HCENTER" />
			<orientation vAnchor="VCENTER" hAnchor="HCENTER" xOffset="0" yOffset="0" priorityOffset="-1" />
			<event name="onInit" params="component, element">
				component("spriteName"):SetString("button_yes")
				component("sheetName"):SetString("xml_resources/context_buttons.xml")
				component("layer"):SetString("FrontPopUps")
				component("size"):SetFloat(0.5)
			</event>
		</spriteSheetComponent>
	</template>
	
	<template type="template_spritesheetbutton" name="NoButton">
		<hudScale scale="game.hudScale()" />
		<templateVar name="$text" equals="" />
		<templateVar name="$spriteScale" equals="0.5" />
		<templateVar name="$layer" equals="FrontPopUps" />
		<templateVar name="$buttonMapping" equals="game.cancelButton()" />
		<position relativeTo="bg" vAnchor="BOTTOM" hAnchor="RIGHT" />
		<orientation vAnchor="VCENTER" hAnchor="HCENTER" xOffset="-60/game.hudScale()" yOffset="-10/game.hudScale()" priorityOffset="-1" />
		<touchComponent name="Touch">
			<position relativeTo="element:name()" vAnchor="VCENTER" hAnchor="HCENTER" />
			<orientation vAnchor="VCENTER" hAnchor="HCENTER" xOffset="0" yOffset="0" priorityOffset="-1" />
			<event name="onTouchDown" params="component, element">
				onTouchDown(component, element)
				element["Overlay"]:setColor(0.5, 0.5, 0.5)
			</event>
			<event name="onTouchUp" params="component, element">
				onTouchUp(component, element)
				element["Overlay"]:setColor(1.0, 1.0, 1.0)
				element:parent()("transitionState"):SetInt(2)
				element:parent()("choice"):SetString("false")
			</event>
			<event name="onTouchRelease" params="component, element">
				onTouchRelease(component, element)
				element["Overlay"]:setColor(1.0, 1.0, 1.0)
			</event>
		</touchComponent>
		<spriteSheetComponent name="Overlay">
			<position relativeTo="element:name()" vAnchor="VCENTER" hAnchor="HCENTER" />
			<orientation vAnchor="VCENTER" hAnchor="HCENTER" xOffset="0" yOffset="0" priorityOffset="-1" />
			<event name="onInit" params="component, element">
				component("spriteName"):SetString("button_no")
				component("sheetName"):SetString("xml_resources/context_buttons.xml")
				component("layer"):SetString("FrontPopUps")
				component("size"):SetFloat(0.5)
			</event>
		</spriteSheetComponent>
	</template>
	
	<!--<element name="Sprite">
		<size dependentOnElement="element:name()" dependentOnComponent="Sprite" />
		<position relativeTo="bg" vAnchor="TOP" hAnchor="HCENTER" />
		<orientation vAnchor="VCENTER" hAnchor="HCENTER" xOffset="0" yOffset="58*game.hudScale()" priorityOffset="-1" />
		<spriteSheetComponent name="Sprite">
			<event name="onInit" params="component, element">
				component("spriteName"):SetString("food_01")
				component("sheetName"):SetString("xml_resources/hud01.xml")
				component("size"):SetFloat(0.75*game.hudScale())
				component("visible"):SetInt(0)
				component("layer"):SetString("FrontPopUps")
			</event>
		</spriteSheetComponent>
	</element>-->
	
	<event name="onInit" params="element">
		element("transitionState"):SetInt(1)
		element("transitionTime"):SetFloat(0.0)
		element("choice"):SetString("none")
		lua_sys.playSoundFx("audio/sfx/menu_slide.wav")
		
		element:setPositionBroadcast(true)
		element("locked"):SetInt(0)
		element("activated"):SetInt(1)
		element("cursorVisible"):SetInt(1)
		element("cursorTime"):SetFloat(0)
		element("cursorShowTime"):SetFloat(0.5)
		element("cursorHideTime"):SetFloat(0.2)
		element("lastKey"):SetInt(-1)
		element("charLimit"):SetInt(20)
		element:SetupGenericListener(game.engineReceiver(), "sys::msg::MsgKeyDown", "gotMsgKeyDown")
		element:SetupGenericListener(game.engineReceiver(), "sys::msg::MsgKeyUp", "gotMsgKeyUp")
		element:SetupGenericListener(game.engineReceiver(), "sys::msg::MsgKeyRepeat", "gotMsgKeyRepeat")
		element:SetupGenericListener(game.engineReceiver(), "sys::msg::MsgKeyChar", "gotMsgKeyChar")
	</event>

	

	<event name="onTick" params="element, dt">
		<![CDATA[
			if(dt < game.maxTickTime()) then
				local transitionState = element("transitionState"):GetInt()
				
				if(transitionState ~= 0) then
					local transitionTime = element("transitionTime"):GetFloat()
					
					element:DoStoredScript("TickTransition")
					
					if(transitionState == 1) then
						transitionTime = (transitionTime + dt*3)
					elseif(transitionState == 2) then
						transitionTime = (transitionTime - dt*3)
					end
					
					transitionTime = clamp(transitionTime, 0.0, 1.0)
					
					element("transitionTime"):SetFloat(transitionTime)
					
					if(transitionTime >= 1.0) then
						element("transitionState"):SetInt(0)
						element("transitionTime"):SetFloat(1.0)
						element:DoStoredScript("TickTransition")
					elseif(transitionTime <= 0.0) then
						if(element("choice"):GetString() == "true") then
							element:root():popPopUp()
							game.submitTextEntry(element("messageID"):GetString(), element:parent()["TextEntry"]["Text"]("text"):GetString(),true)
						else
							element:root():popPopUp()
							game.submitTextEntry(element("messageID"):GetString(), element:parent()["TextEntry"]["Text"]("text"):GetString(), false)
						end
					end
				end
			end
			
			if(element("activated"):GetInt() == 1 ) then
				local cursorVisible = element("cursorVisible"):GetInt()
				local cursorTime = element("cursorTime"):GetFloat()
				cursorTime = cursorTime + dt
				
				if( cursorVisible == 1)then
					if(cursorTime >= element("cursorShowTime"):GetFloat())then
						element("cursorVisible"):SetInt(0)
						cursorTime = 0
						element["TextEntry"]["Cursor"]("visible"):SetInt(0)
					end
				else
					if(cursorTime >= element("cursorHideTime"):GetFloat())then
						element("cursorVisible"):SetInt(1)
						cursorTime = 0
						element["TextEntry"]["Cursor"]("visible"):SetInt(1)
					end
				end
				element("cursorTime"):SetFloat(cursorTime)
			end
			
		]]>
	</event>
	
	<event name="TickTransition" params="element">
		local transitionTime = element("transitionTime"):GetFloat()
		element["bg"]("xOffset"):SetFloat(lua_sys.screenWidth()*(0.5) + (-0.5)*lua_sys.screenWidth()*(1/transitionTime))
		element["FadedBG"]["Sprite"]("alpha"):SetFloat(transitionTime*0.5)
	</event>
	
	<event name="queuePop" params="element">
		element("transitionState"):SetInt(2)
	</event>
	
	<event name="onPostInit" params="element">
		<![CDATA[
			element("text"):SetString(element["TextEntry"]["Text"]("text"):GetString())
			element["TextEntry"]["Cursor"]("size"):SetFloat(element["TextEntry"]["Text"]("size"):GetFloat())
		]]>
	</event>
	
	<event name="gotMsgKeyDown" params="element, msg">
	<![CDATA[	
		if(element("activated"):GetInt() == 1 ) then
			element("lastKey"):SetInt(msg.key.val)
			element("lastModKey"):SetInt(msg.modKey.val)
			element:DoStoredScript("doKeyActions")
		end
		]]>
	</event>

	<event name="gotMsgKeyUp" params="element, msg">
	<![CDATA[	
		if(element("activated"):GetInt() == 1 ) then
			element("lastKey"):SetInt(0)
			element("lastModKey"):SetInt(0)
		end
		]]>
	</event>		

	<event name="gotMsgKeyRepeat" params="element, msg">
	<![CDATA[	
		if(element("activated"):GetInt() == 1 ) then
			element("lastKey"):SetInt(msg.key.val)
			element("lastModKey"):SetInt(msg.modKey.val)
			element:DoStoredScript("doKeyActions")
		end
		]]>
	</event>
	
	<event name="gotMsgKeyChar" params="element, msg">
	<![CDATA[	
		if(element("activated"):GetInt() == 1 ) then
	
			local newChar = msg.inputChar
			local textEntered = element("text"):GetString()
			if( game.wcharCount(textEntered) < element("charLimit"):GetInt() and game.validInput(newChar)) then
			
				element("text"):SetString(textEntered..newChar)
				
				element["TextEntry"]["Text"]("text"):SetString(element("text"):GetString())
				element("cursorVisible"):SetInt(1)
				element["TextEntry"]["Cursor"]("visible"):SetInt(1)
				cursorTime = 0
				element["TextEntry"]["Cursor"]("size"):SetFloat(element["TextEntry"]["Text"]("size"):GetFloat())
			end
		end
		]]>
	</event>

<function name="doKeyActions" params="element">
		<![CDATA[
		local textEntered = element("text"):GetString()
		local key = element("lastKey"):GetInt()
		
		if(element("activated"):GetInt() == 1) then
		
			if(key == game.BackSpace and game.wcharCount(textEntered) > 0) then
			
				textEntered = game.removeWchar(textEntered)
				element("text"):SetString(textEntered)
				element["TextEntry"]["Text"]("text"):SetString(element("text"):GetString())
				element("cursorVisible"):SetInt(1)
				element["TextEntry"]["Cursor"]("visible"):SetInt(1)
				cursorTime = 0
				element["TextEntry"]["Cursor"]("size"):SetFloat(element["TextEntry"]["Text"]("size"):GetFloat())
				
			elseif(key == game.Enter) then
			
				element("activated"):SetInt(0)
				element("transitionState"):SetInt(2)
				element("choice"):SetString("true")
				
			elseif(key == game.V and element("lastModKey"):GetInt() == game.Control) then
			
				local newText = game.addClipboardText(element("text"):GetString(), element("charLimit"):GetInt())
				element("text"):SetString(newText)
				element["TextEntry"]["Text"]("text"):SetString(element("text"):GetString())
				element("cursorVisible"):SetInt(1)
				element["TextEntry"]["Cursor"]("visible"):SetInt(1)
				cursorTime = 0
				element["TextEntry"]["Cursor"]("size"):SetFloat(element["TextEntry"]["Text"]("size"):GetFloat())
				
			end		
		end
		]]>
	</function>		
	
</menu>