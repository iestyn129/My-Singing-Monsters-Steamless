<?xml version="1.0" encoding="utf-8"?>
<menu xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="menu.xsd">

	<element name="FadedBG">
		<size dependentOnElement="element:name()" dependentOnComponent="Sprite" />
		<position relativeTo="SCREEN" vAnchor="VCENTER" hAnchor="HCENTER" />
		<orientation vAnchor="VCENTER" hAnchor="HCENTER" xOffset="0" yOffset="0" priorityOffset="6" />
		<spriteComponent name="Sprite">
			<event name="onInit" params="component, element">
				component("spriteName"):SetString("__BUILTIN__WHITE_TEXTURE")
				component:setScale(Vector2(lua_sys.screenWidth()*0.25, lua_sys.screenHeight()*0.25))
				component:setColor(0.0, 0.0, 0.0)
				component("alpha"):SetFloat(0.5)
				component("layer"):SetString("Tutorial")
			</event>
		</spriteComponent>
		<touchComponent name="Touch">
			<size dependentOnElement="element:name()" />
			<position relativeTo="element:name()" vAnchor="VCENTER" hAnchor="HCENTER" />
			<orientation vAnchor="VCENTER" hAnchor="HCENTER" xOffset="0" yOffset="0" priorityOffset="-3" />
		</touchComponent>
	</element>
	
	<template type="template_fancywindow" name="bg">
		<templateVar name="$layer" equals="Tutorial" />
		<size dependentOnElement="element:name()" dependentOnComponent="Sprite" />
		<position relativeTo="PARENT" vAnchor="VCENTER" hAnchor="HCENTER" />
		<orientation vAnchor="VCENTER" hAnchor="HCENTER" xOffset="0" yOffset="-30*game.hudScale()" priorityOffset="2" />
	</template>
	
	<element name="Anim">
		<size dependentOnElement="element:name()" dependentOnComponent="Sprite" />
		<position relativeTo="bg" vAnchor="VCENTER" hAnchor="HCENTER" />
		<orientation vAnchor="VCENTER" hAnchor="HCENTER" xOffset="0" yOffset="0" priorityOffset="-1" />
		<aeComponent name="Sprite">
			<event name="onInit" params="component, element">
				component("animationName"):SetString("xml_bin/monster_c.bin")
				component("animation"):SetString("Store")
				component:setScale(Vector2(0.8*game.hudScale(),0.8*game.hudScale()))
				component("layer"):SetString("Tutorial")
				component("visible"):SetInt(0)
			</event>
			<event name="reposition" params="component, element">
				element:setPositionBroadcast(true)
				element:setOrientationPosition(Vector2(component:size().x / 2.0, component:size().y / 2.0 - 45*game.hudScale()))
			</event>
		</aeComponent>
	</element>
	
	<element name="Sprite">
		<size dependentOnElement="element:name()" dependentOnComponent="Sprite" />
		<position relativeTo="bg" vAnchor="TOP" hAnchor="HCENTER" />
		<orientation vAnchor="TOP" hAnchor="HCENTER" xOffset="0" yOffset="25*game.hudScale()" priorityOffset="-1" />
		<spriteSheetComponent name="Sprite">
			<event name="onInit" params="component, element">
				component("spriteName"):SetString(game.StoreContext_SPRITE_DIAMOND)
				component("sheetName"):SetString(game.StoreContext_CURRENCY_SPRITESHEET)
				component("size"):SetFloat(1.0*game.hudScale())
				component("visible"):SetInt(0)
				component("layer"):SetString("Tutorial")
			</event>
		</spriteSheetComponent>
	</element>
	
	<element name="Title">
		<size dependentOnElement="element:name()" dependentOnComponent="Text" />
		<position relativeTo="bg" vAnchor="TOP" hAnchor="HCENTER" />
		<orientation vAnchor="VCENTER" hAnchor="HCENTER" xOffset="0" yOffset="50*game.hudScale()" priorityOffset="-2" />
		<textComponent name="Text">
			<size w="320*game.hudScale()" h="75*game.hudScale()"/>
			<position relativeTo="element:name()" vAnchor="TOP" hAnchor="HCENTER" />
			<orientation vAnchor="TOP" hAnchor="HCENTER" xOffset="0" yOffset="0" priorityOffset="0" />
			<event name="onInit" params="component, element">
				component("alignment"):SetInt(lua_sys.MenuTextComponent_TEXT_HCENTER_ALIGNED)
				component("autoScale"):SetInt(1)
				component("font"):Set(game.getTextFont())
				component("text"):SetString("")
				component("size"):SetFloat(0.4*game.hudScale())
				component("layer"):SetString("Tutorial")
				component:setColor(0.43, 1.0, 0.25)
				component:calculatePosition()
			</event>
		</textComponent>
	</element>
	
	<element name="Text">
		<size dependentOnElement="element:name()" dependentOnComponent="Text" />
		<position relativeTo="bg" vAnchor="TOP" hAnchor="HCENTER" />
		<orientation vAnchor="TOP" hAnchor="HCENTER" xOffset="0" yOffset="90*game.hudScale()" priorityOffset="-2" />
		<textComponent name="Text">
			<size w="210*game.hudScale()" h="113*game.hudScale()" />
			<position relativeTo="element:name()" vAnchor="TOP" hAnchor="HCENTER" />
			<orientation vAnchor="TOP" hAnchor="HCENTER" xOffset="0" yOffset="0" priorityOffset="0" />
			<event name="onInit" params="component, element">
				component("multiline"):SetInt(1)
				component("autoScale"):SetInt(1)
				component("alignment"):SetInt(lua_sys.MenuTextComponent_TEXT_HCENTER_ALIGNED)
				component("textPadding"):SetInt(0)
				component("font"):Set(game.getTextFont())
				component("text"):SetString("")
				
				component("size"):SetFloat(0.28*game.hudScale())
				
				component("layer"):SetString("Tutorial")
				component:calculatePosition()
			</event>
			<event name="moveDown" params="component, element">
				element:setPositionBroadcast(true)
				element:setPosition(Vector2(component:position().x, component:position().y + (30*game.hudScale())))
			</event>
		</textComponent>
	</element>
	
	<element name="Monster">
		<size dependentOnElement="element:name()" dependentOnComponent="Sprite" />
		<position relativeTo="bg" vAnchor="BOTTOM" hAnchor="LEFT" />
		<orientation vAnchor="BOTTOM" hAnchor="LEFT" xOffset="0" yOffset="0" priorityOffset="-2" />
		<aeComponent name="Sprite">
			<event name="onInit" params="component, element">
				component("animationName"):SetString("xml_bin/monster_c.bin")
				component("animation"):SetString("Idle")
				component:setScale(Vector2(0.8*game.hudScale(),0.8*game.hudScale()))
				component("layer"):SetString("Tutorial")
			</event>
			<event name="onPostInit" params="component, element">
				element:setOrientationPosition(Vector2(45*game.hudScale(), -component:size().y + 25*game.hudScale()))
			</event>
		</aeComponent>
	</element>
	
	<element name="Monster2">
		<size dependentOnElement="element:name()" dependentOnComponent="Sprite" />
		<position relativeTo="bg" vAnchor="BOTTOM" hAnchor="RIGHT" />
		<orientation vAnchor="BOTTOM" hAnchor="LEFT" xOffset="0" yOffset="0" priorityOffset="-2" />
		<aeComponent name="Sprite">
			<event name="onInit" params="component, element">
				component("animationName"):SetString("xml_bin/monster_e.bin")
				component("animation"):SetString("Idle")
				component:setScale(Vector2(0.8*game.hudScale(),0.8*game.hudScale()))
				component("layer"):SetString("Tutorial")
			</event>
			<event name="onPostInit" params="component, element">
				element:setOrientationPosition(Vector2(-45*game.hudScale(), -component:size().y + 10*game.hudScale()))
			</event>
		</aeComponent>
	</element>

	<template type="template_spritesheetbutton" name="OkayButton">
		<templateVar name="$upSpriteName" equals="button_continue_green" />
		<templateVar name="$sheetName" equals="'xml_resources/buttons01.xml'" />
		<templateVar name="$spriteScale" equals="0.5*game.hudScale()" />
		<templateVar name="$text" equals="CONTINUE" />
		<templateVar name="$textPadding" equals="6*game.hudScale()" />
		<templateVar name="$textYOffset" equals="0" />
		<templateVar name="$layer" equals="Tutorial" />
		<position relativeTo="bg" vAnchor="BOTTOM" hAnchor="HCENTER" />
		<orientation vAnchor="TOP" hAnchor="HCENTER" xOffset="0" yOffset="0" priorityOffset="0" />
		<touchComponent name="Touch">
			<event name="onTouchUp" params="component, element">
				onTouchUp(component, element)
				element:root():GetReceiver():Send(game.MsgNextTutorialStep())
			</event>
		</touchComponent>
		<event name="onPostInit" params="element">
			element["Text"]("size"):SetFloat(0.25*game.hudScale())
			element["Text"]("autoScale"):SetInt(1)
		</event>
	</template>

	<template type="template_spritesheetbutton" name="LogInButton">
		<templateVar name="$upSpriteName" equals="button_purple_big" />
		<templateVar name="$sheetName" equals="'xml_resources/buttons01.xml'" />
		<templateVar name="$spriteScale" equals="0.5*game.hudScale()" />
		<templateVar name="$text" equals="LOGIN_NOW" />
		<templateVar name="$textPadding" equals="6*game.hudScale()" />
		<templateVar name="$textYOffset" equals="0" />
		<templateVar name="$layer" equals="Tutorial" />
		<position relativeTo="PARENT" vAnchor="BOTTOM" hAnchor="LEFT" />
		<orientation vAnchor="BOTTOM" hAnchor="LEFT" xOffset="40*game.menuScaleX()" yOffset="20*game.menuScaleX()" priorityOffset="2" />
		<touchComponent name="Touch">
			<event name="onTouchUp" params="component, element">
				onTouchUp(component, element)
				game.logEvent("popup_tutorial", "action", "logout")
				game.logout()
			</event>
		</touchComponent>
		<event name="onPostInit" params="element">
			element["Text"]("size"):SetFloat(0.25*game.hudScale())
			element["Text"]("autoScaleFactor"):SetFloat(0.01)
			element["Text"]("autoScale"):SetInt(1)
		</event>
	</template>
	
	<element name="HaveAcctText">
		<size dependentOnElement="element:name()" dependentOnComponent="Text" />
		<position relativeTo="LogInButton" vAnchor="TOP" hAnchor="HCENTER" />
		<orientation vAnchor="BOTTOM" hAnchor="HCENTER" xOffset="0" yOffset="0" priorityOffset="0" />
		<textComponent name="Text">
			<size w="210*game.hudScale()" h="113*game.hudScale()" />
			<position relativeTo="element:name()" vAnchor="BOTTOM" hAnchor="HCENTER" />
			<orientation vAnchor="BOTTOM" hAnchor="HCENTER" xOffset="0" yOffset="0" priorityOffset="0" />
			<event name="onInit" params="component, element">
				component("multiline"):SetInt(1)
				component("autoScale"):SetInt(1)
				component("alignment"):SetInt(lua_sys.MenuTextComponent_TEXT_HCENTER_ALIGNED)
				component("textPadding"):SetInt(0)
				component("font"):Set(game.getTextFont())
				component("text"):SetString("HAVE_ACCT")
				
				component("size"):SetFloat(0.28*game.hudScale())
				
				component("layer"):SetString("Tutorial")
			</event>
		</textComponent>
	</element>
	
	
	<element name="Earth">
		<size dependentOnElement="element:name()" dependentOnComponent="Sprite" />
		<position relativeTo="bg" vAnchor="TOP" hAnchor="HCENTER" />
		<orientation vAnchor="TOP" hAnchor="HCENTER" xOffset="0" yOffset="35*game.hudScale()" priorityOffset="-1" />
		<spriteSheetComponent name="Sprite">
			<event name="onInit" params="component, element">
				component("spriteName"):SetString("gene_earth")
				component("sheetName"):SetString("xml_resources/hud02.xml")
				component("size"):SetFloat(0.5*game.hudScale())
				component("visible"):SetInt(0)
				component("layer"):SetString("Tutorial")
			</event>
		</spriteSheetComponent>
	</element>
	
	<element name="Cold">
		<size dependentOnElement="element:name()" dependentOnComponent="Sprite" />
		<position relativeTo="Earth" vAnchor="VCENTER" hAnchor="LEFT" />
		<orientation vAnchor="VCENTER" hAnchor="RIGHT" xOffset="0" yOffset="0" priorityOffset="0" />
		<spriteSheetComponent name="Sprite">
			<event name="onInit" params="component, element">
				component("spriteName"):SetString("gene_cold")
				component("sheetName"):SetString("xml_resources/hud02.xml")
				component("size"):SetFloat(0.5*game.hudScale())
				component("visible"):SetInt(0)
				component("layer"):SetString("Tutorial")
			</event>
		</spriteSheetComponent>
	</element>
	
	<element name="Air">
		<size dependentOnElement="element:name()" dependentOnComponent="Sprite" />
		<position relativeTo="Cold" vAnchor="VCENTER" hAnchor="LEFT" />
		<orientation vAnchor="VCENTER" hAnchor="RIGHT" xOffset="0" yOffset="0" priorityOffset="0" />
		<spriteSheetComponent name="Sprite">
			<event name="onInit" params="component, element">
				component("spriteName"):SetString("gene_air")
				component("sheetName"):SetString("xml_resources/hud02.xml")
				component("size"):SetFloat(0.5*game.hudScale())
				component("visible"):SetInt(0)
				component("layer"):SetString("Tutorial")
			</event>
		</spriteSheetComponent>
	</element>
	
	<element name="Plant">
		<size dependentOnElement="element:name()" dependentOnComponent="Sprite" />
		<position relativeTo="Earth" vAnchor="VCENTER" hAnchor="RIGHT" />
		<orientation vAnchor="VCENTER" hAnchor="LEFT" xOffset="0" yOffset="0" priorityOffset="0" />
		<spriteSheetComponent name="Sprite">
			<event name="onInit" params="component, element">
				component("spriteName"):SetString("gene_plant")
				component("sheetName"):SetString("xml_resources/hud02.xml")
				component("size"):SetFloat(0.5*game.hudScale())
				component("visible"):SetInt(0)
				component("layer"):SetString("Tutorial")
			</event>
		</spriteSheetComponent>
	</element>
	
	<element name="Water">
		<size dependentOnElement="element:name()" dependentOnComponent="Sprite" />
		<position relativeTo="Plant" vAnchor="VCENTER" hAnchor="RIGHT" />
		<orientation vAnchor="VCENTER" hAnchor="LEFT" xOffset="0" yOffset="0" priorityOffset="0" />
		<spriteSheetComponent name="Sprite">
			<event name="onInit" params="component, element">
				component("spriteName"):SetString("gene_water")
				component("sheetName"):SetString("xml_resources/hud02.xml")
				component("size"):SetFloat(0.5*game.hudScale())
				component("visible"):SetInt(0)
				component("layer"):SetString("Tutorial")
			</event>
		</spriteSheetComponent>
	</element>
	
	<element name="Emote2">
		<size dependentOnElement="element:name()" dependentOnComponent="Sprite" />
		<position relativeTo="bg" vAnchor="TOP" hAnchor="HCENTER" />
		<orientation vAnchor="TOP" hAnchor="RIGHT" xOffset="0" yOffset="35*game.hudScale()" priorityOffset="-1" />
		<spriteSheetComponent name="Sprite">
			<event name="onInit" params="component, element">
				component("spriteName"):SetString("emote02")
				component("sheetName"):SetString("xml_resources/hud01.xml")
				component("size"):SetFloat(0.5*game.hudScale())
				component("visible"):SetInt(0)
				component("layer"):SetString("Tutorial")
			</event>
		</spriteSheetComponent>
	</element>
	
	<element name="Emote3">
		<size dependentOnElement="element:name()" dependentOnComponent="Sprite" />
		<position relativeTo="bg" vAnchor="TOP" hAnchor="HCENTER" />
		<orientation vAnchor="TOP" hAnchor="LEFT" xOffset="0" yOffset="35*game.hudScale()" priorityOffset="-1" />
		<spriteSheetComponent name="Sprite">
			<event name="onInit" params="component, element">
				component("spriteName"):SetString("emote03")
				component("sheetName"):SetString("xml_resources/hud01.xml")
				component("size"):SetFloat(0.5*game.hudScale())
				component("visible"):SetInt(0)
				component("layer"):SetString("Tutorial")
			</event>
		</spriteSheetComponent>
	</element>
	
	<element name="Emote1">
		<size dependentOnElement="element:name()" dependentOnComponent="Sprite" />
		<position relativeTo="Emote2" vAnchor="VCENTER" hAnchor="LEFT" />
		<orientation vAnchor="VCENTER" hAnchor="RIGHT" xOffset="0" yOffset="0" priorityOffset="0" />
		<spriteSheetComponent name="Sprite">
			<event name="onInit" params="component, element">
				component("spriteName"):SetString("emote01")
				component("sheetName"):SetString("xml_resources/hud01.xml")
				component("size"):SetFloat(0.5*game.hudScale())
				component("visible"):SetInt(0)
				component("layer"):SetString("Tutorial")
			</event>
		</spriteSheetComponent>
	</element>
	
	<element name="Emote4">
		<size dependentOnElement="element:name()" dependentOnComponent="Sprite" />
		<position relativeTo="Emote3" vAnchor="VCENTER" hAnchor="RIGHT" />
		<orientation vAnchor="VCENTER" hAnchor="LEFT" xOffset="0" yOffset="0" priorityOffset="0" />
		<spriteSheetComponent name="Sprite">
			<event name="onInit" params="component, element">
				component("spriteName"):SetString("emote04")
				component("sheetName"):SetString("xml_resources/hud01.xml")
				component("size"):SetFloat(0.5*game.hudScale())
				component("visible"):SetInt(0)
				component("layer"):SetString("Tutorial")
			</event>
		</spriteSheetComponent>
	</element>
	
	<element name="Functions">
		<event name="showElements" params="element">
			element:root()["Earth"]["Sprite"]("visible"):SetInt(1)
			element:parent()["Water"]["Sprite"]("visible"):SetInt(1)
			element:parent()["Air"]["Sprite"]("visible"):SetInt(1)
			element:parent()["Plant"]["Sprite"]("visible"):SetInt(1)
			element:parent()["Cold"]["Sprite"]("visible"):SetInt(1)
		</event>
		<event name="showEmotes" params="element">
			element:root()["Emote1"]["Sprite"]("visible"):SetInt(1)
			element:parent()["Emote2"]["Sprite"]("visible"):SetInt(1)
			element:parent()["Emote3"]["Sprite"]("visible"):SetInt(1)
			element:parent()["Emote4"]["Sprite"]("visible"):SetInt(1)
		</event>
	</element>
	
	<event name="queuePop" params="element">
		element:root():popPopUp()
	</event>
	
</menu>