<?xml version="1.0" encoding="utf-8"?>
<menu xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="menu.xsd">

	<element name="FadedBG">
		<size dependentOnElement="element:name()" dependentOnComponent="Sprite" />
		<position relativeTo="SCREEN" vAnchor="VCENTER" hAnchor="HCENTER" />
		<orientation vAnchor="VCENTER" hAnchor="HCENTER" xOffset="0" yOffset="0" priorityOffset="7" />
		<spriteComponent name="Sprite">
			<event name="onInit" params="component, element">
				component("spriteName"):SetString("__BUILTIN__WHITE_TEXTURE")
				component:setScale(Vector2(lua_sys.screenWidth()*0.25, lua_sys.screenHeight()*0.25))
				component:setColor(0.0, 0.0, 0.0)
				component("alpha"):SetFloat(0.0)
				component("layer"):SetString("MidPopUps")
			</event>
		</spriteComponent>
		<touchComponent name="Touch">
			<size dependentOnElement="element:name()" />
			<position relativeTo="element:name()" vAnchor="VCENTER" hAnchor="HCENTER" />
			<orientation vAnchor="VCENTER" hAnchor="HCENTER" xOffset="0" yOffset="0" priorityOffset="15" />
		</touchComponent>
	</element>

	<element name="bg">
		<size dependentOnElement="element:name()" dependentOnComponent="Sprite" />
		<position relativeTo="PARENT" vAnchor="VCENTER" hAnchor="HCENTER" />
		<orientation vAnchor="VCENTER" hAnchor="HCENTER" xOffset="-1*lua_sys.screenWidth()" yOffset="-15" priorityOffset="6" />
		<ninesliceComponent name="Sprite">
			<size w="440*game.menuScaleX()" h="225*game.menuScaleY()" />
			<event name="onInit" params="component, element">
				component("topHeight"):SetFloat(50.0)
				component("bottomHeight"):SetFloat(50.0)
				component("leftWidth"):SetFloat(50.0)
				component("rightWidth"):SetFloat(50.0)
				component("includeBorder"):SetInt(1)
				component("size"):SetFloat(0.5)
				component("spriteName"):SetString("gfx/menu/Black9SFrame50")
				component("layer"):SetString("MidPopUps")
			</event>
		</ninesliceComponent>
		<spriteSheetComponent name="Flourish1">
			<position relativeTo="element:name()" vAnchor="TOP" hAnchor="LEFT" />
			<orientation vAnchor="TOP" hAnchor="LEFT" xOffset="7" yOffset="7" priorityOffset="-2" />
			<event name="onInit" params="component, element">
				component("spriteName"):SetString("menu_swirl_01")
				component("sheetName"):SetString("xml_resources/hud01.xml")
				component("size"):SetFloat(0.5*game.menuScaleX())
				component("layer"):SetString("MidPopUps")
			</event>
		</spriteSheetComponent>
		<spriteSheetComponent name="Flourish2">
			<position relativeTo="element:name()" vAnchor="TOP" hAnchor="RIGHT" />
			<orientation vAnchor="TOP" hAnchor="RIGHT" xOffset="7" yOffset="10" priorityOffset="-2" />
			<event name="onInit" params="component, element">
				component("spriteName"):SetString("menu_swirl_02")
				component("sheetName"):SetString("xml_resources/hud01.xml")
				component("size"):SetFloat(0.5*game.menuScaleX())
				component("rotation"):SetFloat(-0.5*math.pi)
				component("layer"):SetString("MidPopUps")
			</event>
		</spriteSheetComponent>
	</element>

	<element name="TitleFrame">
		<size dependentOnElement="element:name()" dependentOnComponent="Sprite" />
		<position relativeTo="bg" vAnchor="TOP" hAnchor="HCENTER" />
		<orientation vAnchor="VCENTER" hAnchor="HCENTER" xOffset="0" yOffset="-3*game.hudScale()" priorityOffset="-3" />
		<ninesliceComponent name="Sprite">
			<size w="200*game.menuScaleX()" h="50*game.hudScale()" />
			<event name="onInit" params="component, element">
				component("topHeight"):SetFloat(44.0)
				component("bottomHeight"):SetFloat(44.0)
				component("leftWidth"):SetFloat(50.0)
				component("rightWidth"):SetFloat(50.0)
				component("size"):SetFloat(0.5)
				component("includeBorder"):SetInt(1)
				component("spriteName"):SetString("gfx/menu/GreyTitleFrame")
				component("layer"):SetString("MidPopUps")
			</event>
		</ninesliceComponent>
		<spriteSheetComponent name="LeftEnd">
			<position relativeTo="element:name()" vAnchor="VCENTER" hAnchor="LEFT" />
			<orientation vAnchor="VCENTER" hAnchor="HCENTER" xOffset="-7*game.menuScaleX()" yOffset="0" priorityOffset="1" />
			<event name="onInit" params="component, element">
				component("spriteName"):SetString("bookend_monsters")
				component("sheetName"):SetString("xml_resources/store_elements.xml")
				component("size"):SetFloat(lua_sys.screenWidth()/1024.0)
				component("layer"):SetString("MidPopUps")
			</event>
		</spriteSheetComponent>
		<spriteSheetComponent name="RightEnd">
			<position relativeTo="element:name()" vAnchor="VCENTER" hAnchor="RIGHT" />
			<orientation vAnchor="VCENTER" hAnchor="HCENTER" xOffset="7*game.menuScaleX()" yOffset="0" priorityOffset="1" />
			<event name="onInit" params="component, element">
				component("spriteName"):SetString("bookend_monsters")
				component("sheetName"):SetString("xml_resources/store_elements.xml")
				component("hFlip"):SetInt(1)
				component("size"):SetFloat(lua_sys.screenWidth()/1024.0)
				component("layer"):SetString("MidPopUps")
			</event>
		</spriteSheetComponent>
		<textComponent name="Text">
			<size w="160*game.menuScaleX()" h="50*game.hudScale()" />
			<position relativeTo="element:name()" vAnchor="VCENTER" hAnchor="HCENTER" />
			<orientation vAnchor="VCENTER" hAnchor="HCENTER" xOffset="0" yOffset="0" priorityOffset="-1" />
			<event name="onInit" params="component, element">
				<![CDATA[
					component("multiline"):SetInt(0)
					component("font"):Set(game.getTitleFont())
					component("size"):SetFloat(0.45*game.hudScale())
					component("alignment"):SetInt(lua_sys.MenuTextComponent_TEXT_HCENTER_ALIGNED)
					component:setColor(1.0, 0.9, 0.09)
					component("text"):SetString("MENU_GYM")
					component("autoScale"):SetInt(1)
					component("layer"):SetString("MidPopUps")
				]]>
			</event>
		</textComponent>
	</element>

	<element name="GuestList">
		<size w="440*game.menuScaleX()" h="(220*game.menuScaleY())-60" />
		<position relativeTo="bg" vAnchor="BOTTOM" hAnchor="HCENTER" />
		<orientation vAnchor="BOTTOM" hAnchor="HCENTER" xOffset="0" yOffset="0" priorityOffset="0" />
		<swipeComponent name="Swiper">
			<event name="onPostInit" params="component, element">
				component:DoStoredScript("refresh")
			</event>
			<function name="refresh" params="component, element">
				<![CDATA[
					component:GetVar("direction"):SetInt(lua_sys.MenuSwipeComponent_SwipeDirectionHorizontal)
					component:GetVar("mode"):SetInt(lua_sys.MenuSwipeComponent_SwipeModeFree)
					component:GetVar("tSteps"):SetFloat(25.0)
					component:listenToTouches(element)

					if(element:GetElement(element("FirstItem"):GetString())) then
						local width = element:GetElement(element("FirstItem"):GetString()):absW() * element("numItems"):GetInt()
						if(width > element:absW()) then
							component:setScrollSize(width - element:absW())
						else
							component:setScrollSize(0)
						end
					end

					--[[setScrollOffset to reduce big ugly flicker]]
					component:setScrollOffset(0)
				]]>
			</function>
			<event name="onTick" params="component, element, dt">
				local first = element:GetElement(element("FirstItem"):GetString())

				if(first) then
					local offset = component:scrollOffset()

					if(first:getOrientationPosition().x ~= offset) then
						first:setOrientationPosition(Vector2(offset, first("yOffset"):GetInt()))
					end
				end
			</event>
		</swipeComponent>
		<event name="onInit" params="element">
			element("FirstItem"):SetString("")
			element:DoStoredScript("populate")
		</event>

		<event name="repopulate" params="element">
			<![CDATA[
				local numItems = element("numItems"):GetInt()
				for i=0,numItems-1 do
					local storedItem = element:GetElement("monster"..i)
					if(storedItem ~= nil) then
						element:RemoveElement(storedItem)
					end
					
					local emptyItem = element:GetElement("empty"..i)
					if(emptyItem ~= nil) then
						element:RemoveElement(emptyItem)
					end
				end

				element:DoStoredScript("populate")
				element["Swiper"]:DoStoredScript("refresh")
			]]>
		</event>

		<event name="populate" params="element">
			<![CDATA[
				local previous = nil
				local monsters = game.getMonstersInGym()

				local currentGymCapacity = game.getGymCapacity()
				local gymCapacities = game.getAllGymCapacities()
				local gymLevel = 1
				for i=0, gymCapacities:size()-1 do
					if(game.getGymCapacity() > gymCapacities[i]) then
						gymLevel = gymLevel + 1
					end
				end

				print("currentGymCapacity: " .. currentGymCapacity)
				local maxGymCapacity = gymCapacities[gymCapacities:size() - 1]
				print("maxGymCapacity " .. maxGymCapacity)
				for i=0, maxGymCapacity - 1 do
					if(i < monsters:size()) then
						local monsterid = monsters[i]

						local monsterEntry = menu:addTemplateElement("template_battle_gym_entry", "monster"..i, element)

						monsterEntry("MonsterId"):SetInt(monsterid)
						monsterEntry("SpriteName"):SetString("portrait_frame")
						monsterEntry("SheetName"):SetString("xml_resources/hud01.xml")
						monsterEntry("ItemTitle"):SetString(game.getMonsterName(monsterid))
						monsterEntry("AnimationFile"):SetString(game.getMonsterAnimationFile(monsterid))

						if(game.isActiveBoxMonster(monsterid)) then
							monsterEntry("IsBoxMonster"):SetInt(1);
						else
							monsterEntry("IsBoxMonster"):SetInt(0);
						end

						monsterEntry("AnimationName"):SetString(game.getMonsterAnimationName(monsterid))
						monsterEntry("ID"):SetInt(monsterid)

						if(previous == nil) then
							monsterEntry:relativeTo(element)
							monsterEntry:setOrientation(lua_sys.MenuOrientation(13 * game.menuScaleX(), -30, 18, lua_sys.LEFT, lua_sys.VCENTER))
							monsterEntry:setRelativeObjectAnchors(lua_sys.LEFT, lua_sys.VCENTER)
							element("FirstItem"):SetString(monsterEntry:name())
						else
							monsterEntry:relativeTo(previous)
							monsterEntry:setOrientation(lua_sys.MenuOrientation(0,0,0, lua_sys.LEFT, lua_sys.VCENTER))
							monsterEntry:setRelativeObjectAnchors(lua_sys.RIGHT, lua_sys.VCENTER)
						end

						previous = monsterEntry

						monsterEntry:init()
						monsterEntry:setPositionBroadcast(true)
						monsterEntry:postInit()
					else
						local emptyEntry = menu:addTemplateElement("template_battle_gym_entry_empty", "empty"..i, element)
						if(previous == nil) then
							emptyEntry:relativeTo(element)
							emptyEntry:setOrientation(lua_sys.MenuOrientation(13 * game.menuScaleX(), -30, 18, lua_sys.LEFT, lua_sys.VCENTER))
							emptyEntry:setRelativeObjectAnchors(lua_sys.LEFT, lua_sys.VCENTER)
							element("FirstItem"):SetString(emptyEntry:name())
						else
							emptyEntry:relativeTo(previous)
							emptyEntry:setOrientation(lua_sys.MenuOrientation(0,0,0, lua_sys.LEFT, lua_sys.VCENTER))
							emptyEntry:setRelativeObjectAnchors(lua_sys.RIGHT, lua_sys.VCENTER)
						end

						emptyEntry("GymLevel"):SetString("")
						if(i >= currentGymCapacity) then
							local unlockText = LOC("BATTLE_GYM_UNLOCK")
							unlockText = unlockText:gsub("%${LEVEL}", i + 1)
							emptyEntry("GymLevel"):SetString(unlockText)
						end

						previous = emptyEntry

						emptyEntry:init()
						emptyEntry:setPositionBroadcast(true)
						emptyEntry:postInit()
					end

					element:parent():DoStoredScript("TickTransition")
				end

				element("numItems"):SetInt(maxGymCapacity)
			]]>
		</event>
	</element>

	<element name="SlotCount">
		<size dependentOnElement="element:name()" dependentOnComponent="Frame" />
		<position relativeTo="bg" vAnchor="BOTTOM" hAnchor="HCENTER" />
		<orientation vAnchor="VCENTER" hAnchor="HCENTER" xOffset="0" yOffset="-3*game.hudScale()" priorityOffset="-1" />

		<ninesliceComponent name="Frame">
			<size w="120*game.menuScaleX()" h="45*game.menuScaleY()" />
			<event name="onInit" params="component, element">
				<![CDATA[
					component("topHeight"):SetFloat(44.0)
					component("bottomHeight"):SetFloat(44.0)
					component("leftWidth"):SetFloat(50.0)
					component("rightWidth"):SetFloat(50.0)
					component("size"):SetFloat(0.5)
					component("includeBorder"):SetInt(1)
					component("spriteName"):SetString("gfx/menu/GreyTitleFrame")
					component("layer"):SetString("MidPopUps")
				]]>
			</event>
		</ninesliceComponent>

		<textComponent name="Text">
			<size w="100*game.menuScaleX()" h="32*game.menuScaleY()" />
			<position relativeTo="element:name()" vAnchor="VCENTER" hAnchor="HCENTER" />
			<orientation vAnchor="VCENTER" hAnchor="HCENTER" xOffset="0" yOffset="0" priorityOffset="-1" />
			<event name="onInit" params="component, element">
				<![CDATA[
					component("multiline"):SetInt(0)
					component("font"):Set(game.getTextFont())
					component("size"):SetFloat(0.2*game.menuScaleX())
					component("alignment"):SetInt(lua_sys.MenuTextComponent_TEXT_HCENTER_ALIGNED)
					component("layer"):SetString("MidPopUps")
					component("autoScaleFactor"):SetFloat(0.01)
					component("autoScale"):SetInt(1)
				]]>
			</event>
		</textComponent>

		<event name="refresh" params="element">
			<![CDATA[
				local text = LOC("BATTLE_GYM_SLOTS")..": "..game.getMonstersInGym():size().."/"..game.getGymCapacity()
				element["Text"]("text"):SetString(text)
				element["Text"]("autoScale"):SetInt(1)
			]]>
		</event>

		<event name="onPostInit" params="element">
			<![CDATA[
				element:DoStoredScript("refresh")
			]]>
		</event>
		
	</element>
	
	
	<event name="onInit" params="element">
		<![CDATA[
			element("transitionTime"):SetFloat(0.0)
			element:SetupGenericListener(game.engineReceiver(), "game::msg::MsgMonsterTrainingStatusUpdated", "gotMsgMonsterTrainingStatusUpdated")

			game.logEvent("battle_menu", "menu", "battle_gym", "action", "init")
		]]>
	</event>

	<event name="gotMsgMonsterTrainingStatusUpdated" params="element, msg">
		<![CDATA[
			element["GuestList"]:DoStoredScript("repopulate")
			element["SlotCount"]:DoStoredScript("refresh")
		]]>
	</event>

	<event name="onPostInit" params="element">
		element("transitionState"):SetInt(1)
	</event>

	<event name="onTick" params="element, dt">
		<![CDATA[
			if(dt < game.maxTickTime()) then
				local transitionState = element("transitionState"):GetInt()

				if(transitionState ~= 0) then
					local transitionTime = element("transitionTime"):GetFloat()

					element:DoStoredScript("TickTransition")

					if(transitionState == 1) then
						transitionTime = (transitionTime + dt*3)
					elseif(transitionState == 2) then
						transitionTime = (transitionTime - dt*3)
					end

					transitionTime = clamp(transitionTime, 0.0, 1.0)
					element("transitionTime"):SetFloat(transitionTime)

					if(transitionTime >= 1.0) then
						element("transitionState"):SetInt(0)
						element("transitionTime"):SetFloat(1.0)
						element:DoStoredScript("TickTransition")
					elseif(transitionTime <= 0.0) then
						element:root():popPopUp()
					end
				end
			end
		]]>
	</event>

	<event name="TickTransition" params="element">
		local transitionTime = element("transitionTime"):GetFloat()
		local frame = element:GetElement("bg")
		frame("xOffset"):SetFloat(lua_sys.screenWidth()*(0.5) + (-0.5)*lua_sys.screenWidth()*(1/transitionTime))
		element["FadedBG"]["Sprite"]("alpha"):SetFloat(transitionTime*0.5)
		game.setClipping("Clipping", (frame:absX() + 10)*lua_sys.deviceScaleX(), frame:absY() *lua_sys.deviceScaleY(), (frame:absW() - 20)*lua_sys.deviceScaleX(), frame:absH()*lua_sys.deviceScaleY())
	</event>

	<event name="queuePop" params="element">
		element("transitionState"):SetInt(2)
	</event>

	<event name="select" params="element">
		<![CDATA[
			local selectedMonsterId = game.getSelectedGymMonsterID()
			local numItems = element["GuestList"]("numItems"):GetInt()

			for i=0,numItems-1 do
				local storedMonster = element:GetElement("monster"..i);

				if storedMonster ~= nil then
					if storedMonster("ID"):GetInt() == selectedMonsterId then
						storedMonster:DoStoredScript("highlight")
					else
						storedMonster:DoStoredScript("disable")
					end
				end
			end
			
			manager:setContext("BATTLE_GYM_INVENTORY_SELECTED")
		]]>
	</event>

</menu>