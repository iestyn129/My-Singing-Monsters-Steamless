<?xml version="1.0" encoding="utf-8"?>
<menu xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="menu.xsd">

	<event name="highlight" params="element">
		element("highlightState"):SetInt(1)
	</event>
	
	<event name="onInit" params="element">
		element("highlightTime"):SetFloat(0.0)
		element("highlightState"):SetInt(0)
		--game.setClipping("FrontPopUps", 0, 0, lua_sys.screenWidth()*lua_sys.deviceScaleX(), lua_sys.screenHeight()*lua_sys.deviceScaleY())
		manager:setContext("MINIGAME_SPIN")	
		if(game.showFreeAdScratch()) then
			if(game.checkPlacementAvailable("spin_wheel")) then
				game.loadPlacement("spin_wheel");
			end
		end
	</event>

	<event name="onTick" params="element, dt">
		<![CDATA[
			if(dt < game.maxTickTime()) then
				if(element("highlightState"):GetInt() == 1) then
					if(not manager:isButtonEnabled("btn_play_again")) then
						element("highlightState"):SetInt(0)
					end
				end
			end
		]]>
	</event>
	
	<event name="resetSpin" params="element">
		element:DoStoredScript("disablePlayAgain")
		element:DoStoredScript("ResetAnims")
		element:DoStoredScript("showSpinButton")
	</event>
	
	<event name="disablePlayAgain" params="element">
		manager:setButtonEnabled("btn_play_again", false)
	</event>
	
	<event name="showCollectButton" params="element">
		element["Button"]:DoStoredScript("setVisible")
	</event>
	
	<event name="showSpinButton" params="element">
		<![CDATA[
			if(game.amazonStreamBox() == 1 or lua_sys.getPlatformName() == "pc") then
				element["SpinButton"]:DoStoredScript("setVisible")
			end
		]]>		
	</event>
	
	<event name="queuePop" params="element">
		element:root():popPopUp()
	</event>	
	
	<element name="bg">
		<size dependentOnElement="element:name()" dependentOnComponent="Sprite" />
		<position relativeTo="PARENT" vAnchor="TOP" hAnchor="LEFT" />
		<orientation vAnchor="TOP" hAnchor="LEFT" xOffset="-1" yOffset="-1" priorityOffset="50" />
		<spriteSheetComponent name="Sprite">
			<event name="onInit" params="component, element">
				component("spriteName"):SetString("wheel_BG")
				component("sheetName"):SetString("xml_resources/prize_wheel_sheet.xml")
				component("layer"):SetString("PopUps")
				component:setScale(Vector2((lua_sys.screenWidth()+2) / 32.0, (lua_sys.screenHeight()+2) / 32.0))
			</event>
		</spriteSheetComponent>
		<touchComponent name="Touch">
			<size dependentOnElement="element:name()" />
			<position relativeTo="element:name()" vAnchor="VCENTER" hAnchor="HCENTER" />
			<orientation vAnchor="VCENTER" hAnchor="HCENTER" xOffset="0" yOffset="0" priorityOffset="0" />			
		</touchComponent>
	</element>

	<element name="Frame">
		<size dependentOnElement="element:name()" dependentOnComponent="Sprite" />
		<position relativeTo="PARENT" vAnchor="VCENTER" hAnchor="HCENTER" />
		<orientation vAnchor="VCENTER" hAnchor="HCENTER" xOffset="0" yOffset="0" priorityOffset="2" />
		<ninesliceComponent name="Sprite">
			<size w="440*game.menuScaleX()" h="225*game.menuScaleY()" />
			<event name="onInit" params="component, element">
				component("topHeight"):SetFloat(50.0)
				component("bottomHeight"):SetFloat(50.0)
				component("leftWidth"):SetFloat(50.0)
				component("rightWidth"):SetFloat(50.0)
				component("includeBorder"):SetInt(1)
				component("size"):SetFloat(0.5)
				component("spriteName"):SetString("gfx/menu/Black9SFrame50")
				component("layer"):SetString("MidPopUps")
				component("visible"):SetInt(0)
			</event>
		</ninesliceComponent>
	</element>	
	
	<element name="TopLeftLights">
		<size dependentOnElement="element:name()" dependentOnComponent="Sprite" />
		<position relativeTo="bg" vAnchor="TOP" hAnchor="LEFT" />
		<orientation vAnchor="TOP" hAnchor="LEFT" xOffset="0" yOffset="0" priorityOffset="-2" />
		<aeComponent name="Sprite">
			<event name="onInit" params="component, element">
				component("animationName"):SetString("xml_bin/prize_wheel.bin")
				component("animation"):SetString( "lights win" )
				component:setScale(Vector2(1.1*game.composerScale(),1.1*game.composerScale()))
				component("layer"):SetString("FrontPopUps")
			</event>
			<event name="onPostInit" params="component, element">
				element:setOrientationPosition(Vector2(component:size().x / 2.0, component:size().y / 2.0 - 35*game.menuScaleX()))
			</event>
		</aeComponent>
	</element>
	
	<element name="TopBirdsAndLights">
		<size dependentOnElement="element:name()" dependentOnComponent="Sprite" />
		<position relativeTo="bg" vAnchor="VCENTER" hAnchor="HCENTER" />
		<orientation vAnchor="VCENTER" hAnchor="HCENTER" xOffset="0" yOffset="0" priorityOffset="-2" />
		<aeComponent name="Sprite">
			<event name="onInit" params="component, element">
				component("animationName"):SetString("xml_bin/prize_wheel.bin")
				component("animation"):SetString( "birds idle" )
				component:setScale(Vector2(1.35*game.composerScale(),1.35*game.composerScale()))
				component("layer"):SetString("PopUps")
			</event>
			<event name="onPostInit" params="component, element">
				element:setOrientationPosition(Vector2(component:size().x / 2.0 + 140 * game.menuScaleX(), component:size().y / 2.0 - 60 * game.menuScaleX()))
				element:stopListeningToPositionChanges()
			</event>
		</aeComponent>
	</element>
	
	<element name="Monsters">
		<size dependentOnElement="element:name()" dependentOnComponent="Sprite" />
		<position relativeTo="bg" vAnchor="BOTTOM" hAnchor="RIGHT" />
		<orientation vAnchor="VCENTER" hAnchor="HCENTER" xOffset="0" yOffset="70*game.menuScaleX()" priorityOffset="-2" />
		<aeComponent name="Sprite">
			<event name="onInit" params="component, element">
				component("animationName"):SetString("xml_bin/prize_wheel.bin")
				component("animation"):SetString( "monsters idle" )
				component:setScale(Vector2(1.0*game.composerScale(),1.0*game.composerScale()))
				component("layer"):SetString("MidPopUps")
			</event>
		</aeComponent>
	</element>
	
	<event name="PlayWinAnims" params="element">
		element["Monsters"]:GetComponent("Sprite")("animation"):SetString("monsters win")
		element["Monsters"]:GetComponent("Sprite"):setScale(Vector2(1.0*game.composerScale(),1.0*game.composerScale()))
		
		element["TopBirdsAndLights"]:GetComponent("Sprite")("animation"):SetString("birds win")
		element["TopBirdsAndLights"]:GetComponent("Sprite"):setScale(Vector2(1.35*game.composerScale(),1.35*game.composerScale()))
		
		element["TopLeftLights"]:GetComponent("Sprite")("animation"):SetString("lights win")
	</event>
	
	<event name="ResetAnims" params="element">
		element["Monsters"]:GetComponent("Sprite")("animation"):SetString("monsters idle")
		element["Monsters"]:GetComponent("Sprite"):setScale(Vector2(1.0*game.composerScale(),1.0*game.composerScale()))
		
		element["TopBirdsAndLights"]:GetComponent("Sprite")("animation"):SetString("birds idle")
		element["TopBirdsAndLights"]:GetComponent("Sprite"):setScale(Vector2(1.35*game.composerScale(),1.35*game.composerScale()))
		
		element["TopLeftLights"]:GetComponent("Sprite")("animation"):SetString("lights idle")
	</event>
	
	<element name="WheelCenter">
		<size dependentOnElement="element:name()" dependentOnComponent="FeatherArrow" />
		<position relativeTo="PARENT" vAnchor="VCENTER" hAnchor="HCENTER" />
		<orientation vAnchor="VCENTER" hAnchor="HCENTER" xOffset="-220*game.menuScaleX()" yOffset="10*game.menuScaleX()" priorityOffset="3" />
		<spriteSheetComponent name="FeatherArrow">
			<event name="onInit" params="component, element">
				component("spriteName"):SetString("wheel_centre")
				component("sheetName"):SetString("xml_resources/prize_wheel_sheet.xml")
				component("size"):SetFloat(0.7*game.menuScaleX())
				component("layer"):SetString("FrontPopUps")
			</event>
		</spriteSheetComponent>
	</element>
	
	<element name="Description">
		<size dependentOnElement="element:name()" dependentOnComponent="Text" />
		<position relativeTo="PARENT" vAnchor="BOTTOM" hAnchor="HCENTER" />
		<orientation vAnchor="BOTTOM" hAnchor="HCENTER" xOffset="0" yOffset="23*game.menuScaleY()" priorityOffset="1" />
		<textComponent name="Text">
			<size w="250*game.menuScaleX()" h="40*game.menuScaleY()" />
			<position relativeTo="PARENT" vAnchpor="VCENTER" hAnchor="HCENTER" />
			<orientation vAnchor="VCENTER" hAnchor="HCENTER" xOffset="0" yOffset="0" priorityOffset="0" />
			<event name="onInit" params="component, element">
				component("multiline"):SetInt(0)
				component("font"):Set(game.getTitleFont())
				component("size"):SetFloat(0.25*game.menuScaleX())
				component("alignment"):SetInt(lua_sys.MenuTextComponent_TEXT_HCENTER_ALIGNED)
				component("text"):SetString(game.localizedUpper("MINIGAME_DESC_SPIN"))
				component("autoScale"):SetInt(1)
				component("autoScaleFactor"):SetFloat(0.01)
				component("layer"):SetString("FrontPopUps")
				component("visible"):SetInt(0)
			</event>
		</textComponent>
	</element>
	
	<element name="ScratchBox">
		<size w="256*game.menuScaleX()" h="128*game.menuScaleX()" />
		<position relativeTo="Frame" vAnchor="VCENTER" hAnchor="HCENTER" />
		<orientation vAnchor="VCENTER" hAnchor="HCENTER" xOffset="-55*game.menuScaleX()" yOffset="10*game.menuScaleY()" priorityOffset="0" />
		<event name="clear" params="element">
			for i=0,5 do
				local scratchEntry = element:GetElement("scratchEntry"..i)
				if(scratchEntry ~= nil) then
					element:RemoveElement(scratchEntry)
				end
			end
		</event>
		<event name="populate" params="element" >
			local previous = nil
			local NUM_PER_ROW = 3
			
			for i=0,5 do
				local scratchEntry = menu:addTemplateElement("template_scratchentry", "scratchEntry"..i, element)
				
				if(previous == nil) then
					scratchEntry:relativeTo(element)
					scratchEntry:setOrientation(lua_sys.MenuOrientation(0,0,-1, lua_sys.LEFT, lua_sys.TOP))
					scratchEntry:setRelativeObjectAnchors(lua_sys.LEFT, lua_sys.TOP)
				elseif((i % NUM_PER_ROW) == 0) then
					scratchEntry:relativeTo(element:GetElement("scratchEntry"..(i-NUM_PER_ROW)))
					scratchEntry:setOrientation(lua_sys.MenuOrientation(0,0,0, lua_sys.LEFT, lua_sys.TOP))
					scratchEntry:setRelativeObjectAnchors(lua_sys.LEFT, lua_sys.BOTTOM)
				else
					scratchEntry:relativeTo(previous)
					scratchEntry:setOrientation(lua_sys.MenuOrientation(0,0,0, lua_sys.LEFT, lua_sys.TOP))
					scratchEntry:setRelativeObjectAnchors(lua_sys.RIGHT, lua_sys.TOP)
				end
				
				scratchEntry("index"):SetInt(i)
				scratchEntry:init()
				scratchEntry:setPositionBroadcast(true)
				previous = scratchEntry
			end
		</event>
		<event name="setEntriesVisible" params="element">
			for i=0,5 do
				element["ScratchBox"]["scratchEntry"..i]:DoStoredScript("setVisible")
			end
			lua_sys.playSoundFx("audio/sfx/scratch_ticket.wav")
		</event>
		<event name="setEntriesInvisible" params="element">
			for i=0,5 do
				element["ScratchBox"]["scratchEntry"..i]:DoStoredScript("setInvisible")
			end
		</event>
	</element>		
	
	<template type="template_spritesheetbutton" name="Button">
		<templateVar name="$upSpriteName" equals="'button_invite'" />
		<templateVar name="$sheetName" equals="'xml_resources/buttons01.xml'" />
		<templateVar name="$spriteScale" equals="0.45*game.hudScale()" />
		<templateVar name="$text" equals="LABEL_COLLECT" />
		<templateVar name="$textPadding" equals="8*game.menuScaleX()" />
		<templateVar name="$autoScale" equals="1" />
		<templateVar name="$layer" equals="'FrontPopUps'" />
		<position relativeTo="Frame" vAnchor="BOTTOM" hAnchor="HCENTER" />
		<orientation vAnchor="VCENTER" hAnchor="HCENTER" xOffset="0" yOffset="0" priorityOffset="-1" />
		<touchComponent name="Touch">
			<event name="onTouchUp" params="component, element">
			<![CDATA[
				onTouchUp(component, element)
				
				local reward = game.getSpinWheelRewardType()
				local hudIconDest = ""
				local hudElementDest = ""
				
				if(reward == "diamonds") then
					hudIconDest = "diamond"
					hudElementDest = "DiamondCounter"
				elseif(reward == "food") then
					hudIconDest = "food"
					hudElementDest = "FoodCounter"
				elseif(reward == "coins") then
					hudIconDest = "coin"
					hudElementDest = "CoinCounter"
				elseif(reward == "keys") then
					hudIconDest = "keys"
					hudElementDest = "KeyCounter"
				elseif(reward == "relics") then
					hudIconDest = "relic"
					hudElementDest = "RelicCounter"
				end

				if(hudIconDest ~= "" and hudElementDest ~= "") then
					game.showFlyingIconFromSpinWheel(hudIconDest, hudElementDest, "Icon", "FrontPopUps")
				end
				
				game.collectWinnings("S")
				element:DoStoredScript("setInvisible")
				
				manager:setButtonEnabled("btn_play_again", true)
				
				local rewardCurrencyType = game.scratchRewardCurrencyType()
				if(rewardCurrencyType == "relics" and not game.getRelicCelebrationSeen()) then
					if(game.showFreeAdScratch()) then
						if (game.queueTrackingPermissionPrePrompt ~= nil) then
							game.queueTrackingPermissionPrePrompt();
						end	
						game.queueFreeScratchAds();
					end
					
					element:root():pushPopUp("relic_confetti_popup")
				
				--currently this will never happen because keys are a jackpot prize, but add just in case that ever changes
				elseif(rewardCurrencyType == "keys" and not game.getKeyCelebrationSeen()) then
					if(game.showFreeAdScratch()) then
						if (game.queueTrackingPermissionPrePrompt ~= nil) then
							game.queueTrackingPermissionPrePrompt();
						end	
						game.queueFreeScratchAds();
					end
					
					element:root():pushPopUp("key_confetti_popup")
				else
					if(game.showFreeAdScratch()) then
						game.promptForFreeScratchWithAds();
					end
				end
				]]>
			</event>
		</touchComponent>
		<event name="onPostInit" params="element">
			element:DoStoredScript("setInvisible")
		</event>
	</template>
	
	<template type="template_spritesheetbutton" name="SpinButton">
		<templateVar name="$upSpriteName" equals="'button_invite'" />
		<templateVar name="$sheetName" equals="'xml_resources/buttons01.xml'" />
		<templateVar name="$spriteScale" equals="0.45*game.hudScale()" />
		<templateVar name="$text" equals="CONTEXTBAR_SPIN_LABEL" />
		<templateVar name="$textPadding" equals="8*game.menuScaleX()" />
		<templateVar name="$autoScale" equals="1" />
		<templateVar name="$layer" equals="'FrontPopUps'" />
		<position relativeTo="Description" vAnchor="TOP" hAnchor="CENTER" />
		<orientation vAnchor="BOTTOM" hAnchor="HCENTER" xOffset="0" yOffset="15*game.menuScaleX()" priorityOffset="0" />		
		<event name="onPostInit" params="element">
			<![CDATA[
				if(game.amazonStreamBox() == 0 and lua_sys.getPlatformName() ~= "pc") then
					element:DoStoredScript("setInvisible")
				end
			]]>
		</event>
		<touchComponent name="Touch">
			<event name="onTouchUp" params="component, element">
			<![CDATA[
				onTouchUp(component, element)
				game.SpinWheel()
				element:DoStoredScript("setInvisible")
				]]>
			</event>
		</touchComponent>
	</template>
	
</menu>