<menu xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="menu.xsd">
	
	<event name="onInit" params="element">
		<![CDATA[
		if((game.numIslands() == 1 and game.playerLevel() < 10)) then
			element["Functions"]:DoStoredScript("disableStarpowerButton");
			--let people see the popup notice telling them how to unlock it:
			element:parent()["StarpowerButton"]["Touch"]("enabled"):SetInt(1)

		elseif(game.isUnderlingIsland() or game.isCelestialIsland() or game.isAmberIsland() or game.isEtherealAtelierIsland()) then
		
			element["Functions"]:DoStoredScript("disableStarpowerButton");
			--let people see the popup notice telling them how to unlock it:
			element:parent()["StarpowerButton"]["Touch"]("enabled"):SetInt(1)
			
		elseif(game.isComposerIsland()) then
		
			element["Functions"]:DoStoredScript("disableStarpowerButton");
			--let people see the popup notice telling them how to unlock it:
			element:parent()["StarpowerButton"]["Touch"]("enabled"):SetInt(1)
			
			element["Functions"]:DoStoredScript("disableDecorationsButton");
			--let people see the popup notice telling them why it's locked
			element:parent()["DecorationsButton"]["Touch"]("enabled"):SetInt(1)
			
			element["Functions"]:DoStoredScript("disableStructuresButton");
			--let people see the popup notice telling them why it's locked
			element:parent()["StructuresButton"]["Touch"]("enabled"):SetInt(1)
			
		elseif game.isBattleIsland() then
			
			element["Functions"]:DoStoredScript("disableStructuresButton")
			element:parent()["StructuresButton"]["Touch"]("enabled"):SetInt(1)
			
			element["Functions"]:DoStoredScript("disableStarpowerButton")
			element:parent()["StarpowerButton"]["Touch"]("enabled"):SetInt(1)
			
		end
		]]>
	</event>
	
	<element name="bg">
		<size dependentOnElement="element:name()" dependentOnComponent="Sprite" />
		<position relativeTo="PARENT" vAnchor="TOP" hAnchor="LEFT" />
		<orientation vAnchor="TOP" hAnchor="LEFT" xOffset="0" yOffset="0" priorityOffset="10" />
		<spriteComponent name="Sprite">
			<event name="onInit" params="component, element">
				component("spriteName"):SetString("gfx/menu/menu_background_01")
				component("layer"):SetString("FrontPopUps")
				component:setScale(Vector2(game.bgScaleX(), game.bgScaleY()))
			</event>
		</spriteComponent>
		<touchComponent name="Touch">
			<size dependentOnElement="element:name()" />
			<position relativeTo="element:name()" vAnchor="VCENTER" hAnchor="HCENTER" />
			<orientation vAnchor="VCENTER" hAnchor="HCENTER" xOffset="0" yOffset="0" priorityOffset="0" />
		</touchComponent>
	</element>
	
	<element name="TitleFrame">
		<size dependentOnElement="element:name()" dependentOnComponent="Sprite" />
		<position relativeTo="CostumesButton" vAnchor="TOP" hAnchor="RIGHT" />
		<orientation vAnchor="BOTTOM" hAnchor="HCENTER" xOffset="0" yOffset="0" priorityOffset="0" />
		<ninesliceComponent name="Sprite">
			<size w="240*game.hudScale()" h="42*game.hudScale()" />
			<event name="onInit" params="component, element">
				<![CDATA[
					component("topHeight"):SetFloat(40.0)
					component("bottomHeight"):SetFloat(40.0)
					component("leftWidth"):SetFloat(50.0)
					component("rightWidth"):SetFloat(50.0)
					component("size"):SetFloat(0.5*game.hudScale())
					component("includeBorder"):SetInt(1)
					component("spriteName"):SetString("gfx/menu/GreyTitleFrame")
					component("layer"):SetString("FrontPopUps")
					
					if(game.hudScale() > 1) then
						component("width"):SetInt(component("width"):GetInt() + 35*game.hudScale())
						component("height"):SetInt(component("height"):GetInt() + 20*game.hudScale())
					end
				]]>
			</event>
		</ninesliceComponent>
		<textComponent name="Text">
			<position relativeTo="element:name()" vAnchor="VCENTER" hAnchor="HCENTER" />
			<orientation vAnchor="VCENTER" hAnchor="HCENTER" xOffset="0" yOffset="0" priorityOffset="-1" />
			<event name="onInit" params="component, element" >
				component("font"):Set(game.getTitleFont())
				component:setColor(0.43, 0.98, 0.02)
				component("size"):SetFloat(0.35*game.menuScaleY())
				component("alignment"):SetInt(MenuTextComponent_TEXT_LEFT_ALIGNED)
				component("text"):SetString("STORE_MARKET")
				component("layer"):SetString("FrontPopUps")
			</event>
		</textComponent>
		<spriteSheetComponent name="LeftEnd">
			<position relativeTo="element:name()" vAnchor="VCENTER" hAnchor="LEFT" />
			<orientation vAnchor="VCENTER" hAnchor="HCENTER" xOffset="0" yOffset="0" priorityOffset="1" />
			<event name="onInit" params="component, element">
			<![CDATA[
				component("spriteName"):SetString("bookend_market")
				component("sheetName"):SetString("xml_resources/store_elements.xml")
				component("layer"):SetString("FrontPopUps")
				
				if(game.hudScale() > 1) then
					component("size"):SetFloat(screenWidth()/960.0)
				else
					component("size"):SetFloat(screenWidth()/1024.0)
				end
			]]>
			</event>
		</spriteSheetComponent>
		<spriteSheetComponent name="RightEnd">
			<position relativeTo="element:name()" vAnchor="VCENTER" hAnchor="RIGHT" />
			<orientation vAnchor="VCENTER" hAnchor="HCENTER" xOffset="0" yOffset="0" priorityOffset="1" />
			<event name="onInit" params="component, element">
			<![CDATA[
				component("spriteName"):SetString("bookend_market")
				component("sheetName"):SetString("xml_resources/store_elements.xml")
				component("hFlip"):SetInt(1)
				component("size"):SetFloat(screenWidth()/1024.0)
				component("layer"):SetString("FrontPopUps")
				
				if(game.hudScale() > 1) then
					component("size"):SetFloat(screenWidth()/960.0)
				else
					component("size"):SetFloat(screenWidth()/1024.0)
				end
			]]>
			</event>
		</spriteSheetComponent>
	</element>

	<!-- First Row -->
	
	<element name="MonstersButton">
		<hudScale scale="math.min(game.hudScale(), 1.5)" />
		<size dependentOnElement="element:name()" dependentOnComponent="Sprite" />
		<position relativeTo="CostumesButton" vAnchor="VCENTER" hAnchor="LEFT" />
		<orientation vAnchor="VCENTER" hAnchor="RIGHT" xOffset="0" yOffset="4" priorityOffset="0" />
		<spriteComponent name="Sprite">
			<event name="onInit" params="component, element">
				component("spriteName"):SetString("gfx/menu/store_button_monsters")
				component("size"):SetFloat(0.48*game.hudScale())
				component("layer"):SetString("FrontPopUps")
			</event>
		</spriteComponent>
		<textComponent name="Text">
			<size w="80*game.menuScaleX()" h="30" />
			<position relativeTo="element:name()" vAnchor="BOTTOM" hAnchor="HCENTER" />
			<orientation vAnchor="BOTTOM" hAnchor="HCENTER" xOffset="0" yOffset="15" priorityOffset="-1" />
			<event name="onInit" params="component, element">
				component("multiline"):SetInt(0)
				component("autoScaleFactor"):SetFloat(0.01)
				component("autoScale"):SetInt(1)
				component("font"):Set(game.getTextFont())
				component("size"):SetFloat(0.23*game.hudScale())
				component("alignment"):SetInt(MenuTextComponent_TEXT_HCENTER_ALIGNED)
				component("text"):SetString("STORE_MONSTER")
				component("layer"):SetString("FrontPopUps")
			</event>
		</textComponent>
		<touchComponent name="Touch">
			<size dependentOnElement="element:name()" dependentOnComponent="Sprite" />
			<position relativeTo="element:name()" vAnchor="VCENTER" hAnchor="HCENTER" />
			<orientation vAnchor="VCENTER" hAnchor="HCENTER" xOffset="0" yOffset="0" priorityOffset="0" />
			<event name="onTouchDown" params="component, element">
				element["Sprite"]:setColor(0.5, 0.5, 0.5)
				element["Text"]:setColor(0.5, 0.5, 0.5)
			</event>
			<event name="onTouchUp" params="component, element">
				element["Sprite"]:setColor(1.0, 1.0, 1.0)
				element["Text"]:setColor(1.0, 1.0, 1.0)
				playSoundFx("audio/sfx/menu_click_small.wav")
				store:SelectCategory(game.StoreCategories_TYPE_MONSTER)
				store:SetMenuState(game.StoreContext_IDLE)
				element:parent()["Functions"]:DoStoredScript("dismissMarketButton");
				menu:popPopUp()
			</event>
			<event name="onTouchRelease" params="component, element">
				element["Sprite"]:setColor(1.0, 1.0, 1.0)
				element["Text"]:setColor(1.0, 1.0, 1.0)
			</event>
		</touchComponent>
		<event name="onInit" params="element">
			if(game.activeEventForCategory(game.StoreCategories_TYPE_MONSTER)) then
				local attachedTemplate = menu:addTemplateElement("template_saleindicator", "attachedTemplate", element)
				attachedTemplate:setParent(element)
				attachedTemplate:setOrientation(MenuOrientation(0, -5*game.hudScale(), -3, HCENTER, VCENTER))
				attachedTemplate:setRelativeObjectAnchors(HCENTER, BOTTOM)
				attachedTemplate:init()
				attachedTemplate("setNewScale"):SetFloat(game.menuScaleX())
				attachedTemplate["Text"]("layer"):SetString("FrontPopUps")
				attachedTemplate["Tag"]("layer"):SetString("FrontPopUps")
				attachedTemplate:setPositionBroadcast(true)
			end
		</event>
	</element>

	<element name="CostumesButton">
		<hudScale scale="math.min(game.hudScale(), 1.5)" />
		<size dependentOnElement="element:name()" dependentOnComponent="Sprite" />
		<position relativeTo="PARENT" vAnchor="VCENTER" hAnchor="HCENTER" />
		<orientation vAnchor="VCENTER" hAnchor="RIGHT" xOffset="0" yOffset="-50" priorityOffset="7" />
		
		<spriteComponent name="Sprite">
			<event name="onInit" params="component, element">
				<![CDATA[
				component("spriteName"):SetString("gfx/menu/store_button_costumes")
				component("size"):SetFloat(0.48*game.hudScale())
				component("layer"):SetString("FrontPopUps")
				]]>
			</event>
		</spriteComponent>
		<textComponent name="Text">
			<size w="80*game.menuScaleX()" h="30" />
			<position relativeTo="element:name()" vAnchor="BOTTOM" hAnchor="HCENTER" />
			<orientation vAnchor="BOTTOM" hAnchor="HCENTER" xOffset="0" yOffset="15" priorityOffset="-1" />
			<event name="onInit" params="component, element">
				<![CDATA[
				component("multiline"):SetInt(0)
				component("autoScaleFactor"):SetFloat(0.01)
				component("autoScale"):SetInt(1)
				component("font"):Set(game.getTextFont())
				component("size"):SetFloat(0.23*game.hudScale())
				component("alignment"):SetInt(MenuTextComponent_TEXT_HCENTER_ALIGNED)
				component("text"):SetString("STORE_COSTUMES")
				component("layer"):SetString("FrontPopUps")
				]]>
			</event>
		</textComponent>
		<touchComponent name="Touch">
			<size dependentOnElement="element:name()" dependentOnComponent="Sprite" />
			<position relativeTo="element:name()" vAnchor="VCENTER" hAnchor="HCENTER" />
			<orientation vAnchor="VCENTER" hAnchor="HCENTER" xOffset="0" yOffset="0" priorityOffset="0" />
			<event name="onTouchDown" params="component, element">
				<![CDATA[
					element["Sprite"]:setColor(0.5, 0.5, 0.5)
					element["Text"]:setColor(0.5, 0.5, 0.5)
				]]>
			</event>
			<event name="onTouchUp" params="component, element">
				<![CDATA[
					local lockReason = element("LOCK_REASON"):GetInt()
					if lockReason == 1 then
						game.displayNotification(game.getLocalizedText("COSTUME_CATEGORY_NO_COSTUMES"))
					elseif lockReason == 2 then
						game.displayNotification(game.getLocalizedText("COSTUME_CATEGORY_LOCKED"))
					else
						element["Sprite"]:setColor(1.0, 1.0, 1.0)
						element["Text"]:setColor(1.0, 1.0, 1.0)
						playSoundFx("audio/sfx/menu_click_small.wav")
						store:SelectCategory(game.StoreCategories_TYPE_COSTUMES)
						store:SetMenuState(game.StoreContext_IDLE)
						element:parent()["Functions"]:DoStoredScript("dismissMarketButton");
						menu:popPopUp()
					end
				]]>
			</event>
			<event name="onTouchRelease" params="component, element">
				<![CDATA[
					if element("LOCK_REASON"):GetInt() == 0 then
						element["Sprite"]:setColor(1.0, 1.0, 1.0)
						element["Text"]:setColor(1.0, 1.0, 1.0)
					end
				]]>
			</event>
		</touchComponent>
		<event name="onInit" params="element">
			<![CDATA[
				local numCostumesAvailable = game.getPurchaseableCostumesForActiveIsland()

				if numCostumesAvailable == 0 or 
					(not game.teleportingUnlocked())
					or game.battleTutActive() 
				then
					element["Sprite"]:setColor(0.5, 0.5, 0.5)
					element["Text"]:setColor(0.5, 0.5, 0.5)
					
					if numCostumesAvailable == 0 then
						element("LOCK_REASON"):SetInt(1)
					else
						element("LOCK_REASON"):SetInt(2)
					end
					return
			end

			element("LOCK_REASON"):SetInt(0)
			if(game.activeEventForCategory(game.StoreCategories_TYPE_COSTUMES)) then
				local attachedTemplate = menu:addTemplateElement("template_saleindicator", "attachedTemplate", element)
				attachedTemplate:setParent(element)
				attachedTemplate:setOrientation(MenuOrientation(0, -5*game.hudScale(), -3, HCENTER, VCENTER))
				attachedTemplate:setRelativeObjectAnchors(HCENTER, BOTTOM)
				attachedTemplate:init()
				attachedTemplate("setNewScale"):SetFloat(game.menuScaleX())
				attachedTemplate["Text"]("layer"):SetString("FrontPopUps")
				attachedTemplate["Tag"]("layer"):SetString("FrontPopUps")
				attachedTemplate:setPositionBroadcast(true)
			end
		]]>
		</event>
	</element>

	<element name="StructuresButton">
		<hudScale scale="math.min(game.hudScale(), 1.5)" />
		<size dependentOnElement="element:name()" dependentOnComponent="Sprite" />
		<position relativeTo="CostumesButton" vAnchor="VCENTER" hAnchor="RIGHT" />
		<orientation vAnchor="VCENTER" hAnchor="LEFT" xOffset="-1*game.menuScaleX()" yOffset="4" priorityOffset="0" />
		<spriteComponent name="Sprite">
			<event name="onInit" params="component, element">
				component("spriteName"):SetString("gfx/menu/store_button_structures")
				component("size"):SetFloat(0.48*game.hudScale())
				component("layer"):SetString("FrontPopUps")
			</event>
		</spriteComponent>
		<textComponent name="Text">
			<size w="80*game.menuScaleX()" h="30" />
			<position relativeTo="element:name()" vAnchor="BOTTOM" hAnchor="HCENTER" />
			<orientation vAnchor="BOTTOM" hAnchor="HCENTER" xOffset="0" yOffset="15" priorityOffset="-1" />
			<event name="onInit" params="component, element">
				component("multiline"):SetInt(0)
				component("autoScaleFactor"):SetFloat(0.01)
				component("autoScale"):SetInt(1)
				component("font"):Set(game.getTextFont())
				component("size"):SetFloat(0.23*game.hudScale())
				component("alignment"):SetInt(MenuTextComponent_TEXT_HCENTER_ALIGNED)
				component("text"):SetString("STORE_STRUCTURES")
				component("layer"):SetString("FrontPopUps")
			</event>
		</textComponent>
		<touchComponent name="Touch">
			<size dependentOnElement="element:name()" dependentOnComponent="Sprite" />
			<position relativeTo="element:name()" vAnchor="VCENTER" hAnchor="HCENTER" />
			<orientation vAnchor="VCENTER" hAnchor="HCENTER" xOffset="0" yOffset="0" priorityOffset="0" />
			<event name="onTouchDown" params="component, element">
				if(not (game.isUnderlingIsland() or
					game.isComposerIsland() or 
					game.isCelestialIsland() or
					game.isAmberIsland() or
					game.isBattleIsland())) then
					element["Sprite"]:setColor(0.5, 0.5, 0.5)
					element["Text"]:setColor(0.5, 0.5, 0.5)
				end
			</event>
			<event name="onTouchUp" params="component, element">
				if(game.isComposerIsland()) then
					game.displayNotification(game.getLocalizedText("COMPOSER_STRUCTURE_CATEGORY_LOCKED"))
				elseif(game.isBattleIsland()) then
					game.displayNotification(game.getLocalizedText("BATTLE_STRUCTURE_CATEGORY_LOCKED"))
				else
					element["Sprite"]:setColor(1.0, 1.0, 1.0)
					element["Text"]:setColor(1.0, 1.0, 1.0)
					playSoundFx("audio/sfx/menu_click_small.wav")
					store:SelectCategory(game.StoreCategories_TYPE_STRUCTURE)
					store:SetMenuState(game.StoreContext_IDLE)
					element:parent()["Functions"]:DoStoredScript("dismissMarketButton");
					menu:popPopUp()
				end
			</event>
			<event name="onTouchRelease" params="component, element">
				if(not (game.isUnderlingIsland() or
					game.isComposerIsland() or
					game.isCelestialIsland() or
					game.isAmberIsland() or
					game.isBattleIsland())) then
					element["Sprite"]:setColor(1.0, 1.0, 1.0)
					element["Text"]:setColor(1.0, 1.0, 1.0)
				end
			</event>
		</touchComponent>
		<event name="onInit" params="element">
			if(game.activeEventForCategory(game.StoreCategories_TYPE_STRUCTURE)) then
				local attachedTemplate = menu:addTemplateElement("template_saleindicator", "attachedTemplate", element)
				attachedTemplate:setParent(element)
				attachedTemplate:setOrientation(MenuOrientation(0, -5*game.hudScale(), -3, HCENTER, VCENTER))
				attachedTemplate:setRelativeObjectAnchors(HCENTER, BOTTOM)
				attachedTemplate:init()
				attachedTemplate("setNewScale"):SetFloat(game.menuScaleX())
				attachedTemplate["Text"]("layer"):SetString("FrontPopUps")
				attachedTemplate["Tag"]("layer"):SetString("FrontPopUps")
				attachedTemplate:setPositionBroadcast(true)
			end
		</event>
	</element>

	<element name="DecorationsButton">
		<hudScale scale="math.min(game.hudScale(), 1.5)" />
		<size dependentOnElement="element:name()" dependentOnComponent="Sprite" />
		<position relativeTo="StructuresButton" vAnchor="BOTTOM" hAnchor="RIGHT" />
		<orientation vAnchor="BOTTOM" hAnchor="LEFT" xOffset="-1*game.menuScaleX()" yOffset="0" priorityOffset="0" />
		<spriteComponent name="Sprite">
			<event name="onInit" params="component, element">
				component("spriteName"):SetString("gfx/menu/store_button_decorations")
				component("size"):SetFloat(0.48*game.hudScale())
				component("layer"):SetString("FrontPopUps")
				if(game.playerLevel() &lt; 4) then
					component:setColor(0.5, 0.5, 0.5)
				end
			</event>
		</spriteComponent>
		<textComponent name="Text">
			<size w="80*game.menuScaleX()" h="30" />
			<position relativeTo="element:name()" vAnchor="BOTTOM" hAnchor="HCENTER" />
			<orientation vAnchor="BOTTOM" hAnchor="HCENTER" xOffset="0" yOffset="15" priorityOffset="-1" />
			<event name="onInit" params="component, element">
				component("multiline"):SetInt(0)
				component("autoScaleFactor"):SetFloat(0.01)
				component("autoScale"):SetInt(1)
				component("font"):Set(game.getTextFont())
				component("size"):SetFloat(0.23*game.hudScale())
				component("alignment"):SetInt(MenuTextComponent_TEXT_HCENTER_ALIGNED)
				component("text"):SetString("STORE_DECORATIONS")
				component("layer"):SetString("FrontPopUps")
			</event>
		</textComponent>
		<touchComponent name="Touch">
			<size dependentOnElement="element:name()" dependentOnComponent="Sprite" />
			<position relativeTo="element:name()" vAnchor="VCENTER" hAnchor="HCENTER" />
			<orientation vAnchor="VCENTER" hAnchor="HCENTER" xOffset="0" yOffset="0" priorityOffset="0" />
			<event name="onTouchDown" params="component, element">
				if(not game.isComposerIsland()) then
					element["Sprite"]:setColor(0.5, 0.5, 0.5)
					element["Text"]:setColor(0.5, 0.5, 0.5)
				end
			</event>
			<event name="onTouchUp" params="component, element">
			
				if(game.isComposerIsland()) then
					game.displayNotification(game.getLocalizedText("COMPOSER_DECORATION_CATEGORY_LOCKED"))
				else
					element["Sprite"]:setColor(1.0, 1.0, 1.0)
					element["Text"]:setColor(1.0, 1.0, 1.0)
					playSoundFx("audio/sfx/menu_click_small.wav")
					store:SelectCategory(game.StoreCategories_TYPE_DECORATION)
					store:SetMenuState(game.StoreContext_IDLE)
					element:parent()["Functions"]:DoStoredScript("dismissMarketButton");
					menu:popPopUp()
				end
			</event>
			<event name="onTouchRelease" params="component, element">
				if(not game.isComposerIsland()) then
					element["Sprite"]:setColor(1.0, 1.0, 1.0)
					element["Text"]:setColor(1.0, 1.0, 1.0)
				end
			</event>
		</touchComponent>
		<event name="onInit" params="element">
			if(game.playerLevel() &lt; 4) then
				element["Text"]:setColor(0.5, 0.5, 0.5)
				element["Touch"]("enabled"):SetInt(0)
			end
			
			if(game.activeEventForCategory(game.StoreCategories_TYPE_DECORATION)) then
				local attachedTemplate = menu:addTemplateElement("template_saleindicator", "attachedTemplate", element)
				attachedTemplate:setParent(element)
				attachedTemplate:setOrientation(MenuOrientation(0, -5*game.hudScale(), -3, HCENTER, VCENTER))
				attachedTemplate:setRelativeObjectAnchors(HCENTER, BOTTOM)
				attachedTemplate:init()
				attachedTemplate("setNewScale"):SetFloat(game.menuScaleX())
				attachedTemplate["Text"]("layer"):SetString("FrontPopUps")
				attachedTemplate["Tag"]("layer"):SetString("FrontPopUps")
				attachedTemplate:setPositionBroadcast(true)
			end
		</event>
	</element>
	
	<!-- Second Row -->

	<element name="CurrencyButton">
		<hudScale scale="math.min(game.hudScale(), 1.5)" />
		<size dependentOnElement="element:name()" dependentOnComponent="Sprite" />
		<position relativeTo="MonstersButton" vAnchor="BOTTOM" hAnchor="LEFT" />
		<orientation vAnchor="TOP" hAnchor="LEFT" xOffset="0" yOffset="0" priorityOffset="0" />
		<spriteComponent name="Sprite">
			<event name="onInit" params="component, element">
				component("spriteName"):SetString("gfx/menu/store_button_currency")
				component("size"):SetFloat(0.48*game.hudScale())
				component("layer"):SetString("FrontPopUps")
				if(game.playerLevel() &lt; 4) then
					component:setColor(0.5, 0.5, 0.5)
				end
			</event>
		</spriteComponent>
		<textComponent name="Text">
			<size w="80*game.menuScaleX()" h="30" />
			<position relativeTo="element:name()" vAnchor="BOTTOM" hAnchor="HCENTER" />
			<orientation vAnchor="BOTTOM" hAnchor="HCENTER" xOffset="0" yOffset="15" priorityOffset="-1" />
			<event name="onInit" params="component, element">
				component("multiline"):SetInt(0)
				component("autoScaleFactor"):SetFloat(0.01)
				component("autoScale"):SetInt(1)
				component("font"):Set(game.getTextFont())
				component("size"):SetFloat(0.23*game.hudScale())
				component("alignment"):SetInt(MenuTextComponent_TEXT_HCENTER_ALIGNED)
				component("text"):SetString("STORE_CURRENCY")
				component("layer"):SetString("FrontPopUps")
			</event>
		</textComponent>
		<touchComponent name="Touch">
			<size dependentOnElement="element:name()" dependentOnComponent="Sprite" />
			<position relativeTo="element:name()" vAnchor="VCENTER" hAnchor="HCENTER" />
			<orientation vAnchor="VCENTER" hAnchor="HCENTER" xOffset="0" yOffset="0" priorityOffset="0" />
			<event name="onTouchDown" params="component, element">
				element["Sprite"]:setColor(0.5, 0.5, 0.5)
				element["Text"]:setColor(0.5, 0.5, 0.5)
			</event>
			<event name="onTouchUp" params="component, element">
				element["Sprite"]:setColor(1.0, 1.0, 1.0)
				element["Text"]:setColor(1.0, 1.0, 1.0)
				playSoundFx("audio/sfx/menu_click_small.wav")
				store:SelectCategory(game.StoreCategories_TYPE_CURRENCY)
				store:SetMenuState(game.StoreContext_IDLE)
				element:parent()["Functions"]:DoStoredScript("dismissMarketButton");
				game.logEvent("enter_iap_store", "source", "main_market_menu", "context", "StoreContext")
				menu:popPopUp()
			</event>
			<event name="onTouchRelease" params="component, element">
				element["Sprite"]:setColor(1.0, 1.0, 1.0)
				element["Text"]:setColor(1.0, 1.0, 1.0)
			</event>
		</touchComponent>
		<event name="onInit" params="element">
			if(game.playerLevel() &lt; 4) then
				element["Text"]:setColor(0.5, 0.5, 0.5)
				element["Touch"]("enabled"):SetInt(0)
			end

			if(game.activeEventForCategory(game.StoreCategories_TYPE_CURRENCY)) then
				local attachedTemplate = menu:addTemplateElement("template_saleindicator", "attachedTemplate", element)
				attachedTemplate:setParent(element)
				attachedTemplate:setOrientation(MenuOrientation(0, -5*game.hudScale(), -3, HCENTER, VCENTER))
				attachedTemplate:setRelativeObjectAnchors(HCENTER, BOTTOM)
				attachedTemplate:init()
				attachedTemplate("setNewScale"):SetFloat(game.menuScaleX())
				attachedTemplate["Text"]("layer"):SetString("FrontPopUps")
				attachedTemplate["Tag"]("layer"):SetString("FrontPopUps")
				attachedTemplate:setPositionBroadcast(true)
			end
		</event>
	</element>

	<element name="StarpowerButton">
		<hudScale scale="math.min(game.hudScale(), 1.5)" />
		<size dependentOnElement="element:name()" dependentOnComponent="Sprite" />
		<position relativeTo="CurrencyButton" vAnchor="BOTTOM" hAnchor="RIGHT" />
		<orientation vAnchor="BOTTOM" hAnchor="LEFT" xOffset="-1*game.menuScaleX()" yOffset="0" priorityOffset="0" />
		<spriteComponent name="Sprite">
			<event name="onInit" params="component, element">
				component("spriteName"):SetString("gfx/menu/store_button_starshop")
				component("size"):SetFloat(0.48*game.hudScale())
				component("layer"):SetString("FrontPopUps")
			</event>
		</spriteComponent>
		<textComponent name="Text">
			<size w="80*game.menuScaleX()" h="30" />
			<position relativeTo="element:name()" vAnchor="BOTTOM" hAnchor="HCENTER" />
			<orientation vAnchor="BOTTOM" hAnchor="HCENTER" xOffset="0" yOffset="15" priorityOffset="-1" />
			<event name="onInit" params="component, element">
				component("multiline"):SetInt(0)
				component("autoScaleFactor"):SetFloat(0.01)
				component("autoScale"):SetInt(1)
				component("font"):Set(game.getTextFont())
				component("size"):SetFloat(0.23*game.hudScale())
				component("alignment"):SetInt(MenuTextComponent_TEXT_HCENTER_ALIGNED)
				component("text"):SetString("STORE_STARPOWER")
				component("layer"):SetString("FrontPopUps")
			</event>
		</textComponent>
		<touchComponent name="Touch">
			<size dependentOnElement="element:name()" dependentOnComponent="Sprite" />
			<position relativeTo="element:name()" vAnchor="VCENTER" hAnchor="HCENTER" />
			<orientation vAnchor="VCENTER" hAnchor="HCENTER" xOffset="0" yOffset="0" priorityOffset="0" />
			<event name="onTouchDown" params="component, element">
				if((game.playerLevel() >= 10 or game.numIslands() > 1) and 
					not (game.isUnderlingIsland() or 
					game.isComposerIsland() or
					game.isCelestialIsland() or
					game.isAmberIsland() or					
					game.isEtherealAtelierIsland() or
					game.isBattleIsland())) then
					
					element["Sprite"]:setColor(0.5, 0.5, 0.5)
					element["Text"]:setColor(0.5, 0.5, 0.5)
				end
			</event>
			<event name="onTouchUp" params="component, element">
				<![CDATA[
				playSoundFx("audio/sfx/menu_click_small.wav")
				if(game.numIslands() == 1 and game.playerLevel() < 10) then
					game.displayNotification(game.getLocalizedText("STARPOWER_CATEGORY_LOCKED"))
				elseif(game.isUnderlingIsland() or 
					game.isComposerIsland() or 
					game.isCelestialIsland() or 
					game.isAmberIsland() or 					
					game.isEtherealAtelierIsland() or
					game.isBattleIsland()) then
					
					game.displayNotification(game.getLocalizedText("STARPOWER_CATEGORY_ISLAND_LOCKED"))
				else
					element["Sprite"]:setColor(1.0, 1.0, 1.0)
					element["Text"]:setColor(1.0, 1.0, 1.0)
					element:parent():DoStoredScript("playSfx")
					store:SelectCategory(game.StoreCategories_TYPE_STARPOWER)
					store:SetMenuState(game.StoreContext_IDLE)
					element:parent()["Functions"]:DoStoredScript("dismissMarketButton");
					menu:popPopUp()
				end
				]]>
			</event>
			<event name="onTouchRelease" params="component, element">
				if((game.playerLevel() >= 10 or game.numIslands() > 1) and 
					not (game.isUnderlingIsland() or
					game.isComposerIsland() or
					game.isCelestialIsland() or
					game.isAmberIsland() or
					game.isBattleIsland())) then
				
					element["Sprite"]:setColor(1.0, 1.0, 1.0)
					element["Text"]:setColor(1.0, 1.0, 1.0)
				end
			</event>
		</touchComponent>
		<event name="onInit" params="element">
			if(game.activeEventForCategory(game.StoreCategories_TYPE_STARPOWER)) then
			
				local attachedTemplate = menu:addTemplateElement("template_saleindicator", "attachedTemplate", element)
				attachedTemplate:setParent(element)
				attachedTemplate:setOrientation(MenuOrientation(0, -5*game.hudScale(), -3, HCENTER, VCENTER))
				attachedTemplate:setRelativeObjectAnchors(HCENTER, BOTTOM)
				attachedTemplate:init()
				attachedTemplate("setNewScale"):SetFloat(game.menuScaleX())
				attachedTemplate["Text"]("layer"):SetString("FrontPopUps")
				attachedTemplate["Tag"]("layer"):SetString("FrontPopUps")
				attachedTemplate:setPositionBroadcast(true)
			end
		</event>
	</element>

	<element name="IslandsButton">
		<hudScale scale="math.min(game.hudScale(), 1.5)" />
		<size dependentOnElement="element:name()" dependentOnComponent="Sprite" />
		<position relativeTo="StarpowerButton" vAnchor="BOTTOM" hAnchor="RIGHT" />
		<orientation vAnchor="BOTTOM" hAnchor="LEFT" xOffset="-1*game.menuScaleX()" yOffset="0" priorityOffset="0" />
		<spriteComponent name="Sprite">
			<event name="onInit" params="component, element">
				component("spriteName"):SetString("gfx/menu/store_button_islands")
				component("size"):SetFloat(0.48*game.hudScale())
				component("layer"):SetString("FrontPopUps")
				if(game.playerLevel() &lt; 4) then
					component:setColor(0.5, 0.5, 0.5)
				end
			</event>
		</spriteComponent>
		<textComponent name="Text">
			<size w="80*game.menuScaleX()" h="30" />
			<position relativeTo="element:name()" vAnchor="BOTTOM" hAnchor="HCENTER" />
			<orientation vAnchor="BOTTOM" hAnchor="HCENTER" xOffset="0" yOffset="15" priorityOffset="-1" />
			<event name="onInit" params="component, element">
				component("multiline"):SetInt(0)
				component("autoScaleFactor"):SetFloat(0.01)
				component("autoScale"):SetInt(1)
				component("font"):Set(game.getTextFont())
				component("size"):SetFloat(0.23*game.hudScale())
				component("alignment"):SetInt(MenuTextComponent_TEXT_HCENTER_ALIGNED)
				component("text"):SetString("STORE_ISLANDS")
				component("layer"):SetString("FrontPopUps")
			</event>
		</textComponent>
		<touchComponent name="Touch">
			<size dependentOnElement="element:name()" dependentOnComponent="Sprite" />
			<position relativeTo="element:name()" vAnchor="VCENTER" hAnchor="HCENTER" />
			<orientation vAnchor="VCENTER" hAnchor="HCENTER" xOffset="0" yOffset="0" priorityOffset="0" />
			<event name="onTouchDown" params="component, element">
				element["Sprite"]:setColor(0.5, 0.5, 0.5)
				element["Text"]:setColor(0.5, 0.5, 0.5)
			</event>
			<event name="onTouchUp" params="component, element">
				element["Sprite"]:setColor(1.0, 1.0, 1.0)
				element["Text"]:setColor(1.0, 1.0, 1.0)
				playSoundFx("audio/sfx/menu_click_small.wav")
				store:SelectCategory(game.StoreCategories_TYPE_ISLAND)
				store:SetMenuState(game.StoreContext_IDLE)
				element:parent()["Functions"]:DoStoredScript("dismissMarketButton");
				menu:popPopUp()
			</event>
			<event name="onTouchRelease" params="component, element">
				element["Sprite"]:setColor(1.0, 1.0, 1.0)
				element["Text"]:setColor(1.0, 1.0, 1.0)
			</event>
		</touchComponent>
		<event name="onInit" params="element">
			if(game.playerLevel() &lt; 4) then
				element["Touch"]("enabled"):SetInt(0)
				element["Text"]:setColor(0.5, 0.5, 0.5)
			end
			
			if(game.activeEventForCategory(game.StoreCategories_TYPE_ISLAND)) then
				local attachedTemplate = menu:addTemplateElement("template_saleindicator", "attachedTemplate", element)
				attachedTemplate:setParent(element)
				attachedTemplate:setOrientation(MenuOrientation(0, -5*game.hudScale(), -3, HCENTER, VCENTER))
				attachedTemplate:setRelativeObjectAnchors(HCENTER, BOTTOM)
				attachedTemplate:init()
				attachedTemplate("setNewScale"):SetFloat(game.menuScaleX())
				attachedTemplate["Text"]("layer"):SetString("FrontPopUps")
				attachedTemplate["Tag"]("layer"):SetString("FrontPopUps")
				attachedTemplate:setPositionBroadcast(true)
			end
		</event>
	</element>

	<element name="AdButton">
		<hudScale scale="math.min(game.hudScale(), 1.5)" />
		<size dependentOnElement="element:name()" dependentOnComponent="Sprite" />
		<position relativeTo="IslandsButton" vAnchor="BOTTOM" hAnchor="RIGHT" />
		<orientation vAnchor="BOTTOM" hAnchor="LEFT" xOffset="-1*game.menuScaleX()" yOffset="0" priorityOffset="0" />

		<event name="onInit" params="element">
			element:SetupGenericListener(game.engineReceiver(), "game::msg::MsgPlacementInfo", "gotMsgPlacementInfo")
			element:SetupGenericListener(game.engineReceiver(), "game::msg::MsgPlacementInfoFail", "gotMsgPlacementInfoFail")
			element:SetupGenericListener(game.engineReceiver(), "game::msg::MsgPermission", "gotMsgPermission")
		</event>

		<event name="gotMsgPlacementInfoFail" params="element, msg">
			<![CDATA[
				if(msg.name == "market_xpromo_button") then
					element:GetComponent("Sprite")("visible"):SetInt(0)
					element:GetComponent("Touch")("enabled"):SetInt(0)
					element:GetComponent("Text")("visible"):SetInt(0)
				end
			]]>
		</event>

		<event name="gotMsgPlacementInfo" params="element, msg">
			<![CDATA[
				if(msg.name == "market_xpromo_button") then
					local placement =  game.nativePlacement(msg.name)
					if (placement ~= nil) then
						local ad = placement:getAd(0)
						if (ad ~= nil) then
							ad:reportImpression();
							element("placement"):SetString(msg.name)

							local adExtraData = ad:getExtraData("icon")
							if(adExtraData.spriteName ~= "") then
								element:GetComponent("Sprite")("spriteName"):SetString(adExtraData.spriteName)
							else
								element:GetComponent("Sprite"):DoStoredScript("imageSet")
							end
							
							element:GetComponent("Text")("text"):SetString(ad:getAction())
							element:GetComponent("Text")("visible"):SetInt(1)
							element:GetComponent("Touch")("enabled"):SetInt(1)
							
						else
							element:GetComponent("Sprite")("spriteName"):SetString("gfx/menu/store_button_square_crosspromo")
							element:GetComponent("Sprite")("size"):SetFloat(0.48*game.hudScale())
						end
					else
						element:GetComponent("Sprite")("spriteName"):SetString("gfx/menu/store_button_square_crosspromo")
						element:GetComponent("Sprite")("size"):SetFloat(0.48*game.hudScale())
					end	
				end
			]]>
		</event>
		
		<event name="gotMsgPermission" params="element, msg">
			if msg.name == "MORE_GAMES" and msg.allowed then
				game.logEvent("market_link_click", "game", "moregames_list")

				if(lua_sys.getPlatformName() == "pc") then
					local placement = game.nativePlacement("market_xpromo_button")
					if(placement ~= nil) then
						local ad = placement:getAd(0)
						if(ad ~= nil) then
							ad:reportClick()
						end	
					end
				else
					store:SelectCategory(game.StoreCategories_TYPE_CROSSPROMO)
					store:SetMenuState(game.StoreContext_IDLE)
					element:parent()["Functions"]:DoStoredScript("dismissMarketButton");
					menu:popPopUp()
				end
			end
		</event>

		<spriteComponent name="Sprite">
			<event name="onInit" params="component, element">
				<![CDATA[
					if(getSubPlatformName() ~= "aftb") then
						game.loadNewsFlash("market_xpromo_button")
					end
					component("spriteName"):SetString("gfx/menu/store_button_square_crosspromo")
					component("size"):SetFloat(0.48*game.hudScale())
					component("layer"):SetString("FrontPopUps")
					element:GetComponent("Touch")("enabled"):SetInt(0)
					if(getSubPlatformName() == "aftb") then
						component("visible"):SetInt(0)
					end
				]]>
			</event>
			<event name="imageSet" params="component, element">
				<![CDATA[
					local placement = game.nativePlacement(element("placement"):GetString())
					if(placement ~= nil) then
						local native = placement:getAd(0)
						if(native ~= nil) then
							if(native:hasMainImage()) then
								component:setSprite(native:getMainImage())
								component("size"):SetFloat(0.48*game.hudScale())
							end
						end	
					end
				]]>
			</event>
		</spriteComponent>
		
		<textComponent name="Text">
			<size w="80*game.menuScaleX()" h="30" />
            <position relativeTo="element:name()" vAnchor="BOTTOM" hAnchor="HCENTER" />
            <orientation vAnchor="BOTTOM" hAnchor="HCENTER" xOffset="0" yOffset="15" priorityOffset="-1" />
			<event name="onInit" params="component, element">
				<![CDATA[
					component("multiline"):SetInt(0)
					component("autoScaleFactor"):SetFloat(0.01)
					component("autoScale"):SetInt(1)
					component("font"):Set(game.getTextFont())
					component("size"):SetFloat(0.23*game.hudScale())
					component("alignment"):SetInt(MenuTextComponent_TEXT_HCENTER_ALIGNED)
					component("text"):SetString("MARKET_AD_TEXT")
					component("layer"):SetString("FrontPopUps")
					if(getSubPlatformName() == "aftb") then
						component("visible"):SetInt(0)
					end
				]]>
			</event>
		</textComponent>
		
		<touchComponent name="Touch">
			<size dependentOnElement="element:name()" dependentOnComponent="Sprite" />
			<position relativeTo="element:name()" vAnchor="VCENTER" hAnchor="HCENTER" />
			<orientation vAnchor="VCENTER" hAnchor="HCENTER" xOffset="0" yOffset="0" priorityOffset="0" />
			<event name="onTouchDown" params="component, element">
				element["Sprite"]:setColor(0.5, 0.5, 0.5)
				element["Text"]:setColor(0.5, 0.5, 0.5)
			</event>
			<event name="onTouchUp" params="component, element">
				element["Sprite"]:setColor(1.0, 1.0, 1.0)
				element["Text"]:setColor(1.0, 1.0, 1.0)
				playSoundFx("audio/sfx/menu_click_small.wav")
				game.checkGamePermission("MORE_GAMES", "popup_permission_more_games")
			</event>
			<event name="onTouchRelease" params="component, element">
				element["Sprite"]:setColor(1.0, 1.0, 1.0)
				element["Text"]:setColor(1.0, 1.0, 1.0)
			</event>
		</touchComponent>
	</element>

	<template type="template_spritesheetbutton" name="BackButton">
		<templateVar name="$layer" equals="FrontPopUps" />
		<templateVar name="$spriteScale" equals="0.5*game.hudScale()" />
		<templateVar name="$buttonMapping" equals="game.cancelButton()" />
		<position relativeTo="SAFE_AREA" vAnchor="BOTTOM" hAnchor="RIGHT" />
		<orientation vAnchor="BOTTOM" hAnchor="RIGHT" xOffset="10*game.hudScale()" yOffset="10*game.hudScale()" priorityOffset="4" />
		<touchComponent name="Touch">
			<event name="onTouchDown" params="component, element">
				onTouchDown(component, element)
				element["Overlay"]:setColor(0.5, 0.5, 0.5)
			</event>
			<event name="onTouchUp" params="component, element">
				onTouchUp(component, element)
				element["Overlay"]:setColor(1.0, 1.0, 1.0)
				element:parent()["Functions"]:DoStoredScript("dismissMarketButton");
				game.loadWorldContext()
			</event>
			<event name="onTouchRelease" params="component, element">
				onTouchRelease(component, element)
				element["Overlay"]:setColor(1.0, 1.0, 1.0)
			</event>
		</touchComponent>
		<spriteSheetComponent name="Overlay">
			<position relativeTo="element:name()" vAnchor="VCENTER" hAnchor="HCENTER" />
			<orientation vAnchor="VCENTER" hAnchor="HCENTER" xOffset="0" yOffset="0" priorityOffset="-1" />
			<event name="onInit" params="component, element">
				component("spriteName"):SetString("button_no")
				component("sheetName"):SetString("xml_resources/context_buttons.xml")
				component("size"):SetFloat(0.5*game.hudScale())
				component("layer"):SetString("FrontPopUps")
			</event>
		</spriteSheetComponent>
		<textComponent name="Text">
			<position relativeTo="element:name()" vAnchor="BOTTOM" hAnchor="HCENTER" />
			<orientation vAnchor="TOP" hAnchor="HCENTER" xOffset="0" yOffset="-6*game.hudScale()" priorityOffset="-2" />
			<event name="onInit" params="component, element">
				component("multiline"):SetInt(0)
				component("font"):Set(game.getTitleFont())
				component("alignment"):SetInt(MenuTextComponent_TEXT_HCENTER_ALIGNED)
				component("text"):SetString("EXIT")
				component("size"):SetFloat(0.2*game.hudScale())
				component("layer"):SetString("FrontPopUps")
			</event>
		</textComponent>
		<event name="gotMsgKeyDown" params="element, msg">
			if(game.marketExitButton() == msg.key.val and element["Touch"]("enabled"):GetInt() ~= 0 and element("buttonDown"):GetInt() == 0) then
				element["Touch"]("checkOnTop"):SetInt(0)
				if(element["Touch"]("onTop"):GetInt() == 1) then
					element("buttonDown"):SetInt(msg.key.val)
					element["Touch"]:DoStoredScript("onTouchDown")
				end
			else
				gotMsgKeyDown(element, msg)
			end
		</event>
		<event name="onTick" params="element, dt">
			onTick(element, dt)
			if(element["UpSprite"]("size"):GetFloat() ~= element["Overlay"]("size"):GetFloat()) then
				element["Overlay"]("size"):SetFloat(element["UpSprite"]("size"):GetFloat())
			end
		</event>
		<event name="enable" params="element">
			enable(element)
			element["Text"]:setColor(1.0, 1.0, 1.0)
			element["Overlay"]:setColor(1.0, 1.0, 1.0)
		</event>
		<event name="disable" params="element">
			disable(element)
			element["Text"]:setColor(0.5, 0.5, 0.5)
			element["Overlay"]:setColor(0.5, 0.5, 0.5)
		</event>

		<event name="gotMsgKeyUp" params="element, msg">
			if(game.marketExitButton() == msg.key.val and element["Touch"]("enabled"):GetInt() ~= 0 and element("buttonDown"):GetInt() == msg.key.val) then
				element("buttonDown"):SetInt(0)
				element["Touch"]:DoStoredScript("onTouchUp")
			else
				gotMsgKeyUp(element, msg)
			end
		</event>
	</template>
	
	<event name="disableBackButtons" params="element">
		element["BackButton"]:DoStoredScript("disable")
	</event>
	
	<element name="RemoveAdsLabel">
		<size dependentOnElement="element:name()" dependentOnComponent="Text" />
		<position relativeTo="SAFE_AREA" vAnchor="BOTTOM" hAnchor="HCENTER" />
		<orientation vAnchor="BOTTOM" hAnchor="HCENTER" xOffset="0" yOffset="0.03*screenHeight()" priorityOffset="8" />
		<textComponent name="Text">
			<size w="0.42*screenWidth()" h="0.12*screenHeight()" />
			<position relativeTo="PARENT" vAnchor="VCENTER" hAnchor="HCENTER" />
			<orientation vAnchor="VCENTER" hAnchor="HCENTER" xOffset="0" yOffset="0" priorityOffset="0" />
			<event name="onInit" params="component, element">
				component("multiline"):SetInt(1)
				component("font"):Set(game.getTextFont())
				component("size"):SetFloat(0.4*game.hudScale())
				component("alignment"):SetInt(MenuTextComponent_TEXT_HCENTER_ALIGNED)
				component("text"):SetString("REMOVE_ADS_DESC")
				component("layer"):SetString("FrontPopUps")
				component("autoScaleFactor"):SetFloat(0.01)
				component("autoScale"):SetInt(1)
				
				if(not game.seesAdsThisSession()) then
					component("visible"):SetInt(0)
				end
			</event>
		</textComponent>
	</element>

	<element name="Functions">
		<event name="disableMonsterButton" params="element">
			element:parent()["MonstersButton"]["Touch"]("enabled"):SetInt(0)
			element:parent()["MonstersButton"]["Sprite"]:setColor(0.5, 0.5, 0.5)
			element:parent()["MonstersButton"]["Text"]:setColor(0.5, 0.5, 0.5)
		</event>
		<event name="disableStarpowerButton" params="element">
			element:parent()["StarpowerButton"]["Touch"]("enabled"):SetInt(0)
			element:parent()["StarpowerButton"]["Sprite"]:setColor(0.5, 0.5, 0.5)
			element:parent()["StarpowerButton"]["Text"]:setColor(0.5, 0.5, 0.5)
		</event>
		<event name="disableDecorationsButton" params="element">
			element:parent()["DecorationsButton"]["Touch"]("enabled"):SetInt(0)
			element:parent()["DecorationsButton"]["Sprite"]:setColor(0.5, 0.5, 0.5)
			element:parent()["DecorationsButton"]["Text"]:setColor(0.5, 0.5, 0.5)
		</event>
		<event name="disableStructuresButton" params="element">
			element:parent()["StructuresButton"]["Touch"]("enabled"):SetInt(0)
			element:parent()["StructuresButton"]["Sprite"]:setColor(0.5, 0.5, 0.5)
			element:parent()["StructuresButton"]["Text"]:setColor(0.5, 0.5, 0.5)
		</event>
		<event name="disableIslandsButton" params="element">
			element:parent()["IslandsButton"]["Touch"]("enabled"):SetInt(0)
			element:parent()["IslandsButton"]["Sprite"]:setColor(0.5, 0.5, 0.5)
			element:parent()["IslandsButton"]["Text"]:setColor(0.5, 0.5, 0.5)
		</event>
		<event name="disableCurrencyButton" params="element">
			element:parent()["CurrencyButton"]["Touch"]("enabled"):SetInt(0)
			element:parent()["CurrencyButton"]["Sprite"]:setColor(0.5, 0.5, 0.5)
			element:parent()["CurrencyButton"]["Text"]:setColor(0.5, 0.5, 0.5)
		</event>
		<event name="disableAdButton" params="element">
			element:parent()["AdButton"]["Touch"]("enabled"):SetInt(0)
			element:parent()["AdButton"]["Sprite"]:setColor(0.5, 0.5, 0.5)
			element:parent()["AdButton"]["Text"]:setColor(0.5, 0.5, 0.5)
		</event>
		<event name="disableCostumesButton" params="element">
			element:parent()["CostumesButton"]["Touch"]("enabled"):SetInt(0)
			element:parent()["CostumesButton"]["Sprite"]:setColor(0.5, 0.5, 0.5)
			element:parent()["CostumesButton"]["Text"]:setColor(0.5, 0.5, 0.5)
		</event>
		
		<event name="dismissMarketButton" params="element">
			local placement =  game.nativePlacement("market_xpromo_button")
			if (placement ~= nil) then
				placement:reportDismiss();
			end
		</event>
	</element>
	
</menu>
