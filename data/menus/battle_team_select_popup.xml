<!-- Menu for selecting a player's team from the pool of available monsters on battle island -->
<menu xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="menu.xsd">
	<element name="Fade">
		<size dependentOnElement="element:name()" dependentOnComponent="Sprite" />
		<position relativeTo="SCREEN" vAnchor="VCENTER" hAnchor="HCENTER" />
		<orientation vAnchor="VCENTER" hAnchor="HCENTER" xOffset="0" yOffset="0" priorityOffset="10" />
		<spriteComponent name="Sprite">
			<event name="onInit" params="component, element">
				component("spriteName"):SetString("__BUILTIN__WHITE_TEXTURE")
				component:setScale(Vector2(lua_sys.screenWidth()*0.25, lua_sys.screenHeight()*0.25))
				component:setColor(0.0, 0.0, 0.0)
				component("alpha"):SetFloat(0.5)
				component("layer"):SetString("MidPopUps")
			</event>
		</spriteComponent>
		<touchComponent name="Touch">
			<size dependentOnElement="element:name()" />
			<position relativeTo="element:name()" vAnchor="VCENTER" hAnchor="HCENTER" />
			<orientation vAnchor="VCENTER" hAnchor="HCENTER" xOffset="0" yOffset="0" priorityOffset="0" />
		</touchComponent>
	</element>

	<element name="SelectMonsters">

		<position relativeTo="PARENT" vAnchor="VCENTER" hAnchor="HCENTER" />
		<orientation vAnchor="VCENTER" hAnchor="HCENTER" xOffset="0" yOffset="0" priorityOffset="0" />


		<element name="MonsterBg">
			<size dependentOnElement="element:name()" dependentOnComponent="Sprite"/>
			<position relativeTo="PARENT" vAnchor="VCENTER" hAnchor="HCENTER" />
			<orientation vAnchor="VCENTER" hAnchor="HCENTER" xOffset="0" yOffset="0" priorityOffset="6" />
			<ninesliceComponent name="Sprite">
				<size w="235*game.menuScaleX()" h="230*game.menuScaleY()" />
				<position relativeTo="PARENT" vAnchor="VCENTER" hAnchor="HCENTER" />
				<orientation vAnchor="VCENTER" hAnchor="HCENTER" xOffset="0" yOffset="0" priorityOffset="0" />
				<event name="onInit" params="component, element">
					<![CDATA[
						component("topHeight"):SetFloat(50.0)
						component("bottomHeight"):SetFloat(50.0)
						component("leftWidth"):SetFloat(50.0)
						component("rightWidth"):SetFloat(50.0)
						component("size"):SetFloat(0.5)
						component("includeBorder"):SetInt(1)
						component("spriteName"):SetString("gfx/menu/Black9SFrame50")
						component("layer"):SetString("MidPopUps")
						game.setClipping("Clipping", 0, (element:absY() + element:parent():GetElement("TitleFrame"):absH())*lua_sys.deviceScaleY(),
							lua_sys.screenWidth()*lua_sys.deviceScaleX(), (element:absH()-60)*lua_sys.deviceScaleY())
					]]>
				</event>
			</ninesliceComponent>
		</element>

		<element name="TitleFrame">
			<size dependentOnElement="element:name()" dependentOnComponent="Sprite" />
			<position relativeTo="MonsterBg" vAnchor="TOP" hAnchor="HCENTER" />
			<orientation vAnchor="TOP" hAnchor="HCENTER" xOffset="0" yOffset="0" priorityOffset="-1" />
			<ninesliceComponent name="Sprite">
				<size w="235*game.menuScaleX()" h="50*game.menuScaleX()" />
				<event name="onInit" params="component, element">
					<![CDATA[
						component("topHeight"):SetFloat(50.0)
						component("bottomHeight"):SetFloat(50.0)
						component("leftWidth"):SetFloat(50.0)
						component("rightWidth"):SetFloat(50.0)
						component("size"):SetFloat(0.5)
						component("includeBorder"):SetInt(1)
						component("spriteName"):SetString("gfx/menu/GreyTitleFrame")
						component("layer"):SetString("MidPopUps")
					]]>
				</event>
			</ninesliceComponent>
		</element>

		<element name="TitleText">
			<size dependentOnElement="element:name()" dependentOnComponent="Text" />
			<position relativeTo="TitleFrame" vAnchor="VCENTER" hAnchor="HCENTER" />
			<orientation vAnchor="VCENTER" hAnchor="HCENTER" xOffset="0" yOffset="0" priorityOffset="-1" />
			<textComponent name="Text">
				<size h="35" />
				<event name="onInit" params="component, element">
					<![CDATA[
						component("multiline"):SetInt(0)
						component("autoScale"):SetInt(1)
						component("font"):Set(game.getTextFont())
						component("size"):SetFloat(0.35*game.menuScaleX())
						component("alignment"):SetInt(lua_sys.MenuTextComponent_TEXT_LEFT_ALIGNED)
						component:setColor(0.43, 0.98, 0.02)
						component("text"):SetString(LOC("SELECT_MONSTER"))
						component("layer"):SetString("MidPopUps")
					]]>
				</event>
			</textComponent>
		</element>

		<element name="TeamSelect_MonsterList">
			<size w="235*game.menuScaleX()" h="(215*game.menuScaleY())-50*game.menuScaleX()" />
			<position relativeTo="MonsterBg" vAnchor="BOTTOM" hAnchor="HCENTER" />
			<orientation vAnchor="BOTTOM" hAnchor="HCENTER" xOffset="0" yOffset="0" priorityOffset="-1" />

			<swipeComponent name="Swiper">
				<event name="onInit" params="component, element">
					<![CDATA[
						component("smoothMode"):SetInt(1)
					]]>
				</event>
				<event name="refresh" params="component, element">
					include("ScrollingListHelper").SwiperRefresh(component, element)
				</event>
				<event name="onTick" params="component, element, dt">
					include("ScrollingListHelper").SwiperTick(component, element, dt)
				</event>
			</swipeComponent>

			<touchComponent name="Touch">
				<size dependentOnElement="element:name()" />
				<event name="onInit" params="component, element">
					component("singleTouch"):SetInt(1)
				</event>
			</touchComponent>

			<event name="onInit" params="element">
				<![CDATA[
				element("NewSelectedEntry"):SetString("")
				element("NewSelectedEntryID"):SetInt(0)

				include("ScrollingListHelper").ListInit(element, {direction=MenuSwipeComponent_SwipeDirectionVertical})
				]]>
			</event>

			<event name="onTick" params="element, dt">
				<![CDATA[
					include("ScrollingListHelper").ListTick(element, dt)
				]]>
			</event>

			<event name="populate" params="element">
				<![CDATA[

					print("Populating!")

					local ScrollingListHelper = include("ScrollingListHelper")

					-- first remove all child entries
					ScrollingListHelper.ListClear(element)

					local function isSlotted(id, selectedSlot)
						local selectTeamElement = element:root()["SelectTeam"]
						for i=0,2 do
							if not (i == selectedSlot) then
								local monsterIdVar = selectTeamElement["Slot"..i]("MonsterID")
								if monsterIdVar:GetInt() == id then
									print("Monster "..id.." is slotted in slot "..i)
									return true
								end
							end
						end
						return false
					end

					local campaignId = game.getBattleClientData():getSelectedCampaignId()
					local progress = game.getBattlePlayerData():getCampaignProgress(campaignId)
					local campaignData = game.getBattleCampaignData(campaignId)
					local battleData = campaignData.battles[progress]

					local selectedSlot = element:root()["SelectTeam"]("TargetSlot"):GetInt()
					local selectedMonsterId = element:root()["SelectTeam"]["Slot"..selectedSlot]("MonsterID"):GetInt()

					local monsterIds = game.availableBattleMonsters()
					local numMonsters = monsterIds:size()

					local entryId = 0

					local createFunc = function(idx, itemName)

						local monsterId = monsterIds[idx]

						--filter out monsters that are currently in the other slots
						if not isSlotted(monsterId, selectedSlot)
							and game.checkCampaignAndSlotRequirements(monsterId, campaignData, battleData, selectedSlot)
						then
								--print("adding entry")
								local entry = menu:addTemplateElement("template_battle_monster_list_entry", itemName, element)
								entry("List"):SetString("TeamSelect_MonsterList")
								entry("MonsterID"):SetInt(monsterId)
								entry("EntryNum"):SetInt(entryId)

								if game.isMonsterTraining(monsterId) then
									entry:DoStoredScript("disable")
								end

								entryId = entryId + 1
								return entry
						end
					end

					ScrollingListHelper.ListPopulate(element, numMonsters, createFunc)

				]]>
			</event>

			<!-- called by list item -->
			<event name="selectNewEntry" params="element">
				<![CDATA[
					print("selecting new entry")

					-- get selected monster
					local selectedMonsterID = element("NewSelectedEntryID"):GetInt()
					print("Selected Monster "..selectedMonsterID)
					local selectTeam = element:root():GetElement("SelectTeam")

					local slotID = selectTeam("TargetSlot"):GetInt()
					game.setPreferredCampaignBattleLoadout(slotID, selectedMonsterID)
					local targetSlot = selectTeam:GetElement("Slot"..slotID)
					targetSlot("MonsterID"):SetInt(selectedMonsterID)
					targetSlot:DoStoredScript("refresh")
					selectTeam:DoStoredScript("show")
				]]>
			</event>

		</element>

		<template type="template_spritesheetbutton" name="BackButton">
			<templateVar name="$upSpriteName" equals="'button_play'" />
			<templateVar name="$sheetName" equals="'xml_resources/buttons01.xml'" />
			<templateVar name="$spriteScale" equals="0.33*game.menuScaleY()" />
			<templateVar name="$layer" equals="'MidPopUps'" />
			<position relativeTo="MonsterBg" vAnchor="VCENTER" hAnchor="LEFT" />
			<orientation vAnchor="VCENTER" hAnchor="RIGHT" xOffset="16*game.menuScaleX()" yOffset="0" priorityOffset="0" />
			<event name="onPostInit" params="element">
				<![CDATA[

					if(element["BoundsSprite"]("isSourceRotated"):GetInt() == 1) then
						element["BoundsSprite"]("vFlip"):SetInt(1)
					else
						element["BoundsSprite"]("hFlip"):SetInt(1)
					end

					if(element["UpSprite"]("isSourceRotated"):GetInt() == 1) then
						element["UpSprite"]("vFlip"):SetInt(1)
					else
						element["UpSprite"]("hFlip"):SetInt(1)
					end

					if(element["DownSprite"]("isSourceRotated"):GetInt() == 1) then
						element["DownSprite"]("vFlip"):SetInt(1)
					else
						element["DownSprite"]("hFlip"):SetInt(1)
					end
				]]>
			</event>

			<event name="setVisible" params="element">
				setVisible(element)
				element["BgElement"]["Sprite"]:setColor(1.0, 1.0, 1.0)
				element["BgElement"]["Touch"]("enabled"):SetInt(1)
				element["BgElement"]["Sprite"]("visible"):SetInt(1)
			</event>
			<event name="setInvisible" params="element">
				setInvisible(element)
				element["BgElement"]["Sprite"]:setColor(0.5, 0.5, 0.5)
				element["BgElement"]["Touch"]("enabled"):SetInt(0)
				element["BgElement"]["Sprite"]("visible"):SetInt(0)
			</event>

			<element name="BgElement">
				<size w="35*game.menuScaleX()" h="35*game.menuScaleY()" />
				<position relativeTo="PARENT" vAnchor="VCENTER" hAnchor="HCENTER" />
				<orientation vAnchor="VCENTER" hAnchor="HCENTER" xOffset="0" yOffset="0" priorityOffset="1" />
				<ninesliceComponent name="Sprite">
					<size dependentOnElement="element:name()" />
					<position relativeTo="PARENT" vAnchor="VCENTER" hAnchor="HCENTER" />
					<orientation vAnchor="VCENTER" hAnchor="HCENTER" xOffset="0" yOffset="0" priorityOffset="0" />
					<event name="onInit" params="component, element">
						component("topHeight"):SetFloat(17.0)
						component("bottomHeight"):SetFloat(17.0)
						component("leftWidth"):SetFloat(17.0)
						component("rightWidth"):SetFloat(17.0)
						component("includeBorder"):SetInt(1)
						component("size"):SetFloat(0.5*game.hudScale())
						component("spriteName"):SetString("gfx/menu/button_vert_square01")
						component("layer"):SetString("MidPopUps")
					</event>
				</ninesliceComponent>
				<touchComponent name="Touch">
					<size dependentOnElement="element:name()" />
					<position relativeTo="PARENT" vAnchor="VCENTER" hAnchor="HCENTER" />
					<orientation vAnchor="VCENTER" hAnchor="HCENTER" xOffset="0" yOffset="0" priorityOffset="0" />
					<event name="onTouchDown" params="component, element">
						element:parent()["Touch"]:DoStoredScript("onTouchDown")
					</event>
					<event name="onTouchUp" params="component, element">
						element:parent()["Touch"]:DoStoredScript("onTouchUp")
					</event>
					<event name="onTouchRelease" params="component, element">
						element:parent()["Touch"]:DoStoredScript("onTouchRelease")
					</event>
				</touchComponent>
			</element>
			<touchComponent name="Touch">
				<event name="onTouchDown" params="component, element">
					onTouchDown(component, element)
					element["BgElement"]["Sprite"]:setColor(0.5, 0.5, 0.5)
				</event>
				<event name="onTouchRelease" params="component, element">
					onTouchRelease(component, element)
					element["BgElement"]["Sprite"]:setColor(1.0, 1.0, 1.0)
				</event>
				<event name="onTouchUp" params="component, element">
					<![CDATA[
					onTouchUp(component, element)
					element:root():GetElement("SelectTeam"):DoStoredScript("show")
				]]>
				</event>
			</touchComponent>
		</template>

		<event name="onInit" params="element">
			<![CDATA[
				element("Refresh"):SetInt(0)
			]]>
		</event>

		<event name="onTick" params="element">
			<![CDATA[
			if element("Refresh"):GetInt() == 1 then
				element["TeamSelect_MonsterList"]:DoStoredScript("populate")
				element("Refresh"):SetInt(0)
			end
			]]>
		</event>

	</element>

	<event name="queuePop" params="element">
		element:root():popPopUp()
	</event>

</menu>