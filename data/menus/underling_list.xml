<?xml version="1.0" encoding="utf-8"?>
<menu xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="menu.xsd">

	<event name="onInit" params="element">
		element("transitionTime"):SetFloat(0.0)
		element("filter"):SetInt(game.getLastZapFilter())
		element("numTabs"):SetInt(0)
		element("numItems"):SetInt(0)
		element:SetupGenericListener(game.engineReceiver(), "game::msg::MsgDestroyMonster", "gotMsgDestroyMonster")
		element:SetupGenericListener(game.engineReceiver(), "game::msg::MsgEvolutionUnlockedComplete", "gotMsgEvolutionUnlockedComplete")
		
		element:DoStoredScript("initTabs")
	</event>
	
	<event name="gotMsgDestroyMonster" params="element, msg">
		element["HotelEntries"]:DoStoredScript("repopulate")
	</event>
	
	<event name="gotMsgEvolutionUnlockedComplete" params="element, msg">
	
		local numItems = element:V("numItems"):GetInt()
		for i=0,numItems-1 do
			local underlingItem = element:E("HotelEntries"):E("monster"..i)
			if(underlingItem ~= nil) then
				if(underlingItem:V("ID"):GetInt() == msg.monsterUid) then
					underlingItem:unlock()
					break
				end
			end
		end
	</event>

	<event name="onPostInit" params="element">
		<![CDATA[
		element("transitionState"):SetInt(1)
		element:DoStoredScript("selectNewTab")
		]]>
	</event>
	
	<event name="onTick" params="element, dt">
		<![CDATA[
		if(dt < game.maxTickTime()) then
			local transitionState = element("transitionState"):GetInt()
			
			if(transitionState ~= 0) then
				local transitionTime = element("transitionTime"):GetFloat()
				
				element:DoStoredScript("TickTransition")
				
				if(transitionState == 1) then
					transitionTime = (transitionTime + dt*3)
				elseif(transitionState == 2) then
					transitionTime = (transitionTime - dt*3)
				end
				
				transitionTime = clamp(transitionTime, 0.0, 1.0)
				element("transitionTime"):SetFloat(transitionTime)
				
				if(transitionTime >= 1.0) then
					element("transitionState"):SetInt(0)
					element("transitionTime"):SetFloat(1.0)
					element:DoStoredScript("TickTransition")
				elseif(transitionTime <= 0.0) then
					element:root():popPopUp()
				end
			end
		end
		]]>
	</event>
	
	<event name="TickTransition" params="element">
		local transitionTime = element("transitionTime"):GetFloat()
		local frame = element:GetElement("bg")
		frame("xOffset"):SetFloat(lua_sys.screenWidth()*(0.5) + (-0.5)*lua_sys.screenWidth()*(1/transitionTime))
		element["FadedBG"]["Sprite"]("alpha"):SetFloat(transitionTime*0.5)
		game.setClipping("Clipping", (frame:absX() + 10)*lua_sys.deviceScaleX(), (frame:absY() + 50*game.hudScale())*lua_sys.deviceScaleY(), (frame:absW() - 20)*lua_sys.deviceScaleX(), (frame:absH() - 50*game.hudScale() - 10)*lua_sys.deviceScaleY())
	</event>
	
	<event name="queuePop" params="element">
		element("transitionState"):SetInt(2)
	</event>
	
	<element name="FadedBG">
		<size dependentOnElement="element:name()" dependentOnComponent="Sprite" />
		<position relativeTo="SCREEN" vAnchor="VCENTER" hAnchor="HCENTER" />
		<orientation vAnchor="VCENTER" hAnchor="HCENTER" xOffset="0" yOffset="0" priorityOffset="10" />
		<spriteComponent name="Sprite">
			<event name="onInit" params="component, element">
				component("spriteName"):SetString("__BUILTIN__WHITE_TEXTURE")
				component:setScale(Vector2(lua_sys.screenWidth()*0.25, lua_sys.screenHeight()*0.25))
				component:setColor(0.0, 0.0, 0.0)
				component("alpha"):SetFloat(0.0)
				component("layer"):SetString("MidPopUps")
			</event>
		</spriteComponent>
		<touchComponent name="Touch">
			<size dependentOnElement="element:name()" />
			<position relativeTo="element:name()" vAnchor="VCENTER" hAnchor="HCENTER" />
			<orientation vAnchor="VCENTER" hAnchor="HCENTER" xOffset="0" yOffset="0" priorityOffset="15" />
		</touchComponent>
	</element>	
	
	<element name="bg">
		<size dependentOnElement="element:name()" dependentOnComponent="Sprite" />
		<position relativeTo="SCREEN" vAnchor="VCENTER" hAnchor="HCENTER" />
		<orientation vAnchor="VCENTER" hAnchor="HCENTER" xOffset="-1*lua_sys.screenWidth()" yOffset="0" priorityOffset="6" />
		<ninesliceComponent name="Sprite">
			<size w="400*game.menuScaleX()" h="275*game.menuScaleX()" />
			<event name="onInit" params="component, element">
				component("topHeight"):SetFloat(50.0)
				component("bottomHeight"):SetFloat(50.0)
				component("leftWidth"):SetFloat(50.0)
				component("rightWidth"):SetFloat(50.0)
				component("includeBorder"):SetInt(1)
				component("size"):SetFloat(0.5)
				component("spriteName"):SetString("gfx/menu/Black9SFrame50")
				component("layer"):SetString("MidPopUps")
			</event>
		</ninesliceComponent>
		<spriteSheetComponent name="Flourish1">
			<position relativeTo="element:name()" vAnchor="TOP" hAnchor="LEFT" />
			<orientation vAnchor="TOP" hAnchor="LEFT" xOffset="7" yOffset="7" priorityOffset="-2" />
			<event name="onInit" params="component, element">
				component("spriteName"):SetString("menu_swirl_01")
				component("sheetName"):SetString("xml_resources/hud01.xml")
				component("size"):SetFloat(0.5*game.menuScaleX())
				component("layer"):SetString("MidPopUps")
			</event>
		</spriteSheetComponent>
		<spriteSheetComponent name="Flourish2">
			<position relativeTo="element:name()" vAnchor="TOP" hAnchor="RIGHT" />
			<orientation vAnchor="TOP" hAnchor="RIGHT" xOffset="7" yOffset="10" priorityOffset="-2" />
			<event name="onInit" params="component, element">
				component("spriteName"):SetString("menu_swirl_02")
				component("sheetName"):SetString("xml_resources/hud01.xml")
				component("size"):SetFloat(0.5*game.menuScaleX())
				component("rotation"):SetFloat(-0.5*math.pi)
				component("layer"):SetString("MidPopUps")
			</event>
		</spriteSheetComponent>
	</element>
	
	<element name="BlackCover">
		<size dependentOnElement="element:name()" dependentOnComponent="Sprite" />
		<position relativeTo="bg" vAnchor="TOP" hAnchor="HCENTER" />
		<orientation vAnchor="TOP" hAnchor="HCENTER" xOffset="0" yOffset="10" priorityOffset="-1" />
		<ninesliceComponent name="Sprite">
			<size w="375*game.menuScaleX()" h="43*game.hudScale()" />
			<event name="onInit" params="component, element">
				component("topHeight"):SetFloat(1.0)
				component("bottomHeight"):SetFloat(1.0)
				component("leftWidth"):SetFloat(1.0)
				component("rightWidth"):SetFloat(1.0)
				component("size"):SetFloat(0.5)
				component("includeBorder"):SetInt(1)
				component("spriteName"):SetString("__BUILTIN__WHITE_TEXTURE")
				component:setColor(0.0, 0.0, 0.0)
				component("layer"):SetString("MidPopUps")
			</event>
		</ninesliceComponent>
	</element>
	
	<element name="TitleFrame">
		<size dependentOnElement="element:name()" dependentOnComponent="Sprite" />
		<position relativeTo="bg" vAnchor="TOP" hAnchor="HCENTER" />
		<orientation vAnchor="TOP" hAnchor="HCENTER" xOffset="0" yOffset="-3*game.hudScale()" priorityOffset="-3" />
		<ninesliceComponent name="Sprite">
			<size w="200*game.menuScaleX()" h="50*game.hudScale()" />
			<event name="onInit" params="component, element">
				component("topHeight"):SetFloat(44.0)
				component("bottomHeight"):SetFloat(44.0)
				component("leftWidth"):SetFloat(50.0)
				component("rightWidth"):SetFloat(50.0)
				component("size"):SetFloat(0.5)
				component("includeBorder"):SetInt(1)
				component("spriteName"):SetString("gfx/menu/GreyTitleFrame")
				component("layer"):SetString("MidPopUps")
				component("visible"):SetInt(0)
			</event>
		</ninesliceComponent>
	</element>
	
	<element name="FadeSprite">
		<size dependentOnElement="element:name()" dependentOnComponent="Sprite" />
		<position relativeTo="TitleFrame" vAnchor="BOTTOM" hAnchor="HCENTER" />
		<orientation vAnchor="TOP" hAnchor="HCENTER" xOffset="0" yOffset="0" priorityOffset="-2" />
		<spriteComponent name="Sprite">
			<event name="onInit" params="component, element">
				component("spriteName"):SetString("gfx/fade_sprite")
				component:setScale(Vector2(30.0*game.menuScaleX(), 0.5*game.menuScaleY()))
				component("layer"):SetString("Clipping")
			</event>
		</spriteComponent>
	</element>
	
	<element name="Title">
		<size dependentOnElement="element:name()" dependentOnComponent="Text"/>
		<position relativeTo="bg" vAnchor="TOP" hAnchor="HCENTER" />
		<orientation vAnchor="TOP" hAnchor="HCENTER" xOffset="0" yOffset="20*game.hudScale()" priorityOffset="-3" />
		<textComponent name="Text">
			<size w="400*game.menuScaleX()" h="50*game.hudScale()" />
			<position relativeTo="PARENT" vAnchor="TOP" hAnchor="HCENTER" />
			<orientation vAnchor="TOP" hAnchor="HCENTER" xOffset="0" yOffset="0" priorityOffset="0" />
			<event name="onInit" params="component, element">
				component("textPadding"):SetInt(30)
				component("font"):Set(game.getTextFont())
				component("alignment"):SetInt(lua_sys.MenuTextComponent_TEXT_HCENTER_ALIGNED)
				component("autoScale"):SetInt(1)
				component("text"):SetString(game.zapTitle(element:parent()("filter"):GetInt() ))
				component("size"):SetFloat(0.23*game.hudScale())
				component("layer"):SetString("MidPopUps")
			</event>
			<event name="refresh" params="component, element">
				component("autoScale"):SetInt(1)
				component("text"):SetString(game.zapTitle(element:parent()("filter"):GetInt() ))
				component("size"):SetFloat(0.23*game.hudScale())
			</event>
		</textComponent>
		<event name="refresh" params="element">
			element["Text"]:DoStoredScript("refresh")
		</event>
	</element>
	
	<event name="selectNewTab" params="element">
		
		local numTabs = element("numTabs"):GetInt()
		for i=0,numTabs-1 do
			local tab = element:GetElement("tab"..i)
			if(tab ~= nil) then
				tab:DoStoredScript("deselectTab")
			end
		end

		local filter = element("filter"):GetInt()
		game.setLastZapFilter(filter)
		
		for i=0,numTabs-1 do
		
			local tab = element:GetElement("tab"..i)
			if(tab ~= nil) then
				if(tab("ID"):GetInt() == element("filter"):GetInt()) then
					tab:DoStoredScript("selectTab")
				end
			end
		end
		
		element:parent()["HotelEntries"]:DoStoredScript("repopulate")
		--element:GetElement("HotelEntries")["Swiper"]:DoStoredScript("resetScrollPos");
	</event>

	<event name="initTabs" params="element">
		local zapIslands = game.getZapIslands();
		element("numTabs"):SetInt(zapIslands:size())
		
		for i=0,zapIslands:size()-1 do
			local islandId = zapIslands[i]
			local tabEntry = menu:addTemplateElement("template_zapTab", "tab"..i, element)
			
			tabEntry("ID"):SetInt(islandId)
			tabEntry("text"):SetString(game.islandShortName(tabEntry("ID"):GetInt()))
			
			tabEntry:relativeTo(element:GetElement("bg"))
			tabEntry:setOrientation(lua_sys.MenuOrientation((18*game.menuScaleX()) + (102*game.menuScaleX())*i,-9*game.menuScaleX(), -1, lua_sys.RIGHT, lua_sys.BOTTOM))
			tabEntry:setRelativeObjectAnchors(lua_sys.RIGHT, lua_sys.TOP)
			
			previous = tabEntry
			
			tabEntry:init()
			--tabEntry:setPositionBroadcast(true)
			tabEntry:postInit()
			--element:parent():DoStoredScript("TickTransition")
		end
	</event>

	<element name="HotelEntries">
		<size w="400*game.menuScaleX()" h="(220*game.menuScaleY())-60" />
		<position relativeTo="bg" vAnchor="VCENTER" hAnchor="HCENTER" />
		<orientation vAnchor="VCENTER" hAnchor="HCENTER" xOffset="0" yOffset="20*game.menuScaleY()" priorityOffset="0" />
		<swipeComponent name="Swiper">
			<event name="onInit" params="component, element">
				element("FirstItem"):SetString("")
			</event>
			<event name="onPostInit" params="component, element">
				component:DoStoredScript("refresh")
				element:parent():DoStoredScript("resetScrollbar")
			</event>
			<function name="refresh" params="component, element">
				component:GetVar("direction"):SetInt(lua_sys.MenuSwipeComponent_SwipeDirectionHorizontal)
				component:GetVar("mode"):SetInt(lua_sys.MenuSwipeComponent_SwipeModeFree)
				component:GetVar("tSteps"):SetFloat(25.0)
				component:listenToTouches(element)
				
				if(element("FirstItem"):GetString() ~= "" and element:GetElement(element("FirstItem"):GetString()) ~= nil) then
					local width = element:GetElement(element("FirstItem"):GetString()):absW() * element:parent()("numItems"):GetInt()
					if(width &gt; element:absW()) then
						component:setScrollSize(width - element:absW())
						element:parent()["ScrollBar"]["Sprite"]("visible"):SetInt(1)
						element:parent()["ScrollMarker"]["Marker"]("visible"):SetInt(1)
					else
						component:setScrollSize(0)
						element:parent()["ScrollBar"]["Sprite"]("visible"):SetInt(0)
						element:parent()["ScrollMarker"]["Marker"]("visible"):SetInt(0)
					end	
				end
				element("scrollSize"):SetFloat(component:scrollSize())
				
				--[[setScrollOffset to reduce big ugly flicker]]
				component("mode"):SetInt(lua_sys.MenuSwipeComponent_SwipeModeFree)
				component:setScrollOffset(0)
			</function>
			<event name="onTick" params="component, element, dt">
				component:DoStoredScript("correctScrollMarkerPos");
			</event>
			<event name="correctScrollMarkerPos" params="component, element">
				if(element("FirstItem"):GetString() ~= "") then
					local first = element:GetElement(element("FirstItem"):GetString())
					
					if(first) then
						local offset = component:scrollOffset()
						local anchorOffset = element("origXOffset"):GetInt() + offset
						
						if(first:getOrientationPosition().x ~= anchorOffset) then
							first:setOrientationPosition(Vector2(anchorOffset, first("yOffset"):GetInt()))
							
							local scrollMarker = element:parent():GetElement("ScrollMarker")
							
							--range without borders is [0, (scrollbarW-scrollMarkerW)]
							local markerMovementWidth = element:parent():GetElement("ScrollBar"):absH() - (2*scrollMarker("markerBookend"):GetInt()) - scrollMarker:absH();
							
							local scrollMarkerXOffset = -(offset/component:scrollSize()) * markerMovementWidth;
							scrollMarkerXOffset = clamp(scrollMarkerXOffset, 0, markerMovementWidth)
							
							scrollMarker("xOffset"):SetInt(scrollMarker("originalXOffset"):GetInt() + scrollMarkerXOffset)
						end
					end
				end
			</event>
			<event name="setScrollOffsetToMarker" params="component, element">
				component:setScrollOffset(element:parent():GetElement("ScrollMarker")("scrollOffset"):GetFloat())
			</event>
			<event name="resetScrollPos" params="component, element">
				component:setScrollOffset(0);
				component:DoStoredScript("correctScrollMarkerPos");
			</event>
		</swipeComponent>
		<event name="onInit" params="element">
			element("origXOffset"):SetInt(element("xOffset"):GetInt())
		</event>
		<event name="onPostInit" params="element">
			if(element:parent():V("numItems"):GetInt() == 0) then
				element("FirstItem"):SetString("")
				element:DoStoredScript("repopulate")
			end
		</event>
		<event name="repopulate" params="element">

			local numItems = element:parent()("numItems"):GetInt()
			for i=0,numItems-1 do
				local storedItem = element:GetElement("monster"..i)
				if(storedItem ~= nil) then
					element:RemoveElement(storedItem)
				end
			end
			
			element:DoStoredScript("populate")
			element["Swiper"]:DoStoredScript("refresh")
			element:parent():DoStoredScript("resetScrollbar")
		</event>
		<event name="populate" params="element">
			<![CDATA[
			
				element:parent()["Title"]:DoStoredScript("refresh")
				if(game.numInactiveOnIsland(element:parent()("filter"):GetInt()) == 0) then
					element["ErrorNotice"]("text"):SetString(game.notEnoughBoxingMonstersOnIslandStr(element:parent()("filter"):GetInt()))
					element["ErrorNotice"]("visible"):SetInt(1)
				else
					local previous = nil
					local monsters = game.getValidBoxingMonstersOnIsland(element:parent()("filter"):GetInt())
					
					if(monsters:size() == 0) then
						element["ErrorNotice"]("text"):SetString(game.noInactiveNeedEggStr(element:parent()("filter"):GetInt()))
						element["ErrorNotice"]("visible"):SetInt(1)
					else
						element["ErrorNotice"]("visible"):SetInt(0)
						for i=0,monsters:size()-1 do
							local monsterid = monsters[i]
							local monsterEntry = menu:addTemplateElement("template_underlingentry", "monster"..i, element)
							
							monsterEntry("SpriteName"):SetString("portrait_frame")
							monsterEntry("SheetName"):SetString("xml_resources/hud01.xml")
							monsterEntry("ItemTitle"):SetString(game.getMonsterName(monsterid))
							monsterEntry("AnimationFile"):SetString(game.getMonsterAnimationFile(monsterid))
							monsterEntry("Island"):SetInt(element:parent()("filter"):GetInt())
							
							--this is a display issue, active box monsters are gigantic compared to normal monsters/inactive box monsters
							if(game.isActiveBoxMonster(monsterid)) then
								monsterEntry("IsBoxMonster"):SetInt(1)
							else
								monsterEntry("IsBoxMonster"):SetInt(0)
							end
							
							monsterEntry("AnimationName"):SetString(game.getMonsterAnimationName(monsterid))
							monsterEntry("ID"):SetInt(monsterid)
							
							if(previous == nil) then
								monsterEntry:relativeTo(element)
								monsterEntry:setOrientation(lua_sys.MenuOrientation(13 * game.menuScaleX(), -45, 18, lua_sys.LEFT, lua_sys.TOP))
									--celest:monsterEntry:setOrientation(lua_sys.MenuOrientation(13 * game.menuScaleX(), -30, 18, lua_sys.LEFT, lua_sys.TOP))

								monsterEntry:setRelativeObjectAnchors(lua_sys.LEFT, lua_sys.TOP)
								element("FirstItem"):SetString(monsterEntry:name())
							else
								monsterEntry:relativeTo(previous)
								monsterEntry:setOrientation(lua_sys.MenuOrientation(0,0,0, lua_sys.LEFT, lua_sys.VCENTER))
								monsterEntry:setRelativeObjectAnchors(lua_sys.RIGHT, lua_sys.VCENTER)
							end
							
							previous = monsterEntry
							
							monsterEntry:init()
							monsterEntry:setPositionBroadcast(true)
							monsterEntry:postInit()
							element:parent():DoStoredScript("TickTransition")
						end
					end
					element:parent()("numItems"):SetInt(monsters:size())
				end
			]]>
		</event>
		<textComponent name="ErrorNotice">
			<size w="350*game.menuScaleX()" h="(220*game.menuScaleY())-60" />
			<position relativeTo="element" vAnchor="VCENTER" hAnchor="HCENTER" />
			<orientation vAnchor="VCENTER" hAnchor="HCENTER" xOffset="0" yOffset="0" priorityOffset="-1" />
			<event name="onInit" params="component, element">
				component("font"):Set(game.getTextFont())
				component("alignment"):SetInt(lua_sys.MenuTextComponent_TEXT_HCENTER_ALIGNED)
				component("text"):SetString("NOT_ENOUGH_INACTIVE_UNDERLINGS")
				component("size"):SetFloat(0.23*game.hudScale())
				component("layer"):SetString("Clipping")
			</event>
		</textComponent>
	</element>
	
	<event name="resetScrollbar" params="element">
		<![CDATA[
		local numItems = element("numItems"):GetInt();
			
		if(numItems > 0) then
			local firstEntry = element:GetElement("monsterEntry0");
			if(firstEntry ~= nil) then

				local itemHeight = firstEntry:absH()
				
				if((numItems*itemHeight) <= element:GetElement("HotelEntries"):absH()) then
					element["ScrollBar"]["Sprite"]("visible"):SetInt(0)
					element["ScrollMarker"]["Marker"]("visible"):SetInt(0)
				else
					element["ScrollBar"]["Sprite"]("visible"):SetInt(1)
					element["ScrollMarker"]["Marker"]("visible"):SetInt(1)
				end
			end
		end
		
		local setInvis = true;
		if(numItems > 0) then
		
			if(element["HotelEntries"]("FirstItem"):GetString() ~= "") then
				local firstEntry = element:GetElement("HotelEntries"):GetElement(element["HotelEntries"]("FirstItem"):GetString())
				if(firstEntry ~= nil) then
				
					local itemHeight = firstEntry:absH()
					if((numItems*itemHeight) > (element:GetElement("bg"):absW()-58*game.menuScaleX())) then
						setInvis = false;
					end
				end
			end
		end
		
		if(setInvis) then
			element["ScrollBar"]["Sprite"]("visible"):SetInt(0)
			element["ScrollMarker"]["Marker"]("visible"):SetInt(0)
		end
		]]>
	</event>
	
	<element name="ScrollBar">
		<size dependentOnElement="element:name()" dependentOnComponent="Sprite" />
		<position relativeTo="bg" vAnchor="BOTTOM" hAnchor="HCENTER" />
		<orientation vAnchor="BOTTOM" hAnchor="HCENTER" xOffset="0" yOffset="-40*game.menuScaleY()" priorityOffset="-1" />
		<spriteSheetComponent name="Sprite">
			<event name="onInit" params="component, element">
				component("spriteName"):SetString("scroll_bar_01")
				component("sheetName"):SetString("xml_resources/buttons01.xml")
				component("size"):SetFloat(0.5*game.menuScaleY())
				component("rotation"):SetFloat(-0.5*math.pi)
				component("layer"):SetString("MidPopUps")
			</event>
		</spriteSheetComponent>
	</element>
	
	<element name="ScrollMarker">
		<size dependentOnElement="element:name()" dependentOnComponent="Marker" />
		<position relativeTo="ScrollBar" vAnchor="VCENTER" hAnchor="HCENTER" />
		<orientation vAnchor="VCENTER" hAnchor="HCENTER" xOffset="0" yOffset="0" priorityOffset="-1" />
		<spriteSheetComponent name="Marker">
			<event name="onInit" params="component, element">
				component("useOffsets"):SetInt(0)
				component("spriteName"):SetString("scroll_bar_dot")
				component("sheetName"):SetString("xml_resources/buttons01.xml")
				component("size"):SetFloat(0.5*game.menuScaleY())
				component("rotation"):SetFloat(-0.5*math.pi)
				component("layer"):SetString("MidPopUps")
				element("markerBookend"):SetInt(7*game.menuScaleY())
			</event>
			<event name="onPostInit" params="component, element">
				element("xOffset"):SetInt(-element:parent():GetElement("ScrollBar"):absH()/2 + element("markerBookend"):GetInt() + element:absH()/2)
				element("originalXOffset"):SetInt(element("xOffset"):GetInt())
			</event>
		</spriteSheetComponent>
		<touchComponent name="Touch">
			<size dependentOnElement="element:name()" dependentOnComponent="Marker" />
			<position relativeTo="PARENT" vAnchor="TOP" hAnchor="LEFT" />
			<orientation vAnchor="TOP" hAnchor="LEFT" xOffset="0" yOffset="0" priorityOffset="0" />
			<event name="onTouchDrag" params="component, element, x, y">
			
				local scrollBar = element:parent():GetElement("ScrollBar")
				
				local scrollSize = 0;
				if(element:parent():GetElement("HotelEntries")("scrollSize") ~= nil) then
					scrollSize = element:parent():GetElement("HotelEntries")("scrollSize"):GetFloat();
				end
				
				local fromLeftmostMarkerRange = x - scrollBar:absX() - element("originalXOffset"):GetInt();
				local scrollOffset = -((fromLeftmostMarkerRange)*scrollSize)/(scrollBar:absH() - 2*element("markerBookend"):GetInt() - element:absH())
				
				scrollOffset = clamp(scrollOffset, -scrollSize, 0)
				
				element("scrollOffset"):SetFloat(scrollOffset);
				element:parent():GetElement("HotelEntries")["Swiper"]:DoStoredScript("setScrollOffsetToMarker");
			</event>
		</touchComponent>
	</element>
</menu>