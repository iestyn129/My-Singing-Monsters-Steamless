<?xml version="1.0" encoding="utf-8"?>
<menu xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="menu.xsd">

	<element name="FadedBG">
		<size dependentOnElement="element:name()" dependentOnComponent="Sprite" />
		<position relativeTo="SCREEN" vAnchor="VCENTER" hAnchor="HCENTER" />
		<orientation vAnchor="VCENTER" hAnchor="HCENTER" xOffset="0" yOffset="0" priorityOffset="6" />		
		<spriteComponent name="Sprite">
			<event name="onInit" params="component, element">
				component("spriteName"):SetString("__BUILTIN__WHITE_TEXTURE")
				component:setScale(Vector2(lua_sys.screenWidth()*0.25, lua_sys.screenHeight()*0.25))
				component:setColor(0.0, 0.0, 0.0)
				component("alpha"):SetFloat(0.5)
				component("layer"):SetString("Tutorial")
			</event>
		</spriteComponent>
		<touchComponent name="Touch">
			<size dependentOnElement="element:name()" />
			<position relativeTo="element:name()" vAnchor="VCENTER" hAnchor="HCENTER" />
			<orientation vAnchor="VCENTER" hAnchor="HCENTER" xOffset="0" yOffset="0" priorityOffset="-3" />
		</touchComponent>
	</element>
	
	<template type="template_fancywindow" name="bg">
		<templateVar name="$layer" equals="Tutorial" />
		<position relativeTo="PARENT" vAnchor="VCENTER" hAnchor="HCENTER" />
		<orientation vAnchor="VCENTER" hAnchor="HCENTER" xOffset="0" yOffset="-30*game.hudScale()" priorityOffset="2" />
	</template>
	
	<element name="Anim">
		<size dependentOnElement="element:name()" dependentOnComponent="Sprite" />
		<position relativeTo="bg" vAnchor="VCENTER" hAnchor="HCENTER" />
		<orientation vAnchor="VCENTER" hAnchor="HCENTER" xOffset="0" yOffset="0" priorityOffset="-1" />
		<aeComponent name="Sprite">
			<event name="onInit" params="component, element">
				component("animationName"):SetString("xml_bin/monster_c.bin")
				component("animation"):SetString( "Store" )
				component:setScale(Vector2(0.8*game.hudScale(),0.8*game.hudScale()))
				component("layer"):SetString("Tutorial")
				component("visible"):SetInt(0)
			</event>
			<event name="reposition" params="component, element">
				element:setPositionBroadcast(true)
				element:setOrientationPosition(Vector2(component:size().x / 2.0, component:size().y / 2.0 - 45*game.hudScale()))
			</event>
		</aeComponent>
	</element>
	
	<element name="Sprite">
		<size dependentOnElement="element:name()" dependentOnComponent="Sprite" />
		<position relativeTo="bg" vAnchor="TOP" hAnchor="HCENTER" />
		<orientation vAnchor="TOP" hAnchor="HCENTER" xOffset="0" yOffset="25*game.hudScale()" priorityOffset="-1" />
		<spriteSheetComponent name="Sprite">
			<event name="onInit" params="component, element">
				component("spriteName"):SetString(game.StoreContext_SPRITE_DIAMOND)
				component("sheetName"):SetString(game.StoreContext_CURRENCY_SPRITESHEET)
				component("size"):SetFloat(1.0*game.hudScale())
				component("visible"):SetInt(0)
				component("layer"):SetString("Tutorial")
			</event>
		</spriteSheetComponent>
	</element>
	
	<element name="Title">
		<size dependentOnElement="element:name()" dependentOnComponent="Text" />
		<position relativeTo="bg" vAnchor="TOP" hAnchor="HCENTER" />
		<orientation vAnchor="VCENTER" hAnchor="HCENTER" xOffset="0" yOffset="30*game.hudScale()" priorityOffset="-2" />
		<textComponent name="Text">
			<size w="330*game.hudScale()"/>
			<position relativeTo="element:name()" vAnchor="TOP" hAnchor="HCENTER" />
			<orientation vAnchor="TOP" hAnchor="HCENTER" xOffset="0" yOffset="0" priorityOffset="0" />
			<event name="onInit" params="component, element">
				component("alignment"):SetInt(lua_sys.MenuTextComponent_TEXT_HCENTER_ALIGNED)
				component("font"):Set(game.getTextFont())
				component("text"):SetString("TITLE_REWARDS")
				component("size"):SetFloat(0.5*game.hudScale())
				component("layer"):SetString("Tutorial")
				component:setColor(0.43, 1.0, 0.25)
				component:calculatePosition()
			</event>
		</textComponent>
	</element>
	
	
	<element name="Text">
		<size dependentOnElement="element:name()" dependentOnComponent="Text" />
		<position relativeTo="bg" vAnchor="TOP" hAnchor="HCENTER" />
		<orientation vAnchor="TOP" hAnchor="HCENTER" xOffset="0" yOffset="60*game.hudScale()" priorityOffset="-2" />
		<textComponent name="Text">
			<size w="270*game.hudScale()" h="128*game.hudScale()" />
			<position relativeTo="element:name()" vAnchor="TOP" hAnchor="HCENTER" />
			<orientation vAnchor="TOP" hAnchor="HCENTER" xOffset="0" yOffset="0" priorityOffset="0" />
			<event name="onInit" params="component, element">
				component("multiline"):SetInt(1)
				component("autoScale"):SetInt(1)
				component("alignment"):SetInt(lua_sys.MenuTextComponent_TEXT_HCENTER_ALIGNED)
				component("textPadding"):SetInt(0)
				component("font"):Set(game.getTextFont())
				component("text"):SetString(game.getLocalizedText("REFERRAL_RECEIVING_1_DESC"))
				component("size"):SetFloat(0.3*game.hudScale())
				component("layer"):SetString("Tutorial")
				component:calculatePosition()
			</event>
			<event name="moveDown" params="component, element">
				element:setPositionBroadcast(true)
				element:setPosition(Vector2(component:position().x, component:position().y + (30*game.hudScale())))
			</event>
		</textComponent>
	</element>
	
	<element name="Diamonds">
		<size dependentOnElement="element:name()" dependentOnComponent="Sprite" />
		<position relativeTo="bg" vAnchor="BOTTOM" hAnchor="LEFT" />
		<orientation vAnchor="BOTTOM" hAnchor="LEFT" xOffset="-10*game.hudScale()" yOffset="0" priorityOffset="-1" />
		<spriteSheetComponent name="Sprite">
			<event name="onInit" params="component, element">
				component("spriteName"):SetString("diamonds_01")
				component("sheetName"):SetString("xml_resources/currency_sheet.xml")
				component("layer"):SetString("Tutorial")
				component("size"):SetFloat(0.5*game.hudScale())
				component("vFlip"):SetInt(1)
			</event>
		</spriteSheetComponent>
	</element>
	
	<element name="DiamondsEarned">
		<size w="200*game.hudScale()" h="50*game.hudScale()" />
		<position relativeTo="Text" vAnchor="BOTTOM" hAnchor="HCENTER" />
		<orientation vAnchor="TOP" hAnchor="HCENTER" xOffset="0" yOffset="0" priorityOffset="0" />
		<spriteSheetComponent name="Sprite">
			<position relativeTo="PARENT" vAnchor="VCENTER" hAnchor="HCENTER" />
			<orientation vAnchor="VCENTER" hAnchor="RIGHT" xOffset="0" yOffset="0" priorityOffset="0" />
			<event name="onInit" params="component, element">
				component("spriteName"):SetString(game.StoreContext_SPRITE_DIAMOND)
				component("sheetName"):SetString(game.StoreContext_CURRENCY_SPRITESHEET)
				component("layer"):SetString("Tutorial")
				component("size"):SetFloat(0.5*game.hudScale())
			</event>
		</spriteSheetComponent>
		<textComponent name="Text">
			<position relativeTo="PARENT" vAnchor="VCENTER" hAnchor="HCENTER" />
			<orientation vAnchor="VCENTER" hAnchor="LEFT" xOffset="0" yOffset="0" priorityOffset="0" />
			<event name="onInit" params="component, element">
				component("autoScale"):SetInt(1)
				component("alignment"):SetInt(lua_sys.MenuTextComponent_TEXT_HCENTER_ALIGNED)
				component("font"):Set(game.getTextFont())
				component("text"):SetString(""..element:parent()("numReferrals"):GetInt())
				component("size"):SetFloat(0.3*game.hudScale())
				component("layer"):SetString("Tutorial")
				component:calculatePosition()
			</event>
		</textComponent>
	</element>
	
	<template type="template_spritesheetbutton" name="OkayButton">
		<templateVar name="$upSpriteName" equals="button_continue_green" />
		<templateVar name="$sheetName" equals="'xml_resources/buttons01.xml'" />
		<templateVar name="$text" equals="CONTINUE" />
		<templateVar name="$spriteScale" equals="0.5*game.hudScale()" />
		<templateVar name="$textPadding" equals="12.5" />
		<templateVar name="$textYOffset" equals="-2*game.hudScale()" />
		<templateVar name="$layer" equals="Tutorial" />
		<position relativeTo="bg" vAnchor="BOTTOM" hAnchor="HCENTER" />
		<orientation vAnchor="TOP" hAnchor="HCENTER" xOffset="0" yOffset="0" priorityOffset="0" />
		<touchComponent name="Touch">
			<event name="onTouchUp" params="component, element">
				onTouchUp(component, element)
				element:root():popPopUp()
			</event>
		</touchComponent>
		<event name="onPostInit" params="element">
			element["Text"]("size"):SetFloat(0.25*game.hudScale())
			element["Text"]("autoScale"):SetInt(1)
		</event>
	</template>
	
	<event name="onInit" params="element">
		element("rewardSource"):SetString("")
		element("numReferrals"):SetInt(0)
		element("diamondTotal"):SetInt(0)
	</event>
	
	<event name="update" params="element">
		<![CDATA[
			local rewardSource = element("rewardSource"):GetString()
			local numReferrals = element("numReferrals"):GetInt()
			
			element["DiamondsEarned"]["Text"]("text"):SetString(element("diamondTotal"):GetInt())
			
			if(rewardSource == "reward_coins") then
				element:GetElement("Diamonds"):GetComponent("Sprite"):GetVar("spriteName"):SetString("coins_01")
				element:GetElement("DiamondsEarned"):GetComponent("Sprite"):GetVar("spriteName"):SetString(game.StoreContext_SPRITE_COINS)
			elseif(rewardSource == "reward_food") then
				element:GetElement("Diamonds"):GetComponent("Sprite"):GetVar("spriteName"):SetString("foodpack_01")
				element:GetElement("DiamondsEarned"):GetComponent("Sprite"):GetVar("spriteName"):SetString(game.StoreContext_SPRITE_FOOD)	
			end

			if(numReferrals > 0) then
				local text = element:GetElement("Text"):GetComponent("Text"):GetVar("text"):GetString()
				text = select(1, text:gsub("%%num%%", numReferrals))		
				element:GetElement("Text"):GetComponent("Text"):GetVar("text"):SetString(text)
			end
		]]>
	</event>
	
</menu>