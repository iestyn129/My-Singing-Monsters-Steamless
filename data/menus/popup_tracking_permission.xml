<?xml version="1.0" encoding="utf-8"?>
<menu xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="menu.xsd">

	<element name="FadedBG">
		<size dependentOnElement="element:name()" dependentOnComponent="Sprite" />
		<position relativeTo="SCREEN" vAnchor="VCENTER" hAnchor="HCENTER" />
		<orientation vAnchor="VCENTER" hAnchor="HCENTER" xOffset="0" yOffset="0" priorityOffset="6" />		
		<spriteComponent name="Sprite">
			<event name="onInit" params="component, element">
				component("spriteName"):SetString("__BUILTIN__WHITE_TEXTURE")
				component:setScale(Vector2(lua_sys.screenWidth()*0.25, lua_sys.screenHeight()*0.25))
				component:setColor(0.0, 0.0, 0.0)
				component("alpha"):SetFloat(0.5)
				component("layer"):SetString("Tutorial")
			</event>
		</spriteComponent>
		<touchComponent name="Touch">
			<size dependentOnElement="element:name()" />
			<position relativeTo="element:name()" vAnchor="VCENTER" hAnchor="HCENTER" />
			<orientation vAnchor="VCENTER" hAnchor="HCENTER" xOffset="0" yOffset="0" priorityOffset="-2" />
		</touchComponent>
	</element>
	
	<template type="template_fancywindow_scaled" name="bg">
		<templateVar name="$layer" equals="Tutorial" />
		<position relativeTo="PARENT" vAnchor="VCENTER" hAnchor="HCENTER" />
		<orientation vAnchor="VCENTER" hAnchor="HCENTER" xOffset="0-lua_sys.screenWidth()" yOffset="-30*game.hudScale()" priorityOffset="2" />
	</template>
	
	<element name="Title">
		<size dependentOnElement="element:name()" dependentOnComponent="Text" />
		<position relativeTo="bg" vAnchor="TOP" hAnchor="HCENTER" />
		<orientation vAnchor="VCENTER" hAnchor="HCENTER" xOffset="0" yOffset="30*game.menuScaleY()" priorityOffset="-2" />
		<textComponent name="Text">
			<size w="320*game.menuScaleX()" h="75*game.menuScaleY()"/>
			<position relativeTo="element:name()" vAnchor="TOP" hAnchor="HCENTER" />
			<orientation vAnchor="TOP" hAnchor="HCENTER" xOffset="0" yOffset="0" priorityOffset="0" />
			<event name="onInit" params="component, element">
				component("alignment"):SetInt(lua_sys.MenuTextComponent_TEXT_HCENTER_ALIGNED)
				component("autoScale"):SetInt(1)
				component("font"):Set(game.getTextFont())
				component("text"):SetString("PERMISSION_PROMPT_TITLE")
				component("size"):SetFloat(0.4*game.menuScaleX())
				component("layer"):SetString("Tutorial")
				component:setColor(0.43, 1.0, 0.25)
				component:calculatePosition()
			</event>
		</textComponent>
	</element>
	
	<element name="Desc">
		<size dependentOnElement="element:name()" dependentOnComponent="Text" />
		<position relativeTo="bg" vAnchor="TOP" hAnchor="HCENTER" />
		<orientation vAnchor="TOP" hAnchor="LEFT" xOffset="-80*game.menuScaleX()" yOffset="50*game.menuScaleY()" priorityOffset="-2" />
		<textComponent name="Text">
			<size w="260*game.menuScaleX()" h="130*game.menuScaleY()" />
			<position relativeTo="element:name()" vAnchor="TOP" hAnchor="LEFT" />
			<orientation vAnchor="TOP" hAnchor="LEFT" xOffset="0" yOffset="0" priorityOffset="0" />
			<event name="onInit" params="component, element">
				component("multiline"):SetInt(1)
				component("autoScale"):SetInt(1)
				component("alignment"):SetInt(lua_sys.MenuTextComponent_TEXT_LEFT_ALIGNED)
				component("textPadding"):SetInt(0)
				component("font"):Set(game.getTextFont())
				component("text"):SetString("PERMISSION_PROMPT_DESC")
				
				component("size"):SetFloat(0.3*game.menuScaleX())
				
				component("layer"):SetString("Tutorial")
				component:calculatePosition()
			</event>
			<event name="moveDown" params="component, element">
				element:setPositionBroadcast(true)
				element:setPosition(Vector2(component:position().x, component:position().y + (30*game.hudScale())))
			</event>
		</textComponent>
	</element>
	
	<element name="Monster">
		<size dependentOnElement="element:name()" dependentOnComponent="Sprite" />
		<position relativeTo="bg" vAnchor="BOTTOM" hAnchor="LEFT" />
		<orientation vAnchor="BOTTOM" hAnchor="LEFT" xOffset="-15*game.menuScaleX()" yOffset="35*game.menuScaleY()" priorityOffset="-2" />
		<spriteSheetComponent name="Sprite">
			<position relativeTo="element:name()" vAnchor="BOTTOM" hAnchor="LEFT" />
			<orientation vAnchor="BOTTOM" hAnchor="LEFT" xOffset="0" yOffset="0" priorityOffset="0" />
			<event name="onInit" params="component, element">
				component("useOffsets"):SetInt(1)
				component("spriteName"):SetString("Furcorn_Smiling")
				component("sheetName"):SetString("xml_resources/buttons01.xml")
				component("size"):SetFloat(0.55*game.menuScaleX())
				component("layer"):SetString("Tutorial")
			</event>
		</spriteSheetComponent>
	</element>
	
	<template type="template_nineslicebutton" name="NextButton">
		<templateVar name="$upSpriteName" equals="'gfx/menu/button_vert_square01_green'" />
		<templateVar name="$spriteScale" equals="0.65*game.menuScaleX()" />
		<templateVar name="$text" equals="CONTEXTBAR_NEXT_LABEL" />
		<templateVar name="$textPadding" equals="6*game.hudScale()" />
		<templateVar name="$textYOffset" equals="0" />
		<templateVar name="$layer" equals="Tutorial" />
		<templateVar name="$topHeight" equals="17.0" />
		<templateVar name="$bottomHeight" equals="17.0" />
		<templateVar name="$leftWidth" equals="17.0" />
		<templateVar name="$rightWidth" equals="17.0" />
		
		<templateVar name="$width" equals="150*game.menuScaleX()" />
		<templateVar name="$height" equals="45*game.menuScaleX()" />
		
		<templateVar name="$includeBorder" equals="1" />
		
		<position relativeTo="bg" vAnchor="BOTTOM" hAnchor="HCENTER" />
		<orientation vAnchor="TOP" hAnchor="HCENTER" xOffset="0" yOffset="0" priorityOffset="0" />
		<event name="onInit" params="element">
			onInit(element)
		</event>
		<touchComponent name="Touch">
			<event name="onTouchUp" params="component, element">
				onTouchUp(component, element)
				game.showTrackingPermissionPrompt();
				element:root():popPopUp()
			</event>
		</touchComponent>
		<event name="onPostInit" params="element">
			element["Text"]("size"):SetFloat(0.25*game.hudScale())
			element["Text"]("autoScale"):SetInt(1)
		</event>
	</template>

	<event name="onInit" params="element">
		element("transitionState"):SetInt(1)
		element("transitionTime"):SetFloat(0.0)
		lua_sys.playSoundFx("audio/sfx/menu_slide.wav")
	</event>
	
	<event name="onTick" params="element, dt">
		<![CDATA[
			if(dt < game.maxTickTime()) then
				local transitionState = element("transitionState"):GetInt()
				
				if(transitionState ~= 0) then
					local transitionTime = element("transitionTime"):GetFloat()
					
					element:DoStoredScript("TickTransition")
					
					if(transitionState == 1) then
						transitionTime = (transitionTime + dt*3)
					elseif(transitionState == 2) then
						transitionTime = (transitionTime - dt*3)
					end
					
					element("transitionTime"):SetFloat(clamp(transitionTime, 0.0, 1.0))
					
					if(transitionTime == 1.0) then
						element("transitionState"):SetInt(0)
						element("transitionTime"):SetFloat(1.0)
						element:DoStoredScript("TickTransition")
					elseif(transitionTime <= 0.0) then
						element:root():popPopUp()
					end
				end
			end
		]]>
	</event>
	
	<event name="TickTransition" params="element">
		local transitionTime = element("transitionTime"):GetFloat()
		element["bg"]("xOffset"):SetFloat(lua_sys.screenWidth()*(0.5) + (-0.5)*lua_sys.screenWidth()*(1/transitionTime))
		element["FadedBG"]["Sprite"]("alpha"):SetFloat(transitionTime*0.5)		
	</event>
	
	<event name="queuePop" params="element">
		element("transitionState"):SetInt(2)
	</event>
</menu>