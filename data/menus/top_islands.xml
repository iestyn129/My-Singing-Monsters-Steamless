<?xml version="1.0" encoding="utf-8"?>
<menu xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="menu.xsd">

	<element name="FadedBG">
		<size dependentOnElement="element:name()" dependentOnComponent="Sprite" />
		<position relativeTo="SCREEN" vAnchor="VCENTER" hAnchor="HCENTER" />
		<orientation vAnchor="VCENTER" hAnchor="HCENTER" xOffset="0" yOffset="0" priorityOffset="7" />
		<spriteComponent name="Sprite">
			<event name="onInit" params="component, element">
				component("spriteName"):SetString("__BUILTIN__WHITE_TEXTURE")
				component:setScale(Vector2(lua_sys.screenWidth()*0.25, lua_sys.screenHeight()*0.25))
				component:setColor(0.0, 0.0, 0.0)
				component("alpha"):SetFloat(0.5)
				component("layer"):SetString("MidPopUps")
			</event>
		</spriteComponent>
		<touchComponent name="Touch">
			<size dependentOnElement="element:name()" />
			<position relativeTo="element:name()" vAnchor="VCENTER" hAnchor="HCENTER" />
			<orientation vAnchor="VCENTER" hAnchor="HCENTER" xOffset="0" yOffset="0" priorityOffset="0" />
		</touchComponent>
	</element>
	
	<element name="Frame">
		<size dependentOnElement="element:name()" dependentOnComponent="Sprite" />
		<position relativeTo="PARENT" vAnchor="VCENTER" hAnchor="HCENTER" />
		<orientation vAnchor="VCENTER" hAnchor="HCENTER" xOffset="lua_sys.screenWidth()*(0.5) + (-0.5)*lua_sys.screenWidth()" yOffset="-7" priorityOffset="6" />
		<ninesliceComponent name="Sprite">
			<size w="420*game.hudScale()" h="250*game.hudScale()" />
			<event name="onInit" params="component, element">
				component("topHeight"):SetFloat(50.0)
				component("bottomHeight"):SetFloat(50.0)
				component("leftWidth"):SetFloat(50.0)
				component("rightWidth"):SetFloat(50.0)
				component("includeBorder"):SetInt(1)
				component("size"):SetFloat(0.5)
				component("spriteName"):SetString("gfx/menu/Black9SFrame50")
				component("layer"):SetString("MidPopUps")
			</event>
		</ninesliceComponent>
		<spriteSheetComponent name="Flourish1">
			<position relativeTo="element:name()" vAnchor="TOP" hAnchor="LEFT" />
			<orientation vAnchor="TOP" hAnchor="LEFT" xOffset="7" yOffset="7" priorityOffset="-1" />
			<event name="onInit" params="component, element">
				component("spriteName"):SetString("menu_swirl_01")
				component("sheetName"):SetString("xml_resources/hud01.xml")
				component("size"):SetFloat(0.5*game.menuScaleX())
				component("layer"):SetString("MidPopUps")
			</event>
		</spriteSheetComponent>
		<spriteSheetComponent name="Flourish2">
			<position relativeTo="element:name()" vAnchor="TOP" hAnchor="RIGHT" />
			<orientation vAnchor="TOP" hAnchor="RIGHT" xOffset="7" yOffset="10" priorityOffset="-1" />
			<event name="onInit" params="component, element">
				component("spriteName"):SetString("menu_swirl_02")
				component("sheetName"):SetString("xml_resources/hud01.xml")
				component("size"):SetFloat(0.5*game.menuScaleX())
				component("rotation"):SetFloat(-0.5*math.pi)
				component("layer"):SetString("MidPopUps")
			</event>
		</spriteSheetComponent>
	</element>
	
	<element name="TitleFrame">
		<size dependentOnElement="element:name()" dependentOnComponent="Sprite" />
		<position relativeTo="Frame" vAnchor="TOP" hAnchor="HCENTER" />
		<orientation vAnchor="VCENTER" hAnchor="HCENTER" xOffset="0" yOffset="0" priorityOffset="-1" />
		<ninesliceComponent name="Sprite">
			<size w="175*game.hudScale()" h="50" />
			<event name="onInit" params="component, element">
				component("topHeight"):SetFloat(50.0)
				component("bottomHeight"):SetFloat(50.0)
				component("leftWidth"):SetFloat(50.0)
				component("rightWidth"):SetFloat(50.0)
				component("size"):SetFloat(0.5)
				component("includeBorder"):SetInt(1)
				component("spriteName"):SetString("gfx/menu/GreyTitleFrame")
				component("layer"):SetString("MidPopUps")
			</event>
		</ninesliceComponent>
	</element>
	
	<element name="TitleLabel">
		<size dependentOnElement="element:name()" dependentOnComponent="Text" />
		<position relativeTo="TitleFrame" vAnchor="VCENTER" hAnchor="HCENTER" />
		<orientation vAnchor="VCENTER" hAnchor="HCENTER" xOffset="0" yOffset="0" priorityOffset="-1" />
		<textComponent name="Text">
			<size w="160*game.hudScale()" h="35"  />
			<position relativeTo="element:name()" vAnchor="VCENTER" hAnchor="HCENTER" />
			<orientation vAnchor="VCENTER" hAnchor="HCENTER" xOffset="0" yOffset="0" priorityOffset="0" />
			<event name="onInit" params="component, element">
				component("multiline"):SetInt(0)
				component("font"):Set(game.getTitleFont())
				component:setColor(0.71, 0.45, 0.94)
				component("size"):SetFloat(0.45*game.hudScale())
				component("alignment"):SetInt(lua_sys.MenuTextComponent_TEXT_HCENTER_ALIGNED)
				component("text"):SetString("BUTTON_VISIT_TOP_ISLANDS")
				component("autoScale"):SetInt(1)
				component("layer"):SetString("MidPopUps")
			</event>
		</textComponent>
	</element>

	<element name="TopIslandsList">
		<size w="300*game.hudScale()" h="175*game.hudScale()" />
		<position relativeTo="Frame" vAnchor="VCENTER" hAnchor="HCENTER" />
		<orientation vAnchor="VCENTER" hAnchor="HCENTER" xOffset="0" yOffset="0" priorityOffset="0" />
		<swipeComponent name="Swiper">
			<event name="onPostInit" params="component, element">
				component:GetVar("direction"):SetInt(lua_sys.MenuSwipeComponent_SwipeDirectionVertical)
				component:GetVar("mode"):SetInt(lua_sys.MenuSwipeComponent_SwipeModeFree)
				component:GetVar("tSteps"):SetFloat(25.0)
				component:listenToTouches(element)
				
				component:DoStoredScript("refresh")	
			</event>
			<function name="refresh" params="component, element">
				local numItems = element:parent()["TopIslandElements"]("NumEntries"):GetInt()
				
				if(numItems &gt; 0) then
					local totalHeight = numItems * element:parent()["TopIslandElements"]:GetElement("topislandentry1"):absH()
				
					if(totalHeight &gt; element:absH()) then
						component:setScrollSize(totalHeight - element:absH())
					else
						component:setScrollSize(0)
					end
					element("scrollSize"):SetFloat(component:scrollSize())
				end
			</function>
			<event name="onTick" params="component, element, dt">
				if(element:parent()["TopIslandElements"]("NumEntries"):GetInt() &gt; 0) then
					local first = element:parent()["TopIslandElements"]:GetElement("topislandentry1")

					if(first) then
						local scrollOffset = component:scrollOffset()
						
						if(first:getOrientationPosition().y ~= scrollOffset) then
						
							first:setOrientationPosition(Vector2(first("xOffset"):GetInt(), scrollOffset))
							
							local scrollMarker = element:parent():GetElement("ScrollMarker");
							local markerBookend = scrollMarker("originalYOffset"):GetInt()
							
							--range without borders is [0, (scrollbarH-scrollMarkerH)]
							local markerMovementHeight = element:parent():GetElement("ScrollBar"):absH() - (2*markerBookend) - scrollMarker:absH();

							local scrollMarkerYOffset = -(scrollOffset/component:scrollSize()) * markerMovementHeight;
							
							scrollMarkerYOffset = clamp(scrollMarkerYOffset, 0, markerMovementHeight)
							
							scrollMarker("yOffset"):SetInt(markerBookend + scrollMarkerYOffset)
						end
					end
				end
			</event>
			<event name="setScrollOffsetToMarker" params="component, element">
				component:setScrollOffset(element:parent():GetElement("ScrollMarker")("scrollOffset"):GetFloat())
			</event>
		</swipeComponent>
		<touchComponent name="Touch">
			<size dependentOnElement="element:name()" />					
			<event name="onInit" params="component, element">
				component("singleTouch"):SetInt(1)
			</event>					
		</touchComponent>
		<event name="onInit" params="element">
			game.setClipping("Clipping", 0, element:absY()*lua_sys.deviceScaleY(), lua_sys.screenWidth()*lua_sys.deviceScaleY(), element:absH()*lua_sys.deviceScaleY())
			element:parent()["TopIslandElements"]:DoStoredScript("populate")
		</event>
		
	</element>
	<element name="TopIslandElements">
		<size w="300*game.hudScale()" h="175*game.hudScale()" />
		<position relativeTo="element:parent()[&quot;TopIslandsList&quot;]" vAnchor="VCENTER" hAnchor="HCENTER" />
		<orientation vAnchor="VCENTER" hAnchor="HCENTER" xOffset="0" yOffset="0" priorityOffset="0" />
		<event name="repopulate" params="element">
			<![CDATA[
				local prevNumItems = element("NumEntries"):GetInt()
				
				for i=0,prevNumItems-1 do
					element:RemoveElement(element:GetElement("topIslandEntry"..i))
				end
				
				element:DoStoredScript("populate")
				element:parent()["TopIslandsList"]["Swiper"]:DoStoredScript("refresh")
				
				local topIslandsList = element:parent():GetElement("TopIslandsList")
				local numEntries = topIslandsList("NumEntries"):GetInt()
		
				if(numEntries == 0) then
					element:parent()["ScrollBar"]["Sprite"]("visible"):SetInt(0)
					element:parent()["ScrollMarker"]["Marker"]("visible"):SetInt(0)
				else
					if(numEntries * topIslandsList:GetElement("topislandentry1"):absH() > topIslandsList:absH()) then
						element:parent()["ScrollBar"]["Sprite"]("visible"):SetInt(1)
						element:parent()["ScrollMarker"]["Marker"]("visible"):SetInt(1)
					else
						element:parent()["ScrollBar"]["Sprite"]("visible"):SetInt(0)
						element:parent()["ScrollMarker"]["Marker"]("visible"):SetInt(0)
					end
				end
			]]>
		</event>
		<event name="populate" params="element">
			local previous = nil
			element("NumEntries"):SetInt(10)
			
			for i=1,10 do
				local topIslandEntry = menu:addTemplateElement("template_topislandsentry", "topislandentry"..i, element)
				
				local rankTitle = string.gsub(game.getLocalizedText("WEEKLY_RANK_TITLE"), "XXX", i)
				topIslandEntry("DisplayName"):SetString(rankTitle)
				topIslandEntry("entryNum"):SetInt(i)

				if(previous == nil) then
					topIslandEntry:relativeTo(element)
					topIslandEntry:setOrientation(lua_sys.MenuOrientation(0, 0, -1, lua_sys.HCENTER, lua_sys.TOP))
					topIslandEntry:setRelativeObjectAnchors(lua_sys.HCENTER, lua_sys.TOP)
				else
					topIslandEntry:relativeTo(previous)
					topIslandEntry:setOrientation(lua_sys.MenuOrientation(0, 0, 0, lua_sys.HCENTER, lua_sys.TOP))
					topIslandEntry:setRelativeObjectAnchors(lua_sys.HCENTER, lua_sys.BOTTOM)
				end
				
				previous = topIslandEntry
				
				topIslandEntry:init()
				topIslandEntry:postInit()
				topIslandEntry:setPositionBroadcast(true)
			end
		</event>
	</element>
	
	<element name="ScrollBar">
		<size dependentOnElement="element:name()" dependentOnComponent="Sprite" />
		<position relativeTo="TopIslandsList" vAnchor="VCENTER" hAnchor="RIGHT" />
		<orientation vAnchor="VCENTER" hAnchor="LEFT" xOffset="10*game.hudScale()" yOffset="0" priorityOffset="-1" />
		<spriteSheetComponent name="Sprite">
			<event name="onInit" params="component, element">
				component("spriteName"):SetString("scroll_bar_01")
				component("sheetName"):SetString("xml_resources/buttons01.xml")
				component("size"):SetFloat(0.4*game.hudScale())
				component("layer"):SetString("MidPopUps")
			</event>
		</spriteSheetComponent>
	</element>
	
	<element name="ScrollMarker">
		<size dependentOnElement="element:name()" dependentOnComponent="Marker" />
		<position relativeTo="ScrollBar" vAnchor="TOP" hAnchor="HCENTER" />
		<orientation vAnchor="TOP" hAnchor="HCENTER" xOffset="0" yOffset="5*game.menuScaleY()" priorityOffset="-1" />
		<spriteSheetComponent name="Marker">
			<event name="onInit" params="component, element">
				component("useOffsets"):SetInt(1)
				component("spriteName"):SetString("scroll_bar_dot")
				component("sheetName"):SetString("xml_resources/buttons01.xml")
				component("size"):SetFloat(0.4*game.hudScale())
				component("layer"):SetString("MidPopUps")
				element("originalYOffset"):SetInt(element("yOffset"):GetInt())
			</event>
		</spriteSheetComponent>
		<touchComponent name="Touch">
			<size dependentOnElement="element:name()" dependentOnComponent="Marker" />
			<position relativeTo="PARENT" vAnchor="TOP" hAnchor="LEFT" />
			<orientation vAnchor="TOP" hAnchor="LEFT" xOffset="0" yOffset="0" priorityOffset="0" />
			<event name="onTouchDrag" params="component, element, x, y">
			
				local scrollBar = element:parent():GetElement("ScrollBar")
				local fromTopOfMarkerRange = y - scrollBar:absY() - element("originalYOffset"):GetInt();
				
				local markerBookend = element("originalYOffset"):GetInt()
				
				local scrollSize = 0;
				if(element:parent():GetElement("TopIslandsList")("scrollSize") ~= nil) then
					scrollSize = element:parent():GetElement("TopIslandsList")("scrollSize"):GetFloat();
				end
				
				local scrollOffset = (-(fromTopOfMarkerRange - markerBookend)/(scrollBar:absH() - 2*markerBookend - element:absH()))*scrollSize;
				scrollOffset = clamp(scrollOffset, -scrollSize, 0)
				
				element("scrollOffset"):SetFloat(scrollOffset);
				element:parent():GetElement("TopIslandsList")["Swiper"]:DoStoredScript("setScrollOffsetToMarker");
			</event>
		</touchComponent>
	</element>

	<template type="template_spritesheetbutton" name="MoreGames">
		<templateVar name="$upSpriteName" equals="'button_more_games'" />
		<templateVar name="$sheetName" equals="'xml_resources/buttons01.xml'" />
		<templateVar name="$spriteScale" equals="0.5*game.menuScaleX()" />
		<templateVar name="$layer" equals="'MidPopUps'" />
		<position relativeTo="SAFE_AREA" vAnchor="BOTTOM" hAnchor="LEFT" />
		<orientation vAnchor="BOTTOM" hAnchor="LEFT" xOffset="10*game.menuScaleX()" yOffset="5*game.menuScaleY()" priorityOffset="4" />
		<textComponent name="MoreGamesText">
			<size dependentOnElement="element:name()" dependentOnComponent="UpSprite" />
			<position relativeTo="PARENT" vAnchor="VCENTER" hAnchor="HCENTER" />
			<orientation vAnchor="VCENTER" hAnchor="HCENTER" xOffset="-5" yOffset="3*game.menuScaleY()" priorityOffset="-1" />
			<event name="onInit" params="component, element">
				component("multiline"):SetInt(1)
				component("textPadding"):SetInt(0.0)
				component("font"):Set(game.getTextFont())
				component("size"):SetFloat(0.20*game.menuScaleX())
				component("alignment"):SetInt(lua_sys.MenuTextComponent_TEXT_HCENTER_ALIGNED)
				component("text"):SetString("MORE_GAMES")
				component("rotation"):SetFloat(0)
				component("autoScaleFactor"):SetFloat(0.05)
				component("autoScale"):SetInt(1)
				component("layer"):SetString("FrontPopUps")
				if(game.hideMoreGames()) then
					element:DoStoredScript("setInvisible")
					component("visible"):SetInt(0)
				end
			</event>
		</textComponent>
		<touchComponent name="Touch">
			<event name="onTouchUp" params="component, element">
				onTouchUp(component, element)
				game.showMoreGames()
			</event>
		</touchComponent>
	</template>
	
	<event name="onPostInit" params="element">
		local topIslandsList = element:GetElement("TopIslandsList")
		local numEntries = topIslandsList:parent()["TopIslandElements"]("NumEntries"):GetInt()
		if(numEntries == 0) then
			element["ScrollBar"]["Sprite"]("visible"):SetInt(0)
			element["ScrollMarker"]["Marker"]("visible"):SetInt(0)
		else
			if(numEntries * topIslandsList:parent()["TopIslandElements"]:GetElement("topislandentry1"):absH() &gt; topIslandsList:absH()) then
				element["ScrollBar"]["Sprite"]("visible"):SetInt(1)
				element["ScrollMarker"]["Marker"]("visible"):SetInt(1)
			else
				element["ScrollBar"]["Sprite"]("visible"):SetInt(0)
				element["ScrollMarker"]["Marker"]("visible"):SetInt(0)
			end
		end
		lua_sys.playSoundFx("audio/sfx/menu_slide.wav")
	</event>

	<event name="queuePop" params="element">
		element:root():popPopUp()
	</event>
	
</menu>