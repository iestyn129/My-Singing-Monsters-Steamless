<?xml version="1.0" encoding="utf-8"?>
<menu xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="menu.xsd">
	
	<event name="queuePop" params="element">
		element:root():popPopUp()
		print "pop pop"
	</event>
	
	<element name="FadedBG">
		<size dependentOnElement="element:name()" dependentOnComponent="Sprite" />
		<position relativeTo="SCREEN" vAnchor="VCENTER" hAnchor="HCENTER" />
		<orientation vAnchor="VCENTER" hAnchor="HCENTER" xOffset="0" yOffset="0" priorityOffset="0" />
		<spriteComponent name="Sprite">
			<event name="onInit" params="component, element">
				component("spriteName"):SetString("__BUILTIN__WHITE_TEXTURE")
				component:setScale(Vector2(lua_sys.screenWidth()*0.25, lua_sys.screenHeight()*0.25))
				component:setColor(0.0, 0.0, 0.0)
				component("alpha"):SetFloat(0.5)
				component("layer"):SetString("MidPopUps")
			</event>
		</spriteComponent>
		<touchComponent name="Touch">
			<size dependentOnElement="element:name()" />
			<position relativeTo="element:name()" vAnchor="VCENTER" hAnchor="HCENTER" />
			<orientation vAnchor="VCENTER" hAnchor="HCENTER" xOffset="0" yOffset="0" priorityOffset="7" />
		</touchComponent>
	</element>
	
	<element name="bg">
		<size dependentOnElement="element:name()" dependentOnComponent="Sprite" />
		<position relativeTo="PARENT" vAnchor="VCENTER" hAnchor="HCENTER" />
		<orientation vAnchor="VCENTER" hAnchor="HCENTER" xOffset="0" yOffset="-30*game.hudScale()" priorityOffset="6" />
		<ninesliceComponent name="Sprite">
			<size w="340*game.hudScale()" h="230*game.hudScale()" />
			<event name="onInit" params="component, element">
				component("topHeight"):SetFloat(50.0)
				component("bottomHeight"):SetFloat(50.0)
				component("leftWidth"):SetFloat(50.0)
				component("rightWidth"):SetFloat(50.0)
				component("includeBorder"):SetInt(1)
				component("size"):SetFloat(0.5)
				component("spriteName"):SetString("gfx/menu/Black9SFrame50")
				component("layer"):SetString("FrontPopUps")
				component("includeBorder"):SetInt(1)
			</event>
		</ninesliceComponent>
		<spriteSheetComponent name="Flourish1">
			<position relativeTo="element:name()" vAnchor="TOP" hAnchor="LEFT" />
			<orientation vAnchor="TOP" hAnchor="LEFT" xOffset="7" yOffset="7" priorityOffset="-2" />
			<event name="onInit" params="component, element">
				component("spriteName"):SetString("menu_swirl_01")
				component("sheetName"):SetString("xml_resources/hud01.xml")
				component("size"):SetFloat(0.5*game.menuScaleX())
				component("layer"):SetString("FrontPopUps")
			</event>
		</spriteSheetComponent>
		<spriteSheetComponent name="Flourish2">
			<position relativeTo="element:name()" vAnchor="TOP" hAnchor="RIGHT" />
			<orientation vAnchor="TOP" hAnchor="RIGHT" xOffset="7" yOffset="10" priorityOffset="-2" />
			<event name="onInit" params="component, element">
				component("spriteName"):SetString("menu_swirl_02")
				component("sheetName"):SetString("xml_resources/hud01.xml")
				component("size"):SetFloat(0.5*game.menuScaleX())
				component("rotation"):SetFloat(-0.5*math.pi)
				component("layer"):SetString("FrontPopUps")
			</event>
		</spriteSheetComponent>
	</element>

	<element name="Parent">
		<size w="260*game.menuScaleX()" h="45*game.hudScale()" />
		<position relativeTo="bg" vAnchor="VCENTER" hAnchor="HCENTER" />
		<orientation vAnchor="VCENTER" hAnchor="HCENTER" xOffset="0" yOffset="-45*game.hudScale()" priorityOffset="-1" />
		<event name="populate" params="element">
		<![CDATA[
			local offsetY = 0*game.menuScaleY()
			local entries = {}
			local index = 0

			local genes = element:parent()("Genes"):GetString()
			print("genes " .. genes)
			for i=1, #genes do

				if(i > 1) then
					local plus = menu:addTemplateElement("template_plus", "plus"..index, element)
					plus:relativeTo(element)
					plus:setRelativeObjectAnchors(lua_sys.HCENTER, lua_sys.VCENTER)
					plus:setOrientation(lua_sys.MenuOrientation(0, offsetY, -1, lua_sys.LEFT, lua_sys.VCENTER))
					plus:init()
					plus:setPositionBroadcast(true)
					table.insert(entries, plus)
				end

				local entry = menu:addTemplateElement("template_critter_synthesizing_entry", "critter"..index, element)

				table.insert(entries, entry)

				entry.gene = genes:sub(i,i)

				entry:relativeTo(element)
				entry:setRelativeObjectAnchors(lua_sys.HCENTER, lua_sys.VCENTER)
				entry:setOrientation(lua_sys.MenuOrientation(0, offsetY, -1, lua_sys.LEFT, lua_sys.VCENTER))
				entry("Layer"):SetString("FrontPopUps")
				entry:init()
				entry:setPositionBroadcast(true)

				entry:disable()

				index = index + 1
			end
		
			include("MenuHelpers").CenterHorizontally(entries)
		]]>
		</event>
	</element>
	
	<element name="Prefix">
		<size dependentOnElement="element:name()" dependentOnComponent="Text" />
		<position relativeTo="Parent" vAnchor="BOTTOM" hAnchor="HCENTER" />
		<orientation vAnchor="TOP" hAnchor="HCENTER" xOffset="0" yOffset="15*game.menuScaleX()" priorityOffset="0" />
		<textComponent name="Text">
			<size w="340*game.hudScale()" />
			<position relativeTo="element" vAnchor="VCENTER" hAnchor="HCENTER" />
			<orientation vAnchor="VCENTER" hAnchor="HCENTER" xOffset="0" yOffset="0" priorityOffset="0" />
			<event name="onInit" params="component, element">			
				component("textPadding"):SetInt(30)
				component("autoScale"):SetInt(1)
				component("font"):Set(game.getTextFont())
				component("alignment"):SetInt(lua_sys.MenuTextComponent_TEXT_HCENTER_ALIGNED)
				component("text"):SetString(game.getLocalizedText("SYNTHESIZING_GETNOW_PREFIX"))
				component("size"):SetFloat(0.23*game.hudScale())
				component("layer"):SetString("FrontPopUps")
			</event>
		</textComponent>
	</element>
	<element name="Time">
		<size dependentOnElement="element:name()" dependentOnComponent="Text" />
		<position relativeTo="Prefix" vAnchor="BOTTOM" hAnchor="HCENTER" />
		<orientation vAnchor="TOP" hAnchor="HCENTER" xOffset="0" yOffset="0" priorityOffset="0" />
		<event name="onInit" params="element">
			element("update"):SetInt(0)
		</event>
		<textComponent name="Text">
			<size w="340*game.hudScale()" />
			<position relativeTo="element" vAnchor="VCENTER" hAnchor="HCENTER" />
			<orientation vAnchor="VCENTER" hAnchor="HCENTER" xOffset="0" yOffset="0" priorityOffset="0" />
			<event name="onInit" params="component, element">			
				component("textPadding"):SetInt(30)
				component("autoScale"):SetInt(1)
				component("font"):Set(game.getTextFont())
				component("alignment"):SetInt(lua_sys.MenuTextComponent_TEXT_HCENTER_ALIGNED)
				component("text"):SetString("00:00:00")
				component:setColor(0.31, 0.94, 0.26)
				component("size"):SetFloat(0.23*game.hudScale())
				component("layer"):SetString("FrontPopUps")
			</event>
			<event name="onTick" params="component, element, dt">	
				<![CDATA[
					if(element("update"):GetInt()==1) then
						local timeLeft = game.timeLeftOnStruct();
						if(timeLeft > 0) then
							component("text"):SetString(game.timeToString(timeLeft));
						else
							element("update"):SetInt(0)
							element:root():popPopUp()
							game.deselectSelectedObject()
							manager:setContext(manager:getDefaultContext())

						end
					end
				]]>
			</event>
		</textComponent>
		
	</element>
	<element name="Postfix">
		<size dependentOnElement="element:name()" dependentOnComponent="Text" />
		<position relativeTo="Time" vAnchor="BOTTOM" hAnchor="HCENTER" />
		<orientation vAnchor="TOP" hAnchor="HCENTER" xOffset="0" yOffset="10*game.menuScaleX()" priorityOffset="0" />
		<event name="onInit" params="element">
			element("diamonds"):SetInt(0)
		</event>
		<textComponent name="Text">
			<size w="300*game.hudScale()" />
			<position relativeTo="element" vAnchor="VCENTER" hAnchor="HCENTER" />
			<orientation vAnchor="VCENTER" hAnchor="HCENTER" xOffset="0" yOffset="0" priorityOffset="0" />
			<event name="onInit" params="component, element">			
				component("textPadding"):SetInt(30)
				component("autoScale"):SetInt(1)
				component("font"):Set(game.getTextFont())
				component("alignment"):SetInt(lua_sys.MenuTextComponent_TEXT_HCENTER_ALIGNED)
				component("text"):SetString("GETNOW_POSTFIX")
				component("size"):SetFloat(0.23*game.hudScale())
				component("layer"):SetString("FrontPopUps")
			</event>
			<event name="onTick" params="component, element, dt">
			
				if(element:parent()["Time"]("update"):GetInt()==1) then
					local newDiamond = game.diamondsLeftToSpeedup()
					if(newDiamond ~= element("diamonds"):GetInt()) then
					
						local text = game.getLocalizedText("GETNOW_POSTFIX")
						text = select(1, text:gsub("XXX", game.diamondsLeftToSpeedup()))
						component("text"):SetString(text);
						element("diamonds"):SetInt(newDiamond)
						
					end
				end
			</event>
		</textComponent>
	</element>
	
	<element name="TitleFrame">
		<size dependentOnElement="element:name()" dependentOnComponent="Sprite" />
		<position relativeTo="bg" vAnchor="BOTTOM" hAnchor="HCENTER" />
		<orientation vAnchor="VCENTER" hAnchor="HCENTER" xOffset="0" yOffset="0" priorityOffset="-3" />
		<ninesliceComponent name="Sprite">
			<size w="200*game.menuScaleX()" h="50*game.hudScale()" />
			<event name="onInit" params="component, element">
				component("topHeight"):SetFloat(44.0)
				component("bottomHeight"):SetFloat(44.0)
				component("leftWidth"):SetFloat(50.0)
				component("rightWidth"):SetFloat(50.0)
				component("size"):SetFloat(0.5)
				component("includeBorder"):SetInt(1)
				component("spriteName"):SetString("gfx/menu/GreyTitleFrame")
				component("layer"):SetString("FrontPopUps")
				component("visible"):SetInt(0)
			</event>
		</ninesliceComponent>
	</element>
	
	
	
	<template type="template_spritesheetbutton" name="Wait">
		<hudScale scale="game.hudScale()" />
		<templateVar name="$text" equals="WAIT_LABEL" />
		<templateVar name="$spriteScale" equals="0.5" />
		<templateVar name="$layer" equals="FrontPopUps" />
		<position relativeTo="bg" vAnchor="BOTTOM" hAnchor="LEFT" />
		<orientation vAnchor="VCENTER" hAnchor="LEFT" xOffset="0" yOffset="-10" priorityOffset="-1" />
		<event name="onTick" params="element, dt">
			onTick(element, dt)
			if(element["UpSprite"]("size"):GetFloat() ~= element["Overlay"]("size"):GetFloat()) then
				element["Overlay"]("size"):SetFloat(element["UpSprite"]("size"):GetFloat())
			end
		</event>
		<textComponent name="Text">
			<position relativeTo="element:name()" vAnchor="BOTTOM" hAnchor="HCENTER" />
			<orientation vAnchor="TOP" hAnchor="HCENTER" xOffset="0" yOffset="0" />
			<event name="onInit" params="component, element">
				onInit(component, element)
				component("size"):SetFloat(0.25)
			</event>
		</textComponent>
		<touchComponent name="Touch">
			<event name="onTouchDown" params="component, element">
				onTouchDown(component, element)
				element["Overlay"]:setColor(0.5, 0.5, 0.5)
			</event>
			<event name="onTouchUp" params="component, element">
				onTouchUp(component, element)
				element["Overlay"]:setColor(1.0, 1.0, 1.0)
				element:root():popPopUp()
				game.deselectSelectedObject()
				manager:setContext(manager:getDefaultContext())
			</event>
			<event name="onTouchRelease" params="component, element">
				onTouchRelease(component, element)
				element["Overlay"]:setColor(1.0, 1.0, 1.0)
			</event>
		</touchComponent>
		<spriteSheetComponent name="Overlay">
			<position relativeTo="element:name()" vAnchor="VCENTER" hAnchor="HCENTER" />
			<orientation vAnchor="VCENTER" hAnchor="HCENTER" xOffset="0" yOffset="0" priorityOffset="-1" />
			<event name="onInit" params="component, element">
				component("spriteName"):SetString("button_wait")
				component("sheetName"):SetString("xml_resources/hud03.xml")
				component("layer"):SetString("FrontPopUps")
				component("size"):SetFloat(0.5)
			</event>
		</spriteSheetComponent>
	</template>	
	
	<template type="template_spritesheetbutton" name="GetItNow">
		<hudScale scale="game.hudScale()" />
		<templateVar name="$text" equals="CONTEXTBAR_SPEED_LABEL" />
		<templateVar name="$spriteScale" equals="0.5" />
		<templateVar name="$layer" equals="FrontPopUps" />
		<!-- position relativeTo="TitleFrame" vAnchor="VCENTER" hAnchor="RIGHT" />
		<orientation vAnchor="VCENTER" hAnchor="RIGHT" xOffset="0" yOffset="0" priorityOffset="0" / -->
		<position relativeTo="bg" vAnchor="BOTTOM" hAnchor="RIGHT" />
		<orientation vAnchor="VCENTER" hAnchor="RIGHT" xOffset="0" yOffset="-10" priorityOffset="-1" />
		<event name="onTick" params="element, dt">
			onTick(element, dt)
			if(element["UpSprite"]("size"):GetFloat() ~= element["Overlay"]("size"):GetFloat()) then
				element["Overlay"]("size"):SetFloat(element["UpSprite"]("size"):GetFloat())
			end
		</event>
		<textComponent name="Text">
			<position relativeTo="element:name()" vAnchor="BOTTOM" hAnchor="HCENTER" />
			<orientation vAnchor="TOP" hAnchor="HCENTER" xOffset="0" yOffset="0" />
			<event name="onInit" params="component, element">
				onInit(component, element)
				component("size"):SetFloat(0.25)
			</event>
		</textComponent>
		<touchComponent name="Touch">
			<event name="onTouchDown" params="component, element">
				onTouchDown(component, element)
				element["Overlay"]:setColor(0.5, 0.5, 0.5)
			</event>
			<event name="onTouchUp" params="component, element">
				onTouchUp(component, element)
				element["Overlay"]:setColor(1.0, 1.0, 1.0)
				game.speedUpNoPrompt();
				element:root():popPopUp()
				game.deselectSelectedObject()
				manager:setContext(manager:getDefaultContext())

			</event>
			<event name="onTouchRelease" params="component, element">
				onTouchRelease(component, element)
				element["Overlay"]:setColor(1.0, 1.0, 1.0)
			</event>
		</touchComponent>
		<spriteSheetComponent name="Overlay">
			<position relativeTo="element:name()" vAnchor="VCENTER" hAnchor="HCENTER" />
			<orientation vAnchor="VCENTER" hAnchor="HCENTER" xOffset="0" yOffset="0" priorityOffset="-1" />
			<event name="onInit" params="component, element">
				component("spriteName"):SetString("button_finish")
				component("sheetName"):SetString("xml_resources/context_buttons.xml")
				component("layer"):SetString("FrontPopUps")
				component("size"):SetFloat(0.5)
			</event>
		</spriteSheetComponent>
	</template>	

	<event name="onInit" params="element">
		element("Genes"):SetString("KKK")
		lua_sys.playSoundFx("audio/sfx/structure_synthesizer_activate.wav")		
	</event>

	<event name="update" params="element">
		element["Parent"]:DoStoredScript("populate")
		element["Time"]("update"):SetInt(1)
	</event>

</menu>