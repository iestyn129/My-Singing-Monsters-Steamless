<?xml version="1.0" encoding="utf-8"?>
<menu xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="menu.xsd">
	
	<element name="FadedBG">
		<size dependentOnElement="element:name()" dependentOnComponent="Sprite" />
		<position relativeTo="SCREEN" vAnchor="VCENTER" hAnchor="HCENTER" />
		<orientation vAnchor="VCENTER" hAnchor="HCENTER" xOffset="0" yOffset="0" priorityOffset="3" />
		<spriteComponent name="Sprite">
			<event name="onInit" params="component, element">
				component("spriteName"):SetString("__BUILTIN__WHITE_TEXTURE")
				component:setScale(Vector2(lua_sys.screenWidth()*0.25, lua_sys.screenHeight()*0.25))
				component:setColor(0.0, 0.0, 0.0)
				component("alpha"):SetFloat(0.0)
				component("layer"):SetString("FrontPopUps")
			</event>
		</spriteComponent>
		<touchComponent name="Touch">
			<size dependentOnElement="element:name()" />
			<position relativeTo="element:name()" vAnchor="VCENTER" hAnchor="HCENTER" />
			<orientation vAnchor="VCENTER" hAnchor="HCENTER" xOffset="0" yOffset="0" priorityOffset="0" />
		</touchComponent>
	</element>
	
	<element name="bg">
		<size dependentOnElement="element:name()" dependentOnComponent="Sprite" />
		<position relativeTo="SCREEN" vAnchor="VCENTER" hAnchor="HCENTER" />
		<orientation vAnchor="VCENTER" hAnchor="HCENTER" xOffset="-1*lua_sys.screenWidth()" yOffset="-15*game.hudScale()" priorityOffset="2" />
		<ninesliceComponent name="Sprite">
			<size w="340*game.hudScale()" h="230*game.hudScale()" />
			<event name="onInit" params="component, element">
				component("topHeight"):SetFloat(50.0)
				component("bottomHeight"):SetFloat(50.0)
				component("leftWidth"):SetFloat(50.0)
				component("rightWidth"):SetFloat(50.0)
				component("size"):SetFloat(0.5)
				component("includeBorder"):SetInt(1)
				component("spriteName"):SetString("gfx/menu/Black9SFrame50")
				component("layer"):SetString("FrontPopUps")
			</event>
		</ninesliceComponent>
		<spriteSheetComponent name="Flourish1">
			<position relativeTo="element:name()" vAnchor="TOP" hAnchor="LEFT" />
			<orientation vAnchor="TOP" hAnchor="LEFT" xOffset="7" yOffset="7" priorityOffset="-1" />
			<event name="onInit" params="component, element">
				component("spriteName"):SetString("menu_swirl_01")
				component("sheetName"):SetString("xml_resources/hud01.xml")
				component("size"):SetFloat(0.5*game.menuScaleX())
				component("layer"):SetString("FrontPopUps")
			</event>
		</spriteSheetComponent>
		<spriteSheetComponent name="Flourish2">
			<position relativeTo="element:name()" vAnchor="TOP" hAnchor="RIGHT" />
			<orientation vAnchor="TOP" hAnchor="RIGHT" xOffset="7" yOffset="10" priorityOffset="-1" />
			<event name="onInit" params="component, element">
				component("spriteName"):SetString("menu_swirl_02")
				component("sheetName"):SetString("xml_resources/hud01.xml")
				component("size"):SetFloat(0.5*game.menuScaleX())
				component("rotation"):SetFloat(-0.5*math.pi)
				component("layer"):SetString("FrontPopUps")
			</event>
		</spriteSheetComponent>
	</element>
	
	<element name="TitleFrame">
		<size dependentOnElement="element:name()" dependentOnComponent="Sprite" />
		<position relativeTo="bg" vAnchor="TOP" hAnchor="HCENTER" />
		<orientation vAnchor="VCENTER" hAnchor="HCENTER" xOffset="0" yOffset="0" priorityOffset="-1" />
		<ninesliceComponent name="Sprite">
			<size w="175*game.hudScale()" h="50" />
			<event name="onInit" params="component, element">
				component("topHeight"):SetFloat(50.0)
				component("bottomHeight"):SetFloat(50.0)
				component("leftWidth"):SetFloat(50.0)
				component("rightWidth"):SetFloat(50.0)
				component("size"):SetFloat(0.5)
				component("includeBorder"):SetInt(1)
				component("spriteName"):SetString("gfx/menu/GreyTitleFrame")
				component("layer"):SetString("FrontPopUps")
			</event>
		</ninesliceComponent>
	</element>
	
	<element name="TitleLabel">
		<size dependentOnElement="element:name()" dependentOnComponent="Text" />
		<position relativeTo="TitleFrame" vAnchor="VCENTER" hAnchor="HCENTER" />
		<orientation vAnchor="VCENTER" hAnchor="HCENTER" xOffset="0" yOffset="0" priorityOffset="-1" />
		<textComponent name="Text">
			<size w="160*game.hudScale()" h="35" />
			<position relativeTo="element:name()" vAnchor="VCENTER" hAnchor="HCENTER" />
			<orientation vAnchor="VCENTER" hAnchor="HCENTER" xOffset="0" yOffset="0" priorityOffset="0" />
			<event name="onInit" params="component, element">
				component("multiline"):SetInt(0)
				component("font"):Set(game.getTitleFont())
				component:setColor(0.43, 0.98, 0.02)
				component("size"):SetFloat(0.45*game.hudScale())
				component("alignment"):SetInt(lua_sys.MenuTextComponent_TEXT_HCENTER_ALIGNED)
				component("text"):SetString(game.localizedUpper(game.getLocalizedText("CONFIRMATION_TITLE")))
				component("autoScale"):SetInt(1)
				component("layer"):SetString("FrontPopUps")
			</event>
		</textComponent>
	</element>
		
	<element name="Sprite">
		<size dependentOnElement="element:name()" dependentOnComponent="Sprite" />
		<position relativeTo="bg" vAnchor="TOP" hAnchor="HCENTER" />
		<orientation vAnchor="VCENTER" hAnchor="HCENTER" xOffset="0" yOffset="50*game.hudScale()" priorityOffset="-1" />
		<spriteSheetComponent name="Sprite">
			<event name="onInit" params="component, element">
				component("spriteName"):SetString("button_collectall")
				component("sheetName"):SetString("xml_resources/context_buttons.xml")
				component("size"):SetFloat(0.50*game.hudScale())
				component("visible"):SetInt(1)
				component("layer"):SetString("FrontPopUps")
			</event>
		</spriteSheetComponent>
	</element>
	
	<element name="Notification">
		<size dependentOnElement="element:name()" dependentOnComponent="Text" />
		<position relativeTo="Sprite" vAnchor="BOTTOM" hAnchor="HCENTER" />
		<orientation vAnchor="TOP" hAnchor="HCENTER" xOffset="0" yOffset="-10*game.hudScale()" priorityOffset="0" />
		<textComponent name="Text">
			<size w="320*game.hudScale()" h="120*game.hudScale()" />
			<position relativeTo="element:name()" vAnchor="VCENTER" hAnchor="HCENTER" />
			<orientation vAnchor="VCENTER" hAnchor="HCENTER" xOffset="0" yOffset="" priorityOffset="0" />
			<event name="onInit" params="component, element">
				component("multiline"):SetInt(1)
				component("font"):Set(game.getTextFont())
				component("alignment"):SetInt(lua_sys.MenuTextComponent_TEXT_HCENTER_ALIGNED)
				if(not game.showCollectAllEventTag()) then
					component("text"):SetString("COLLECT_ALL_CURRENCY_CONF")
				else
					component("text"):SetString("COLLECT_ALL_CURRENCY_FREETRIAL_CONF")
				end
				component("size"):SetFloat(0.4*game.hudScale())
				component("layer"):SetString("FrontPopUps")
				component("autoScale"):SetInt(1)
			</event>
		</textComponent>
	</element>
	
	<element name="CoinAmount">
		<size dependentOnElement="element:name()" dependentOnComponent="Text" />
		<position relativeTo="Notification" vAnchor="BOTTOM" hAnchor="HCENTER" />
		<orientation vAnchor="TOP" hAnchor="HCENTER" xOffset="0" yOffset="0" priorityOffset="0" />
		<textComponent name="Text">
			<size w="280*game.hudScale()" h="120*game.hudScale()" />
			<position relativeTo="element:name()" vAnchor="VCENTER" hAnchor="HCENTER" />
			<orientation vAnchor="VCENTER" hAnchor="HCENTER" xOffset="10*game.hudScale()" yOffset="0" priorityOffset="0" />
			<event name="onInit" params="component, element">
				component("multiline"):SetInt(1)
				component("font"):Set(game.getTitleFont())
				component("alignment"):SetInt(lua_sys.MenuTextComponent_TEXT_HCENTER_ALIGNED)
				component("text"):SetString(game.commaizeNumber(game.approxCollectAllAmt()))
				component("size"):SetFloat(0.4*game.hudScale())
				
				if(game.isEtherealIsland()) then
					game.StoreContext_setCurrencyTypeColour(game.StoreContext_TYPE_ETH_CURRENCY, component)
				elseif(game.isAmberIsland()) then
					game.StoreContext_setCurrencyTypeColour(game.StoreContext_TYPE_RELICS, component)
				else
					game.StoreContext_setCurrencyTypeColour(game.StoreContext_TYPE_COINS, component)
				end
				
				component("layer"):SetString("FrontPopUps")
				component("autoScale"):SetInt(1)
				component("visible"):SetInt(0)
			</event>
		</textComponent>
		<spriteSheetComponent name="Icon">
			<position relativeTo="element:name()" component="Text" vAnchor="VCENTER" hAnchor="LEFT" />
			<orientation vAnchor="VCENTER" hAnchor="RIGHT" xOffset="0" yOffset="0" priorityOffset="0" />
			<event name="onInit" params="component, element">
				if(not game.isAmberIsland()) then
					component("spriteName"):SetString(game.coinsSpriteImgForThisIsland())
				else
					component("spriteName"):SetString(game.StoreContext_SPRITE_RELIC)
				end
				component("sheetName"):SetString(game.StoreContext_CURRENCY_SPRITESHEET)
				component("size"):SetFloat(0.35*game.hudScale()*game.StoreContext_currencySpriteWidthNormalize(component("spriteName"):GetString()))
				component("layer"):SetString("FrontPopUps")
				component("visible"):SetInt(0)
			</event>
		</spriteSheetComponent>
	</element>
	
	<element name="PlusBonus">
		<size dependentOnElement="element:name()" dependentOnComponent="PlusText" />
		<position relativeTo="Notification" vAnchor="BOTTOM" hAnchor="HCENTER" />
		<orientation vAnchor="TOP" hAnchor="HCENTER" xOffset="0" yOffset="0" priorityOffset="0" />
		<textComponent name="PlusText">
			<size w="280*game.hudScale()" h="120*game.hudScale()" />
			<position relativeTo="element:name()" vAnchor="VCENTER" hAnchor="HCENTER" />
			<orientation vAnchor="VCENTER" hAnchor="HCENTER" xOffset="0" yOffset="0" priorityOffset="0" />
			<event name="onInit" params="component, element">
				component("multiline"):SetInt(1)
				component("font"):Set(game.getTitleFont())
				component("alignment"):SetInt(lua_sys.MenuTextComponent_TEXT_HCENTER_ALIGNED)
				component("text"):SetString("+")
				component("size"):SetFloat(0.4*game.hudScale())
				component("layer"):SetString("FrontPopUps")
				component("autoScale"):SetInt(1)
				component("visible"):SetInt(0)
			</event>
		</textComponent>
		<textComponent name="Text">
			<size w="280*game.hudScale()" h="120*game.hudScale()" />
			<position relativeTo="element:name()" component="PlusText" vAnchor="VCENTER" hAnchor="RIGHT" />
			<orientation vAnchor="VCENTER" hAnchor="LEFT" xOffset="8*game.hudScale()" yOffset="0" priorityOffset="0" />
			<event name="onInit" params="component, element">
				component("multiline"):SetInt(1)
				component("font"):Set(game.getTitleFont())
				component("alignment"):SetInt(lua_sys.MenuTextComponent_TEXT_LEFT_ALIGNED)
				component:setColor(0.43, 0.98, 0.02)
				component("text"):SetString("COLLECT_ALL_BONUS")
				component("size"):SetFloat(0.4*game.hudScale())
				component("layer"):SetString("FrontPopUps")
				component("autoScale"):SetInt(1)
				component("visible"):SetInt(0)
			</event>
		</textComponent>
	</element>
	
	<element name="FoodAmount">
		<size w="38*game.hudScale()" h="30*game.hudScale()" />
		<position relativeTo="Notification" vAnchor="BOTTOM" hAnchor="HCENTER" />
		<orientation vAnchor="TOP" hAnchor="RIGHT" xOffset="0" yOffset="0" priorityOffset="0" />
		<spriteSheetComponent name="Icon">
			<position relativeTo="element:name()" vAnchor="VCENTER" hAnchor="LEFT" />
			<orientation vAnchor="VCENTER" hAnchor="LEFT" xOffset="0" yOffset="0" priorityOffset="0" />
			<event name="onInit" params="component, element">
				component("spriteName"):SetString(game.StoreContext_SPRITE_FOOD)
				component("sheetName"):SetString(game.StoreContext_CURRENCY_SPRITESHEET)
				component("size"):SetFloat(0.35*game.hudScale()*game.StoreContext_currencySpriteWidthNormalize(component("spriteName"):GetString()))
				component("layer"):SetString("FrontPopUps")
				component("visible"):SetInt(0)
			</event>
		</spriteSheetComponent>
		<textComponent name="Text">
			<position relativeTo="element:name()" vAnchor="VCENTER" hAnchor="RIGHT" />
			<orientation vAnchor="VCENTER" hAnchor="RIGHT" xOffset="0" yOffset="0" priorityOffset="0" />
			<event name="onInit" params="component, element">
				component("multiline"):SetInt(1)
				component("font"):Set(game.getTitleFont())
				component("alignment"):SetInt(lua_sys.MenuTextComponent_TEXT_RIGHT_ALIGNED)
				component("text"):SetString("?")
				component("size"):SetFloat(0.4*game.hudScale())
				game.StoreContext_setCurrencyTypeColour(game.StoreContext_TYPE_FOOD, component)
				component("layer"):SetString("FrontPopUps")
				component("visible"):SetInt(0)
			</event>
		</textComponent>
	</element>
	
	<element name="EthAmount">
		<size w="38*game.hudScale()" h="30*game.hudScale()" />
		<position relativeTo="FoodAmount" vAnchor="VCENTER" hAnchor="RIGHT" />
		<orientation vAnchor="VCENTER" hAnchor="LEFT" xOffset="8*game.hudScale()" yOffset="0" priorityOffset="0" />
		<spriteSheetComponent name="Icon">
			<position relativeTo="element:name()" vAnchor="VCENTER" hAnchor="LEFT" />
			<orientation vAnchor="VCENTER" hAnchor="LEFT" xOffset="0" yOffset="0" priorityOffset="0" />
			<event name="onInit" params="component, element">
				component("spriteName"):SetString(game.StoreContext_SPRITE_ETH_CURRENCY)
				component("sheetName"):SetString(game.StoreContext_CURRENCY_SPRITESHEET)
				component("size"):SetFloat(0.35*game.hudScale()*game.StoreContext_currencySpriteWidthNormalize(component("spriteName"):GetString()))
				component("layer"):SetString("FrontPopUps")
				component("visible"):SetInt(0)
			</event>
		</spriteSheetComponent>
		<textComponent name="Text">
			<position relativeTo="element:name()" vAnchor="VCENTER" hAnchor="RIGHT" />
			<orientation vAnchor="VCENTER" hAnchor="RIGHT" xOffset="0" yOffset="0" priorityOffset="0" />
			<event name="onInit" params="component, element">
				component("multiline"):SetInt(1)
				component("font"):Set(game.getTitleFont())
				component("alignment"):SetInt(lua_sys.MenuTextComponent_TEXT_RIGHT_ALIGNED)
				component("text"):SetString("?")
				component("size"):SetFloat(0.4*game.hudScale())
				game.StoreContext_setCurrencyTypeColour(game.StoreContext_TYPE_ETH_CURRENCY, component)
				component("layer"):SetString("FrontPopUps")
				component("visible"):SetInt(0)
			</event>
		</textComponent>
	</element>
	
	<element name="DiamondsAmount">
		<size dependentOnElement="element:name()" dependentOnComponent="Icon" />
		<position relativeTo="EthAmount" vAnchor="VCENTER" hAnchor="RIGHT" />
		<orientation vAnchor="VCENTER" hAnchor="LEFT" xOffset="8*game.hudScale()" yOffset="0" priorityOffset="0" />
		<spriteSheetComponent name="Icon">
			<position relativeTo="element:name()" vAnchor="VCENTER" hAnchor="LEFT" />
			<orientation vAnchor="VCENTER" hAnchor="LEFT" xOffset="0" yOffset="0" priorityOffset="0" />
			<event name="onInit" params="component, element">
				component("spriteName"):SetString(game.StoreContext_SPRITE_DIAMOND)
				component("sheetName"):SetString(game.StoreContext_CURRENCY_SPRITESHEET)
				component("size"):SetFloat(0.35*game.hudScale()*game.StoreContext_currencySpriteWidthNormalize(component("spriteName"):GetString()))
				component("layer"):SetString("FrontPopUps")
				component("visible"):SetInt(0)
			</event>
		</spriteSheetComponent>
		<textComponent name="Text">
			<size w="280*game.hudScale()" h="120*game.hudScale()" />
			<position relativeTo="element:name()" component="Icon" vAnchor="VCENTER" hAnchor="RIGHT" />
			<orientation vAnchor="VCENTER" hAnchor="LEFT" xOffset="0" yOffset="0" priorityOffset="0" />
			<event name="onInit" params="component, element">
				component("multiline"):SetInt(1)
				component("font"):Set(game.getTitleFont())
				component("alignment"):SetInt(lua_sys.MenuTextComponent_TEXT_LEFT_ALIGNED)
				component("text"):SetString("?")
				component("size"):SetFloat(0.4*game.hudScale())
				game.StoreContext_setCurrencyTypeColour(game.StoreContext_TYPE_DIAMOND, component)
				component("layer"):SetString("FrontPopUps")
				component("visible"):SetInt(0)
			</event>
		</textComponent>
	</element>
	
	<element name="KeysAmount">
		<size dependentOnElement="element:name()" dependentOnComponent="Icon" />
		<position relativeTo="DiamondsAmount" vAnchor="VCENTER" hAnchor="RIGHT" />
		<orientation vAnchor="VCENTER" hAnchor="LEFT" xOffset="16*game.hudScale()" yOffset="0" priorityOffset="0" />
		<spriteSheetComponent name="Icon">
			<position relativeTo="element:name()" vAnchor="VCENTER" hAnchor="LEFT" />
			<orientation vAnchor="VCENTER" hAnchor="LEFT" xOffset="0" yOffset="0" priorityOffset="0" />
			<event name="onInit" params="component, element">
				component("spriteName"):SetString(game.StoreContext_SPRITE_KEY)
				component("sheetName"):SetString(game.StoreContext_CURRENCY_SPRITESHEET)
				component("size"):SetFloat(0.35*game.hudScale()*game.StoreContext_currencySpriteWidthNormalize(component("spriteName"):GetString()))
				component("layer"):SetString("FrontPopUps")
				component("visible"):SetInt(0)
			</event>
		</spriteSheetComponent>
		<textComponent name="Text">
			<size w="280*game.hudScale()" h="120*game.hudScale()" />
			<position relativeTo="element:name()" component="Icon" vAnchor="VCENTER" hAnchor="RIGHT" />
			<orientation vAnchor="VCENTER" hAnchor="LEFT" xOffset="0" yOffset="0" priorityOffset="0" />
			<event name="onInit" params="component, element">
				component("multiline"):SetInt(1)
				component("font"):Set(game.getTitleFont())
				component("alignment"):SetInt(lua_sys.MenuTextComponent_TEXT_LEFT_ALIGNED)
				component("text"):SetString("?")
				component("size"):SetFloat(0.4*game.hudScale())
				game.StoreContext_setCurrencyTypeColour(game.StoreContext_TYPE_KEYS, component)
				component("layer"):SetString("FrontPopUps")
				component("visible"):SetInt(0)
			</event>
		</textComponent>
	</element>
	
	<element name="MysteryCoinAmount">
		<size dependentOnElement="element:name()" dependentOnComponent="Text" />
		<position relativeTo="FoodAmount" component="Icon" vAnchor="VCENTER" hAnchor="LEFT" />
		<orientation vAnchor="VCENTER" hAnchor="RIGHT" xOffset="8*game.hudScale()" yOffset="0" priorityOffset="0" />
		<textComponent name="Text">
			<size w="280*game.hudScale()" h="120*game.hudScale()" />
			<position relativeTo="element:name()" vAnchor="VCENTER" hAnchor="HCENTER" />
			<orientation vAnchor="VCENTER" hAnchor="HCENTER" xOffset="0" yOffset="0" priorityOffset="0" />
			<event name="onInit" params="component, element">
				component("multiline"):SetInt(1)
				component("font"):Set(game.getTitleFont())
				component("alignment"):SetInt(lua_sys.MenuTextComponent_TEXT_HCENTER_ALIGNED)
				component("text"):SetString("?")
				component("size"):SetFloat(0.4*game.hudScale())
				game.StoreContext_setCurrencyTypeColour(game.StoreContext_TYPE_COINS, component)
				component("layer"):SetString("FrontPopUps")
				component("visible"):SetInt(0)
			</event>
		</textComponent>
		<spriteSheetComponent name="Icon">
			<position relativeTo="element:name()" component="Text" vAnchor="VCENTER" hAnchor="LEFT" />
			<orientation vAnchor="VCENTER" hAnchor="RIGHT" xOffset="0" yOffset="0" priorityOffset="0" />
			<event name="onInit" params="component, element">
				component("spriteName"):SetString(game.StoreContext_SPRITE_COINS)
				component("sheetName"):SetString(game.StoreContext_CURRENCY_SPRITESHEET)
				component("size"):SetFloat(0.35*game.hudScale()*game.StoreContext_currencySpriteWidthNormalize(component("spriteName"):GetString()))
				component("layer"):SetString("FrontPopUps")
				component("visible"):SetInt(0)
			</event>
		</spriteSheetComponent>
		
	</element>
	
	<template type="template_spritesheetbutton" name="YesButton">
		<hudScale scale="game.hudScale()" />
		<templateVar name="$text" equals="" />
		<templateVar name="$spriteScale" equals="0.5" />
		<templateVar name="$layer" equals="FrontPopUps" />
		<position relativeTo="bg" vAnchor="BOTTOM" hAnchor="LEFT" />
		<templateVar name="$buttonMapping" equals="game.confirmButton()" />
		<orientation vAnchor="VCENTER" hAnchor="HCENTER" xOffset="60/game.hudScale()" yOffset="-10/game.hudScale()" priorityOffset="-1" />
		<touchComponent name="Touch">
			<position relativeTo="element:name()" vAnchor="VCENTER" hAnchor="HCENTER" />
			<orientation vAnchor="VCENTER" hAnchor="HCENTER" xOffset="0" yOffset="0" priorityOffset="-1" />
			<event name="onTouchDown" params="component, element">
				onTouchDown(component, element)
				element["Overlay"]:setColor(0.5, 0.5, 0.5)
			</event>
			<event name="onTouchUp" params="component, element">
				onTouchUp(component, element)
				element["Overlay"]:setColor(1.0, 1.0, 1.0)
				element:parent()("transitionState"):SetInt(2)
				element:parent()("choice"):SetString("true")
			</event>
			<event name="onTouchRelease" params="component, element">
				onTouchRelease(component, element)
				element["Overlay"]:setColor(1.0, 1.0, 1.0)
			</event>
		</touchComponent>
		<spriteSheetComponent name="Overlay">
			<position relativeTo="element:name()" vAnchor="VCENTER" hAnchor="HCENTER" />
			<orientation vAnchor="VCENTER" hAnchor="HCENTER" xOffset="0" yOffset="0" priorityOffset="-1" />
			<event name="onInit" params="component, element">
				component("spriteName"):SetString("button_yes")
				component("sheetName"):SetString("xml_resources/context_buttons.xml")
				component("layer"):SetString("FrontPopUps")
				component("size"):SetFloat(0.5)
			</event>
		</spriteSheetComponent>
		<event name="onTick" params="element, dt">
			onTick(element, dt)
			if(element["UpSprite"]("size"):GetFloat() ~= element["Overlay"]("size"):GetFloat()) then
				element["Overlay"]("size"):SetFloat(element["UpSprite"]("size"):GetFloat())
			end
		</event>
	</template>
	
	<template type="template_spritesheetbutton" name="NoButton">
		<hudScale scale="game.hudScale()" />
		<templateVar name="$text" equals="" />
		<templateVar name="$spriteScale" equals="0.5" />
		<templateVar name="$layer" equals="FrontPopUps" />
		<templateVar name="$buttonMapping" equals="game.cancelButton()" />
		<position relativeTo="bg" vAnchor="BOTTOM" hAnchor="RIGHT" />
		<orientation vAnchor="VCENTER" hAnchor="HCENTER" xOffset="-60/game.hudScale()" yOffset="-10/game.hudScale()" priorityOffset="-1" />
		<touchComponent name="Touch">
			<position relativeTo="element:name()" vAnchor="VCENTER" hAnchor="HCENTER" />
			<orientation vAnchor="VCENTER" hAnchor="HCENTER" xOffset="0" yOffset="0" priorityOffset="-1" />
			<event name="onTouchDown" params="component, element">
				onTouchDown(component, element)
				element["Overlay"]:setColor(0.5, 0.5, 0.5)
			</event>
			<event name="onTouchUp" params="component, element">
				onTouchUp(component, element)
				element["Overlay"]:setColor(1.0, 1.0, 1.0)
				element:parent()("transitionState"):SetInt(2)
				element:parent()("choice"):SetString("false")
			</event>
			<event name="onTouchRelease" params="component, element">
				onTouchRelease(component, element)
				element["Overlay"]:setColor(1.0, 1.0, 1.0)
			</event>
		</touchComponent>
		<spriteSheetComponent name="Overlay">
			<position relativeTo="element:name()" vAnchor="VCENTER" hAnchor="HCENTER" />
			<orientation vAnchor="VCENTER" hAnchor="HCENTER" xOffset="0" yOffset="0" priorityOffset="-1" />
			<event name="onInit" params="component, element">
				component("spriteName"):SetString("button_no")
				component("sheetName"):SetString("xml_resources/context_buttons.xml")
				component("layer"):SetString("FrontPopUps")
				component("size"):SetFloat(0.5)
			</event>
		</spriteSheetComponent>
		<event name="onTick" params="element, dt">
			onTick(element, dt)
			if(element["UpSprite"]("size"):GetFloat() ~= element["Overlay"]("size"):GetFloat()) then
				element["Overlay"]("size"):SetFloat(element["UpSprite"]("size"):GetFloat())
			end
		</event>
	</template>

	<event name="onInit" params="element">
		element("transitionState"):SetInt(1)
		element("transitionTime"):SetFloat(0.0)
		element("choice"):SetString("none")
		lua_sys.playSoundFx("audio/sfx/menu_slide.wav")
		element("messageID"):SetString("COLLECT_ALL")
	</event>
	
	<event name="setCoinOnly" params="element">
		print("run setCoinOnly")
		local entry = element:GetElement("CoinAmount");
		entry["Text"]("visible"):SetInt(1)
		entry["Icon"]("visible"):SetInt(1)
		entry:setParent(element)
		entry:relativeTo(element:GetElement("Notification"))
		entry:setRelativeObjectAnchors(lua_sys.HCENTER, lua_sys.BOTTOM)
		entry:setOrientation(lua_sys.MenuOrientation(0, 0, 0, lua_sys.HCENTER, lua_sys.TOP))
	</event>
	<event name="setCoinAndBonus" params="element">
	
		print("run setCoinAndBonus")
	
		element["PlusBonus"]["PlusText"]("visible"):SetInt(1)
		element["PlusBonus"]["Text"]("visible"):SetInt(1)

		local entry = element:GetElement("CoinAmount");
		entry["Text"]("visible"):SetInt(1)
		entry["Icon"]("visible"):SetInt(1)
		entry:setParent(element)
		entry:relativeTo(element:GetElement("PlusBonus"))
		entry:setRelativeObjectAnchors(lua_sys.LEFT, lua_sys.VCENTER)
		entry:setOrientation(lua_sys.MenuOrientation(16*game.hudScale(), 0, 0, lua_sys.RIGHT, lua_sys.VCENTER))
	</event>
	
	<event name="setRandomCurrencyUnderling" params="element">
		print("run setRandomCurrencyUnderling")
		element["FoodAmount"]["Text"]("visible"):SetInt(1)
		element["FoodAmount"]["Icon"]("visible"):SetInt(1)
		
		element["EthAmount"]["Text"]("visible"):SetInt(1)
		element["EthAmount"]["Icon"]("visible"):SetInt(1)
		
		element["DiamondsAmount"]["Text"]("visible"):SetInt(1)
		element["DiamondsAmount"]["Icon"]("visible"):SetInt(1)
		
		element["MysteryCoinAmount"]["Text"]("visible"):SetInt(1)
		element["MysteryCoinAmount"]["Icon"]("visible"):SetInt(1)

	</event>
	<event name="setRandomCurrencyCelestial" params="element">
		print("run setRandomCurrencyCelestial")
		element["FoodAmount"]["Text"]("visible"):SetInt(1)
		element["FoodAmount"]["Icon"]("visible"):SetInt(1)
		
		element["EthAmount"]["Text"]("visible"):SetInt(1)
		element["EthAmount"]["Icon"]("visible"):SetInt(1)
		
		element["DiamondsAmount"]["Text"]("visible"):SetInt(1)
		element["DiamondsAmount"]["Icon"]("visible"):SetInt(1)
		
		element["KeysAmount"]["Text"]("visible"):SetInt(1)
		element["KeysAmount"]["Icon"]("visible"):SetInt(1)
		
		element["MysteryCoinAmount"]["Text"]("visible"):SetInt(1)
		element["MysteryCoinAmount"]["Icon"]("visible"):SetInt(1)
		
		element:E("FoodAmount")("xOffset"):SetInt((element:E("KeysAmount")("xOffset"):GetInt() + element:E("KeysAmount"):C("Icon"):size().x+element:E("KeysAmount"):C("Text"):size().x)/2)

	</event>
	
	<event name="onTick" params="element, dt">
		<![CDATA[
			if(dt < game.maxTickTime()) then
				local transitionState = element("transitionState"):GetInt()
				
				if(transitionState ~= 0) then
					local transitionTime = element("transitionTime"):GetFloat()
					
					element:DoStoredScript("TickTransition")
					
					if(transitionState == 1) then
						transitionTime = (transitionTime + dt*3)
					elseif(transitionState == 2) then
						transitionTime = (transitionTime - dt*3)
					end
					
					transitionTime = clamp(transitionTime, 0.0, 1.0)
					
					element("transitionTime"):SetFloat(transitionTime)
					
					if(transitionTime >= 1.0) then
						element("transitionState"):SetInt(0)
						element("transitionTime"):SetFloat(1.0)
						element:DoStoredScript("TickTransition")
					elseif(transitionTime <= 0.0) then
						if(element("choice"):GetString() == "true") then
							element:root():popPopUp()
							game.submitConfirmation(element("messageID"):GetString(), true)
						else
							element:root():popPopUp()
							game.submitConfirmation(element("messageID"):GetString(), false)
						end
					end
				end
			end
			
		]]>
	</event>
	
	<event name="TickTransition" params="element">
		local transitionTime = element("transitionTime"):GetFloat()
		element["bg"]("xOffset"):SetFloat(lua_sys.screenWidth()*(0.5) + (-0.5)*lua_sys.screenWidth()*(1/transitionTime))
		element["FadedBG"]["Sprite"]("alpha"):SetFloat(transitionTime*0.5)
	</event>
	
	<event name="queuePop" params="element">
		element("transitionState"):SetInt(2)
	</event>
	
</menu>