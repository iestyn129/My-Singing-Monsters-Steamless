<template name="template_currencyscratchindicator" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="../menus/menu.xsd">
	
	<size dependentOnElement="element:name()" dependentOnComponent="Sprite" />
	
	<spriteSheetComponent name="Sprite">
		<event name="onInit" params="component, element">
			component("spriteName"):SetString("goal_exclaim")
			component("sheetName"):SetString("xml_resources/hud01.xml")
			component("size"):SetFloat(0.6*game.hudScale())
			component("layer"):SetString("ContextBar")
			component("visible"):SetInt(0)
			
			if(component("isSourceRotated"):GetInt() == 1) then
				component("vFlip"):SetInt(1)
			else
				component("hFlip"):SetInt(1)
			end
			
			component("xOffset"):SetInt(-22*game.hudScale())
			component("yOffset"):SetInt(3*game.hudScale())
		</event>
	</spriteSheetComponent>
	
	<event name="onInit" params="element">
		element.hasIndicator = false
		element["Sprite"]("visible"):SetInt(0)

		element.isVisible = true
		element:SetupGenericListener(game.engineReceiver(), "game::msg::MsgUpdateCurrencyScratchIndicator", "gotMsgUpdateCurrencyScratchIndicator")
		--game.updateCurrencyScratchIndicator()

		element("transitionTime"):SetFloat(1.0)
		element("transitionState"):SetInt(1)
	</event>
	
	<event name="onPostInit" params="element">
		if(game.hasScratchIndicator("S")) then
			element.hasIndicator = true
		end
		if(element.hasIndicator and element.isVisible) then
			element["Sprite"]("visible"):SetInt(1)
		else
			element["Sprite"]("visible"):SetInt(0)
		end
	</event>
	
	<event name="gotMsgUpdateCurrencyScratchIndicator" params="element, msg">
		element.hasIndicator = msg.visible

		if(element.hasIndicator and element.isVisible) then
			element["Sprite"]("visible"):SetInt(1)
		else
			element["Sprite"]("visible"):SetInt(0)
		end
	</event>
	
	<event name="SetVisible" params="element">
		element.isVisible = true

		if element.hasIndicator then
			element["Sprite"]("visible"):SetInt(1)
		else
			element["Sprite"]("visible"):SetInt(0)
		end
	</event>
	
	<event name="SetInvisible" params="element">
		element.isVisible = false
		element["Sprite"]("visible"):SetInt(0)
	</event>
	
	<event name="SetEnabled" params="element">
		element["Sprite"]:setColor(1.0, 1.0, 1.0)
	</event>
	
	<event name="SetDisabled" params="element">
		element["Sprite"]:setColor(0.5, 0.5, 0.5)
	</event>
	
<!--
	<event name="onTick" params="element, dt">
		<![CDATA[
			local transitionState = element("transitionState"):GetInt()

			if(transitionState ~= 0 and dt <= 0.5) then
				local transitionTime = element("transitionTime"):GetFloat()

				element["Sprite"]("size"):SetFloat(0.6*game.hudScale()*transitionTime)

				if(transitionTime <= 1.0 ) then
					element("transitionState"):SetInt(1)
				elseif(transitionTime >= 1.25) then
					element("transitionState"):SetInt(2)
				end

				if(transitionState == 1) then
					element("transitionTime"):SetFloat(transitionTime + dt)
				else
					element("transitionTime"):SetFloat(transitionTime - dt)
				end
			end
		]]>
	</event>
-->

</template>