<template name="template_battle_campaign_progressinfo_entry" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="../menus/menu.xsd">

	<size dependentOnElement="SelectedBG" dependentOnComponent="Sprite"/>"

	<element name="SelectedBG">
		<position relativeTo="PARENT" vAnchor="VCENTER" hAnchor="HCENTER" />
		<orientation vAnchor="VCENTER" hAnchor="HCENTER" xOffset="0" yOffset="0" priorityOffset="0" />
		<spriteSheetComponent name="Sprite">
			<position relativeTo="element:name()" vAnchor="VCENTER" hAnchor="HCENTER" />
			<orientation vAnchor="VCENTER" hAnchor="HCENTER" xOffset="0" yOffset="0" priorityOffset="0" />
			<event name="onInit" params="component, element">
				<![CDATA[
							component("spriteName"):SetString("menu_tier_highlight")
							component("sheetName"):SetString("xml_resources/battle_elements.xml")
							component("size"):SetFloat(0.5*(game.menuScaleY()))
							component("layer"):SetString("MidPopUps")
						]]>
			</event>
		</spriteSheetComponent>
		<event name="show" params="element">
			<![CDATA[
				--element["Sprite"]("visible"):SetInt(1)
				--element["Sprite"]:setColor(1.0, 1.0, 1.0)
				element:GetComponent("Sprite"):setShader(nil)
			]]>
		</event>
		<event name="hide" params="element">
			<![CDATA[
				--element["Sprite"]("visible"):SetInt(0)

				--element["Sprite"]:setColor(0.5, 0.5, 0.5)

				local shader = include("ShaderDesaturate")
				if shader then
					element:GetComponent("Sprite"):setShader(shader)
				end

			]]>
		</event>
	</element>

	<template type="template_battle_tier" name="Tier">
		<size w="90*game.menuScaleX()" h="14*game.menuScaleY()" />
		<position relativeTo="PARENT" vAnchor="TOP" hAnchor="HCENTER" />
		<orientation vAnchor="TOP" hAnchor="HCENTER" xOffset="0" yOffset="0*game.menuScaleY()" priorityOffset="-1" />
		<event name="onInit" params="element">
			<![CDATA[
				onInit(element)
				element("layer"):SetString(element:parent()("Layer"):GetString())
				element("scale"):SetFloat(0.75)
				element("centered"):SetInt(0)
			]]>
		</event>
	</template>

	<element name="Description">
		<position relativeTo="PARENT" vAnchor="TOP" hAnchor="HCENTER" />
		<orientation vAnchor="TOP" hAnchor="HCENTER" xOffset="0" yOffset="12*game.menuScaleY()" priorityOffset="-1" />
		<size dependentOnElement="element:name()" dependentOnComponent="Text"/>
		<textComponent name="Text">
			<size w="120*game.menuScaleX()" h="14*game.menuScaleY()" />
			<position relativeTo="element:name()" vAnchor="VCENTER" hAnchor="HCENTER" />
			<orientation vAnchor="VCENTER" hAnchor="HCENTER" xOffset="0" yOffset="0" priorityOffset="0" />
			<event name="onInit" params="component, element">
				<![CDATA[
					component("multiline"):SetInt(0)
					component("font"):Set(game.getTextFont())
					component("size"):SetFloat(0.2*game.menuScaleX())
					component("alignment"):SetInt(MenuTextComponent_TEXT_HCENTER_ALIGNED)
					component("text"):SetString("Ranks 1-10")
					component("autoScale"):SetInt(1)
					component("layer"):SetString(element:parent()("Layer"):GetString())
					game.StoreContext_setBattleXpTextColour(component)
				]]>
			</event>
		</textComponent>

	</element>

	<element name="Rewards">
		<size w="120*game.menuScaleX()" h="12*game.menuScaleY()"/>
		<position relativeTo="PARENT" vAnchor="TOP" hAnchor="HCENTER" />
		<orientation vAnchor="TOP" hAnchor="HCENTER" xOffset="0*game.menuScaleX()" yOffset="32*game.menuScaleY()" priorityOffset="-1" />
<!--
		<spriteComponent name="test_box">
			<position relativeTo="element:name()" vAnchor="VCENTER" hAnchor="HCENTER" />
			<orientation vAnchor="VCENTER" hAnchor="HCENTER" xOffset="0" yOffset="0" priorityOffset="-1" />
			<event name="onPostInit" params="component, element">
				<![CDATA[
					component("spriteName"):SetString("__BUILTIN__WHITE_TEXTURE")
					component:setScale(
						Vector2( element:absW() / 4.0, element:absH() / 4.0))
					component:setColor(1.0, 0.0, 0.0)
					component("alpha"):SetFloat(0.5)
					component("layer"):SetString("FrontPopUps")
					component("visible"):SetInt(1)
				]]>
			</event>
		</spriteComponent>
-->

		<event name="onPostInit" params="element">
			<![CDATA[
				include("BattleVersusProgressUI").InitEntryRewards(element)
			]]>
		</event>

		<event name="updateClipping" params="element">
			<![CDATA[
				local MenuHelpers = include("MenuHelpers")
				MenuHelpers.ForEachEntry(element,
						function(entry)
							MenuHelpers.SetClipFrom(entry:GetComponent("Icon"), element)
							MenuHelpers.SetClipFrom(entry:GetComponent("Text"), element)
						end,
						{ entryName = "reward" }
				)
		]]>
		</event>


	</element>

	<spriteComponent name="Separator">
		<position relativeTo="element:name()" vAnchor="BOTTOM" hAnchor="HCENTER" />
		<orientation vAnchor="VCENTER" hAnchor="HCENTER" xOffset="0" yOffset="8" priorityOffset="-1" />
		<event name="onPostInit" params="component, element">
			<![CDATA[
				component("spriteName"):SetString("__BUILTIN__WHITE_TEXTURE")
				component:setScale(
					Vector2( (element:absW()-16*game.menuScaleX()) / 4.0, (1.0 * game.menuScaleY()) / 4.0))
				component("layer"):SetString(element("Layer"):GetString())
			]]>
		</event>
	</spriteComponent>

	<event name="onInit" params="element">
		<![CDATA[
			local campaignId = element("CampaignId"):GetInt()
			local tierId = element("TierId"):GetInt()
			element["Rewards"]("CampaignId"):SetInt(campaignId)
			element["Rewards"]("TierId"):SetInt(tierId)
		]]>
	</event>

	<event name="onPostInit" params="element">
		<![CDATA[
				include("BattleVersusProgressUI").InitEntry(element)
		]]>
	</event>

	<event name="updateClipping" params="element">
		<![CDATA[

			local MenuHelpers = include("MenuHelpers")
			--MenuHelpers.SetClipFrom(element:GetComponent("TierLabel"), element)
			MenuHelpers.SetClipFrom(element:GetElement("Description"):GetComponent("Text"), element)
			MenuHelpers.SetClipFrom(element:GetComponent("Separator"), element)
			MenuHelpers.SetClipFrom(element:GetElement("SelectedBG"):GetComponent("Sprite"), element)

			local clipX = element("clipX"):GetFloat()
			local clipY = element("clipY"):GetFloat()
			local clipW = element("clipW"):GetFloat()
			local clipH = element("clipH"):GetFloat()

			local rewardsElement = element["Rewards"]
			rewardsElement("clipX"):SetFloat(clipX)
			rewardsElement("clipY"):SetFloat(clipY)
			rewardsElement("clipW"):SetFloat(clipW)
			rewardsElement("clipH"):SetFloat(clipH)
			rewardsElement:DoStoredScript("updateClipping")

			local tierElement = element["Tier"]
			tierElement("clipX"):SetFloat(clipX)
			tierElement("clipY"):SetFloat(clipY)
			tierElement("clipW"):SetFloat(clipW)
			tierElement("clipH"):SetFloat(clipH)
			tierElement:DoStoredScript("updateClipping")

		]]>
	</event>

</template>
