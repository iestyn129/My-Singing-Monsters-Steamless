<template name="template_storeinfopane" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="../menus/menu.xsd">
	<script src="scripts/StoreInfoPane.lua"/>

	<size dependentOnElement="element:name()" dependentOnComponent="bg" />

	<ninesliceComponent name="bg">
		<size w="310*game.menuScaleX()" h="180*game.menuScaleX()" />
		<event name="onInit" params="component, element">
			<![CDATA[
				component("topHeight"):SetFloat(50.0)
				component("bottomHeight"):SetFloat(50.0)
				component("leftWidth"):SetFloat(50.0)
				component("rightWidth"):SetFloat(50.0)
				component("size"):SetFloat(0.5*game.menuScaleX())
				component("includeBorder"):SetInt(1)
				component("spriteName"):SetString("gfx/menu/Black9SFrame50")
				
				component("alpha"):SetFloat(0.0)
				component("layer"):SetString("HUD")
			]]>
		</event>
	</ninesliceComponent>

	<element name="ObjectDesc">
		<size w="260*game.menuScaleX()" h="104*game.menuScaleX()" />
		<position relativeTo="PARENT" vAnchor="BOTTOM" hAnchor="HCENTER" />
		<orientation vAnchor="BOTTOM" hAnchor="HCENTER" xOffset="0" yOffset="10*game.menuScaleX()" priorityOffset="-1" />
		<event name="onInit" params="element">
			<![CDATA[
				element("scrollSize"):SetFloat(0)
			]]>
		</event>
		<textComponent name="Text">
			<size w="225*game.menuScaleX()"/>
			<position relativeTo="PARENT" vAnchor="TOP" hAnchor="HCENTER" />
			<orientation vAnchor="TOP" hAnchor="HCENTER" xOffset="0" yOffset="0" priorityOffset="0" />
			<event name="onInit" params="component, element">
				<![CDATA[
					component("font"):SetString(game.getTextFont())
					component("size"):SetFloat(0.25*game.menuScaleX())
					component("alignment"):SetInt(MenuTextComponent_TEXT_LEFT_ALIGNED)
					component("text"):SetString("")
					component("alpha"):SetFloat(0.0)
					component("layer"):SetString("Clipping")
				]]>
			</event>
		</textComponent>
		<swipeComponent name="Swiper">			
		</swipeComponent>
		<touchComponent name="Touch">
			<size dependentOnElement="element:name()" />
			<position relativeTo="element:name()" vAnchor="VCENTER" hAnchor="HCENTER" />
			<orientation vAnchor="VCENTER" hAnchor="HCENTER" xOffset="0" yOffset="0" priorityOffset="0" />
			<event name="onPostInit" params="component, element">
				<![CDATA[
					component("enabled"):SetInt(0)
				]]>
			</event>
		</touchComponent>
		<event name="sizeForStats" params="element">
			<![CDATA[
				element:setSize(Vector2(element:absW(), 104*game.menuScaleY()))
				game.setClipping("Clipping", 0, (element:absY())*deviceScaleY(), screenWidth()*deviceScaleX(), (element:absH())*deviceScaleY())
			]]>
		</event>
		<event name="sizeForNoStats" params="element">
			<![CDATA[
				element:parent():showBio()
				element:setSize(Vector2(element:absW(), 150*game.menuScaleX()))
				game.setClipping("Clipping", 0, (element:absY() - 10*game.menuScaleY())*deviceScaleY(), screenWidth()*deviceScaleX(), (element:absH() + 10*game.menuScaleY())*deviceScaleY())
			]]>
		</event>
		<event name="setVisible" params="element">
			<![CDATA[
				element["Text"]("visible"):SetInt(1)
				element["Touch"]("enabled"):SetInt(1)
			]]>
		</event>
		<event name="setInvisible" params="element">
			<![CDATA[
				element["Text"]("visible"):SetInt(0)
				element["Touch"]("enabled"):SetInt(0)
			]]>
		</event>
	</element>

	<element name="Islands">
		<size w="260*game.menuScaleX()" h="120*game.menuScaleY()" />
		<position relativeTo="PARENT" vAnchor="TOP" hAnchor="HCENTER" />
		<orientation vAnchor="TOP" hAnchor="HCENTER" xOffset="0" yOffset="65*game.menuScaleY()" priorityOffset="-1" />
		<event name="onInit" params="element">
			<![CDATA[
				element("numIslands"):SetInt(0)
				element("contentHeight"):SetInt(0)
				element("scrollSize"):SetFloat(0)
				element:setPositionBroadcast(true)
			]]>
		</event>
		<event name="repopulate" params="element">
			<![CDATA[
				for i=0, element("numIslands"):GetInt()-1 do
					local islandEntry = element:E("islandEntry"..i)
					if(islandEntry ~= nil) then
						element:RemoveElement(islandEntry)
					end
				end

				local islands = game.getIslandsForMonster(store:MonsterTypeFromItemNum(element:parent()("ItemIndex"):GetInt()))
				local previous = nil
				local width = 0
				local height = 0
				local itemHeight = 0
				element("numIslands"):SetInt(islands:size())
				for i=0, islands:size()-1 do
					local islandEntry = menu:addTemplateElement("template_monsterIslandEntry", "islandEntry"..i, element)
					islandEntry("islandId"):SetInt(islands[i]);
					islandEntry:setParent(element)
					if(previous == nil) then
						islandEntry:relativeTo(element)
						islandEntry:setOrientation(MenuOrientation(0, 0, 0, HCENTER, TOP))
						islandEntry:setRelativeObjectAnchors(HCENTER, TOP)
					else
						islandEntry:relativeTo(previous)
						islandEntry:setOrientation(MenuOrientation(0, 0, 0, HCENTER, TOP))
						islandEntry:setRelativeObjectAnchors(HCENTER, BOTTOM)
					end
					previous = islandEntry
					islandEntry:init()
					islandEntry:setPositionBroadcast(true)
					islandEntry:postInit()
					itemHeight = islandEntry:E("Overlay"):C("Sprite"):absH()
					height = height + itemHeight
					width = islandEntry:E("Overlay"):C("Sprite"):absW()
				end

				--buffer:
				height = height + (itemHeight / 2) + (height/islands:size())
				element("contentHeight"):SetInt(height)
				element:setSize(Vector2(width, height))
				element:setPositionBroadcast(true)
			]]>
		</event>
		<swipeComponent name="Swiper">
			<event name="onPostInit" params="component, element">
				<![CDATA[
					component:GetVar("direction"):SetInt(MenuSwipeComponent_SwipeDirectionVertical)
					component:GetVar("mode"):SetInt(MenuSwipeComponent_SwipeModeFree)
					component:GetVar("tSteps"):SetFloat(25.0)
					component:listenToTouches(element)

					component:DoStoredScript("refresh")
				]]>
			</event>
			<function name="refresh" params="component, element">
				<![CDATA[
					--to resume prev position, don't setScrollOffset:
					--component:setScrollOffset(0)

					local itemHeight = element("contentHeight"):GetInt();
					local parentHeight = element:parent():C("bg"):absH();

					if(itemHeight > parentHeight) then
						component:setScrollSize(itemHeight - parentHeight)
					else
						component:setScrollSize(0)
					end
					element("scrollSize"):SetFloat(component:scrollSize())
				]]>
			</function>
			<event name="onTick" params="component, element, dt">
				<![CDATA[
					--if Islands are enabled
					if(element:parent()["IslandsButton"]["Touch"]("enabled"):GetInt() == 0 and
						element:parent()["IslandsButton"]["UpSprite"]("visible"):GetInt() == 1) then

						component:DoStoredScript("correctScrollMarkerPos");
					end
				]]>
			</event>
			<event name="correctScrollMarkerPos" params="component, element">
				<![CDATA[
					--if Islands are enabled

					if(element:parent()["IslandsButton"]["Touch"]("enabled"):GetInt() == 0 and
						element:parent()["IslandsButton"]["UpSprite"]("visible"):GetInt() == 1) then

						local first = element:E("islandEntry0")
						if(first) then
							local offset = component:scrollOffset()

							if(first:getOrientationPosition().y ~= offset) then
								first:setOrientationPosition(Vector2(first("xOffset"):GetInt(), offset))
							end

							local scrollMarker = element:parent():E("ScrollMarker");
							local markerBookend = scrollMarker("originalYOffset"):GetInt()

							--range without borders is [0, (scrollbarH-scrollMarkerH)]
							local markerMovementHeight = element:parent():E("ScrollBar"):absH() - (2*markerBookend) - scrollMarker:absH();

							local scrollMarkerYOffset = 0
							if(component:scrollSize() ~= 0) then
								scrollMarkerYOffset = -(offset/component:scrollSize()) * markerMovementHeight;
							end

							scrollMarkerYOffset = clamp(scrollMarkerYOffset, 0, markerMovementHeight)

							scrollMarker("yOffset"):SetInt(markerBookend + scrollMarkerYOffset)

						end
					end
				]]>
			</event>
			<event name="setScrollOffsetToMarker" params="component, element">
				<![CDATA[
					--if Islands are enabled
					if(element:parent()["IslandsButton"]["Touch"]("enabled"):GetInt() == 0 and
						element:parent()["IslandsButton"]["UpSprite"]("visible"):GetInt() == 1) then

						component:setScrollOffset(element:parent():E("ScrollMarker")("scrollOffset"):GetFloat())
					end
				]]>
			</event>
			<event name="resetScrollPos" params="component, element">
				<![CDATA[
					--if Islands are enabled
					if(element:parent()["IslandsButton"]["Touch"]("enabled"):GetInt() == 0 and
						element:parent()["IslandsButton"]["UpSprite"]("visible"):GetInt() == 1) then

						component:setScrollOffset(0);
						component:DoStoredScript("correctScrollMarkerPos");
					end
				]]>
			</event>
		</swipeComponent>
		<touchComponent name="Touch">
			<size dependentOnElement="element:name()" />
			<position relativeTo="element:name()" vAnchor="VCENTER" hAnchor="HCENTER" />
			<orientation vAnchor="VCENTER" hAnchor="HCENTER" xOffset="0" yOffset="0" priorityOffset="0" />
			<event name="onPostInit" params="component, element">
				<![CDATA[
					component("enabled"):SetInt(0)
				]]>
			</event>
		</touchComponent>
		<event name="setVisible" params="element">
			<![CDATA[
				element["Touch"]("enabled"):SetInt(1)

				for i=0, element("numIslands"):GetInt()-1 do
					local islandEntry = element:E("islandEntry"..i)
					if(islandEntry ~= nil) then
						islandEntry:DoStoredScript("setVisible");
					end
				end
			]]>
		</event>
		<event name="setInvisible" params="element">
			<![CDATA[
				for i=0, element("numIslands"):GetInt()-1 do
					local islandEntry = element:E("islandEntry"..i)
					if(islandEntry ~= nil) then
						islandEntry:DoStoredScript("setInvisible");
					end
				end

				element["Touch"]("enabled"):SetInt(0)
			]]>
		</event>
		<event name="updateComponents" params="element">
			<![CDATA[
				local alpha = element("alpha"):GetFloat()

				for i=0, element("numIslands"):GetInt()-1 do
					local islandEntry = element:E("islandEntry"..i)
					if(islandEntry ~= nil) then
						islandEntry("alpha"):SetFloat(alpha)
						islandEntry:DoStoredScript("updateComponents")
					end
				end

				element:setPositionBroadcast(true)
			]]>
		</event>
	</element>

	<element name="ScrollBar">
		<size dependentOnElement="element:name()" dependentOnComponent="Sprite" />
		<position relativeTo="ObjectDesc" vAnchor="VCENTER" hAnchor="RIGHT" />
		<orientation vAnchor="VCENTER" hAnchor="LEFT" xOffset="10*game.hudScale()" yOffset="0" priorityOffset="0" />
		<spriteSheetComponent name="Sprite">
			<event name="onInit" params="component, element">
				<![CDATA[
					component("spriteName"):SetString("scroll_bar_01")
					component("sheetName"):SetString("xml_resources/buttons01.xml")
					component("size"):SetFloat(0.3*game.menuScaleY())
					component("layer"):SetString("ContextBar")
				]]>
			</event>
		</spriteSheetComponent>
		<event name="setVisible" params="element">
			<![CDATA[
				element["Sprite"]("visible"):SetInt(1)
			]]>
		</event>
		<event name="setInvisible" params="element">
			<![CDATA[
				element["Sprite"]("visible"):SetInt(0)
			]]>
		</event>
	</element>
	
	<element name="ScrollMarker">
		<size dependentOnElement="element:name()" dependentOnComponent="Marker" />
		<position relativeTo="ScrollBar" vAnchor="TOP" hAnchor="HCENTER" />
		<orientation vAnchor="TOP" hAnchor="HCENTER" xOffset="0" yOffset="5*game.menuScaleY()" priorityOffset="-1" />
		<spriteSheetComponent name="Marker">
			<event name="onInit" params="component, element">
				<![CDATA[
					component("useOffsets"):SetInt(1)
					component("spriteName"):SetString("scroll_bar_dot")
					component("sheetName"):SetString("xml_resources/buttons01.xml")
					component("size"):SetFloat(0.3*game.menuScaleY())
					component("layer"):SetString("ContextBar")
					element("originalYOffset"):SetInt(element("yOffset"):GetInt())
				]]>
			</event>
		</spriteSheetComponent>
		<touchComponent name="Touch">
			<size dependentOnElement="element:name()" dependentOnComponent="Marker" />
			<position relativeTo="PARENT" vAnchor="TOP" hAnchor="LEFT" />
			<orientation vAnchor="TOP" hAnchor="LEFT" xOffset="0" yOffset="0" priorityOffset="0" />
		</touchComponent>
		<event name="onInit" params="element">
			<![CDATA[
				element("scrollSize"):SetFloat(0)
			]]>
		</event>
		<event name="setVisible" params="element">
			<![CDATA[
				element["Marker"]("visible"):SetInt(1)
				element["Touch"]("enabled"):SetInt(1)
			]]>
		</event>
		<event name="setInvisible" params="element">
			<![CDATA[
				element["Marker"]("visible"):SetInt(0)
				element["Touch"]("enabled"):SetInt(0)
			]]>
		</event>
	</element>

	<!-- this button is a longer button, takes the place of the normal store item buy button -->
	<template type="template_nineslicebutton" name="IslandThemeBuyButton">
		<templateVar name="$upSpriteName" equals="'gfx/menu/button_green_gem'" />
		<templateVar name="$text" equals="GET_LABEL" />
		<templateVar name="$spriteScale" equals="0.27*game.hudScale()" />
		<templateVar name="$layer" equals="HUD" />
		<templateVar name="$topHeight" equals="16.0" />
		<templateVar name="$bottomHeight" equals="16.0" />
		<templateVar name="$leftWidth" equals="23.0" />
		<templateVar name="$rightWidth" equals="23.0" />
		<templateVar name="$width" equals="screenWidth() * 0.3" />
		<templateVar name="$height" equals="screenHeight() * 0.08" />
		<templateVar name="$includeBorder" equals="1" />

		<position relativeTo="PARENT" vAnchor="BOTTOM" hAnchor="LEFT" />
		<orientation vAnchor="TOP" hAnchor="LEFT" xOffset="0" yOffset="15*game.hudScale()" priorityOffset="-3" />
		<touchComponent name="Touch">
		</touchComponent>
	</template>
	
	<template type="template_spritesheetbutton" name="EventThemeBuyButton">
		<templateVar name="$upSpriteName" equals="'button_buy'" />
		<templateVar name="$sheetName" equals="'xml_resources/buttons01.xml'" />
		<templateVar name="$spriteScale" equals="0.5*game.menuScaleX()" />
		<templateVar name="$layer" equals="HUD" />
		<position relativeTo="PARENT" vAnchor="BOTTOM" hAnchor="LEFT" />
		<orientation vAnchor="TOP" hAnchor="RIGHT" xOffset="40*game.menuScaleX()" yOffset="10*game.hudScale()" priorityOffset="-3" />
		<textComponent name="Text">
			<size w="65*game.menuScaleX()" />
			<position relativeTo="element:name()" vAnchor="VCENTER" hAnchor="HCENTER" />
			<orientation vAnchor="VCENTER" hAnchor="HCENTER" xOffset="8*game.menuScaleX()" yOffset="0" priorityOffset="-1" />
			<event name="onInit" params="component, element">
				<![CDATA[
					component("multiline"):SetInt(0)
					component("autoScale"):SetInt(1)
					component("autoScaleFactor"):SetFloat(0.01)
					component("font"):SetString(game.getTextFont())
					component("size"):SetFloat(0.25*game.menuScaleX())
					component("alignment"):SetInt(lua_sys.MenuTextComponent_TEXT_HCENTER_ALIGNED)
					component("text"):SetString("BUY_BUTTON")
					component("layer"):SetString("HUD")
				]]>
			</event>
		</textComponent>
		<touchComponent name="Touch">
		</touchComponent>
	</template>

	<!-- normal market buy button, used for monsters, decos, etc. (not for island themes) -->
	<template type="template_spritesheetbutton" name="BuyButton">
		<templateVar name="$upSpriteName" equals="'button_buy'" />
		<templateVar name="$sheetName" equals="'xml_resources/buttons01.xml'" />
		<templateVar name="$spriteScale" equals="0.5*game.menuScaleX()" />
		<templateVar name="$layer" equals="HUD" />
		<position relativeTo="PARENT" vAnchor="BOTTOM" hAnchor="HCENTER" />
		<orientation vAnchor="TOP" hAnchor="RIGHT" xOffset="-10*game.menuScaleX()" yOffset="10*game.hudScale()" priorityOffset="-3" />
		<event name="setEnable" params="element">
			<![CDATA[
				element["UpSprite"]:setColor(1.0, 1.0, 1.0)
				element["Text"]:setColor(1.0, 1.0, 1.0)
				if(element["UpSprite"]("visible"):GetInt() == 1) then
					element["Touch"]("enabled"):SetInt(1)
				end
			]]>
		</event>
		<event name="setDisable" params="element">
			<![CDATA[
				element["UpSprite"]:setColor(0.5, 0.5, 0.5)
				element["Text"]:setColor(0.5, 0.5, 0.5)
				element["Touch"]("enabled"):SetInt(0)
			]]>
		</event>
		<event name="setVisible" params="element">
			<![CDATA[
				element["UpSprite"]("visible"):SetInt(1)
				element["Text"]("visible"):SetInt(1)
				element["Touch"]("enabled"):SetInt(1)
			]]>
		</event>
		<event name="setInvisible" params="element">
			<![CDATA[
				element["UpSprite"]("visible"):SetInt(0)
				element["Text"]("visible"):SetInt(0)
				element["Touch"]("enabled"):SetInt(0)
			]]>
		</event>
		<textComponent name="Text">
			<size w="65*game.menuScaleX()" />
			<position relativeTo="element:name()" vAnchor="VCENTER" hAnchor="HCENTER" />
			<orientation vAnchor="VCENTER" hAnchor="HCENTER" xOffset="8*game.menuScaleX()" yOffset="0" priorityOffset="-1" />
			<event name="onInit" params="component, element">
				<![CDATA[
					component("multiline"):SetInt(0)
					component("autoScale"):SetInt(1)
					component("autoScaleFactor"):SetFloat(0.01)
					component("font"):SetString(game.getTextFont())
					component("size"):SetFloat(0.25*game.menuScaleX())
					component("alignment"):SetInt(MenuTextComponent_TEXT_HCENTER_ALIGNED)
					component("text"):SetString("BUY_BUTTON")
					component("layer"):SetString("HUD")
				]]>
			</event>
		</textComponent>
		<touchComponent name="Touch">
			<event name="onInit" params="component, element">
				<![CDATA[
					component("enabled"):SetInt(0)
				]]>
			</event>
			<event name="onTouchDown" params="component, element">
				<![CDATA[
					onTouchDown(component, element)
					element["Text"]:setColor(0.5, 0.5, 0.5)
				]]>
			</event>
			<event name="onTouchUp" params="component, element">
				<![CDATA[
					onTouchUp(component, element)
					element["Text"]:setColor(1.0, 1.0, 1.0)
					if(store:Category() == game.StoreCategories_TYPE_ISLAND) then
					
						-- special case for tribal island
						local islandId = element:parent().islandId
						if(islandId == 9) then
							if(not game.isIslandOwned(islandId)) then
								game.loadWorldContextWithTribalPopup()
							else
								game.setCurrentIsland(islandId)
							end
								
						else
					
							if(store:BuyItem()) then
								if(not game.isIslandOwned(islandId)) then
									playSoundFx("audio/sfx/market_bought_item.wav")
								end
								game.loadWorldContext()
							end
							
						end
					else
						playSoundFx("audio/sfx/market_bought_item.wav")
						if(store:BuyItem()) then
							if(store:Category() ~= game.StoreCategories_TYPE_CURRENCY) then
								game.loadWorldContext()
								
								-- disable the buy button on context load to prevent buying multiple monsters at once
								component("enabled"):SetInt(0)
							end
						end
					end
				]]>
			</event>
			<event name="onTouchRelease" params="component, element">
				<![CDATA[
					onTouchRelease(component, element)
					element["Text"]:setColor(1.0, 1.0, 1.0)
				]]>
			</event>
		</touchComponent>
	</template>

	<element name="BuyPrice">
		<size dependentOnElement="element:name()" dependentOnComponent="BackingSprite" />
		<position relativeTo="BuyButton" vAnchor="VCENTER" hAnchor="LEFT" />
		<orientation vAnchor="VCENTER" hAnchor="RIGHT" xOffset="-20" yOffset="5*game.hudScale()" priorityOffset="-1" />
		<spriteSheetComponent name="BackingSprite">
			<event name="onInit" params="component, element">
				<![CDATA[
					component("spriteName"):SetString("stats_bar")
					component("sheetName"):SetString("xml_resources/hud01.xml")
					component("size"):SetFloat(0.5*game.menuScaleX())
					component("layer"):SetString("HUD")
				]]>
			</event>
		</spriteSheetComponent>
		<spriteSheetComponent name="CurrencySprite">
			<position relativeTo="element:name()" vAnchor="VCENTER" hAnchor="LEFT" />
			<orientation vAnchor="VCENTER" hAnchor="LEFT" xOffset="0" yOffset="0" priorityOffset="-1" />
			<event name="onInit" params="component, element">
				<![CDATA[
					--it doesn't matter what this is initialized to, it gets set properly later
					component("spriteName"):SetString(game.StoreContext_SPRITE_COINS)
					component("sheetName"):SetString(game.StoreContext_CURRENCY_SPRITESHEET)
					component("size"):SetFloat(0.5*game.menuScaleX())
					component("visible"):SetInt(0)
					component("layer"):SetString("HUD")
				]]>
			</event>
		</spriteSheetComponent>
		<textComponent name="Text">
			<size w="65*game.menuScaleX()" h="50*game.menuScaleX()" />
			<position relativeTo="element:name()" vAnchor="VCENTER" hAnchor="HCENTER" />
			<orientation vAnchor="VCENTER" hAnchor="HCENTER" xOffset="5*game.menuScaleX()" yOffset="-2*game.menuScaleY()" priorityOffset="-1" />
			<event name="onInit" params="component, element">
				<![CDATA[
					component("multiline"):SetInt(0)
					component("autoScaleFactor"):SetFloat(0.01)
					component("autoScale"):SetInt(1)
					component("font"):Set(game.getTextFont())
					component("alignment"):SetInt(MenuTextComponent_TEXT_HCENTER_ALIGNED)
					component("size"):SetFloat(0.25*game.menuScaleX())
					component("text"):SetString("0")
					component("layer"):SetString("HUD")
				]]>
			</event>
		</textComponent>
		<spriteSheetComponent name="ContextSprite">
			<position relativeTo="element:name()" vAnchor="TOP" hAnchor="HCENTER" />
			<orientation vAnchor="VCENTER" hAnchor="HCENTER" xOffset="5*game.menuScaleX()" yOffset="-4*game.menuScaleX()" priorityOffset="-1" />
			<event name="onInit" params="component, element">
				<![CDATA[
					component("spriteName"):SetString("button_costume")
					component("sheetName"):SetString("xml_resources/buttons01.xml")
					component("size"):SetFloat(0.25*game.hudScale())
					component("layer"):SetString("HUD")
					component("visible"):SetInt(0)
				]]>
			</event>
		</spriteSheetComponent>
		<event name="onInit" params="element">
			<![CDATA[
				element("alpha"):SetFloat(0)
				element("showContext"):SetInt(0)
			]]>
		</event>
		<event name="showContext" params="element">
			<![CDATA[
				element("showContext"):SetInt(1)
				element["ContextSprite"]("visible"):SetInt(1)
			]]>
		</event>
		<event name="hideContext" params="element">
			<![CDATA[
				element("showContext"):SetInt(0)
				element["ContextSprite"]("visible"):SetInt(0)
			]]>
		</event>
		<event name="setInvisible" params="element">
			<![CDATA[
				element["BackingSprite"]("visible"):SetInt(0)
				element["CurrencySprite"]("visible"):SetInt(0)
				element["Text"]("visible"):SetInt(0)
			]]>
		</event>
		<event name="setVisible" params="element">
			<![CDATA[
				element["BackingSprite"]("visible"):SetInt(1)
				element["CurrencySprite"]("visible"):SetInt(1)
				element["Text"]("visible"):SetInt(1)
			]]>
		</event>
		<event name="updateAlpha" params="element">
			<![CDATA[
				local alpha = element("alpha"):GetFloat()
				element["BackingSprite"]("alpha"):SetFloat(alpha)
				element["CurrencySprite"]("alpha"):SetFloat(alpha)
				element["Text"]("alpha"):SetFloat(alpha)
				element["ContextSprite"]("alpha"):SetFloat(alpha)
			]]>
		</event>
	</element>

	<element name="AdditionalBuyPrice">
		<size dependentOnElement="element:name()" dependentOnComponent="BackingSprite" />
		<position relativeTo="BuyPrice" vAnchor="VCENTER" hAnchor="LEFT" />
		<orientation vAnchor="VCENTER" hAnchor="RIGHT" xOffset="0" yOffset="0" priorityOffset="-1" />
		<spriteSheetComponent name="BackingSprite">
			<event name="onInit" params="component, element">
				<![CDATA[
					component("spriteName"):SetString("stats_bar")
					component("sheetName"):SetString("xml_resources/hud01.xml")
					component("size"):SetFloat(0.5*game.menuScaleX())
					component("layer"):SetString("HUD")
				]]>
			</event>
		</spriteSheetComponent>
		<spriteSheetComponent name="CurrencySprite">
			<position relativeTo="element:name()" vAnchor="VCENTER" hAnchor="LEFT" />
			<orientation vAnchor="VCENTER" hAnchor="LEFT" xOffset="0" yOffset="0" priorityOffset="-1" />
			<event name="onInit" params="component, element">
				<![CDATA[
					--it doesn't matter what this is initialized to, it gets set properly later
					component("spriteName"):SetString(game.StoreContext_SPRITE_COINS)
					component("sheetName"):SetString(game.StoreContext_CURRENCY_SPRITESHEET)
					component("size"):SetFloat(0.5*game.menuScaleX())
					component("visible"):SetInt(0)
					component("layer"):SetString("HUD")
				]]>
			</event>
		</spriteSheetComponent>
		<textComponent name="Text">
			<size w="65*game.menuScaleX()" h="50*game.menuScaleX()" />
			<position relativeTo="element:name()" vAnchor="VCENTER" hAnchor="HCENTER" />
			<orientation vAnchor="VCENTER" hAnchor="HCENTER" xOffset="5*game.menuScaleX()" yOffset="-2*game.menuScaleY()" priorityOffset="-1" />
			<event name="onInit" params="component, element">
				<![CDATA[
					component("multiline"):SetInt(0)
					component("autoScaleFactor"):SetFloat(0.01)
					component("autoScale"):SetInt(1)
					component("font"):Set(game.getTextFont())
					component("alignment"):SetInt(MenuTextComponent_TEXT_HCENTER_ALIGNED)
					component("size"):SetFloat(0.25*game.menuScaleX())
					component("text"):SetString("0")
					component("layer"):SetString("HUD")
				]]>
			</event>
		</textComponent>
		<textComponent name="Plus">
			<size w="64*game.menuScaleX()" h="64*game.menuScaleX()" />
			<position relativeTo="element:name()" vAnchor="TOP" hAnchor="HCENTER" />
			<orientation vAnchor="VCENTER" hAnchor="HCENTER" xOffset="54*game.menuScaleX()" yOffset="-8*game.menuScaleY()" priorityOffset="-2" />
			<event name="onInit" params="component, element">
				<![CDATA[
					component("multiline"):SetInt(0)
					component("autoScaleFactor"):SetFloat(0.01)
					component("autoScale"):SetInt(1)
					component("font"):Set(game.getTextFont())
					component("alignment"):SetInt(MenuTextComponent_TEXT_HCENTER_ALIGNED)
					component("size"):SetFloat(0.4*game.menuScaleX())
					component("text"):SetString("+")
					component("layer"):SetString("HUD")
				]]>
			</event>
		</textComponent>
		<spriteSheetComponent name="ContextSprite">
			<position relativeTo="element:name()" vAnchor="TOP" hAnchor="HCENTER" />
			<orientation vAnchor="VCENTER" hAnchor="HCENTER" xOffset="5*game.menuScaleX()" yOffset="-4*game.menuScaleX()" priorityOffset="-1" />
			<event name="onInit" params="component, element">
				<![CDATA[
					component("spriteName"):SetString("button_costume")
					component("sheetName"):SetString("xml_resources/buttons01.xml")
					component("size"):SetFloat(0.25*game.hudScale())
					component("layer"):SetString("HUD")
				]]>
			</event>
		</spriteSheetComponent>
		<event name="onInit" params="element">
			<![CDATA[
				element("alpha"):SetFloat(0)
				element("showContext"):SetInt(0)
			]]>
		</event>
		<event name="showContext" params="element">
			<![CDATA[
				element("showContext"):SetInt(1)
				element["ContextSprite"]("visible"):SetInt(1)
				element["Plus"]("visible"):SetInt(1)
			]]>
		</event>
		<event name="hideContext" params="element">
			<![CDATA[
				element("showContext"):SetInt(0)
				element["ContextSprite"]("visible"):SetInt(0)
				element["Plus"]("visible"):SetInt(0)
			]]>
		</event>
		<event name="setInvisible" params="element">
			<![CDATA[
				element["BackingSprite"]("visible"):SetInt(0)
				element["CurrencySprite"]("visible"):SetInt(0)
				element["Text"]("visible"):SetInt(0)
				element["ContextSprite"]("visible"):SetInt(0)
				element["Plus"]("visible"):SetInt(0)
			]]>
		</event>
		<event name="setVisible" params="element">
			<![CDATA[
				element["BackingSprite"]("visible"):SetInt(1)
				element["CurrencySprite"]("visible"):SetInt(1)
				element["Text"]("visible"):SetInt(1)
				element["Text"]("autoScale"):SetInt(1)
				local showContext = element("showContext"):GetInt()
				element["ContextSprite"]("visible"):SetInt(showContext)
				element["Plus"]("visible"):SetInt(showContext)
			]]>
		</event>
		<event name="updateAlpha" params="element">
			<![CDATA[
				local alpha = element("alpha"):GetFloat()
				element["BackingSprite"]("alpha"):SetFloat(alpha)
				element["CurrencySprite"]("alpha"):SetFloat(alpha)
				element["Text"]("alpha"):SetFloat(alpha)
				element["ContextSprite"]("alpha"):SetFloat(alpha)
				element["Plus"]("alpha"):SetFloat(alpha)
			]]>
		</event>
	</element>

	<template type="template_spritesheetbutton" name="BioButton">
		<templateVar name="$upSpriteName" equals="'button_long_green@2x'" />
		<templateVar name="$sheetName" equals="'xml_resources/buttons01.xml'" />
		<templateVar name="$spriteScale" equals="(game.isBattleIsland() and 0.4 or 0.5) * game.menuScaleX()" />
		<templateVar name="$layer" equals="HUD" />
		<position relativeTo="PARENT" vAnchor="TOP" hAnchor="HCENTER" />
		<orientation vAnchor="TOP" hAnchor="LEFT" xOffset="0" yOffset="10*game.menuScaleX()" priorityOffset="-3" />
		<textComponent name="Text">
			<size dependentOnElement="element:name()" dependentOnComponent="UpSprite" />
			<position relativeTo="element:name()" vAnchor="VCENTER" hAnchor="HCENTER" />
			<orientation vAnchor="VCENTER" hAnchor="HCENTER" xOffset="0" yOffset="-3*game.hudScale()" priorityOffset="-2" />
			<event name="onInit" params="component, element">
				<![CDATA[
					component("multiline"):SetInt(0)
					component("font"):Set(game.getTextFont())
					component("size"):SetFloat(0.25*game.menuScaleX())
					component("textPadding"):SetFloat(4.0*game.hudScale())
					component("alignment"):SetInt(MenuTextComponent_TEXT_HCENTER_ALIGNED)
					component("text"):SetString("BIO")
					component("autoScale"):SetInt(1)
					component("layer"):SetString("HUD")
				]]>
			</event>
		</textComponent>
		<touchComponent name="Touch">
			<event name="onTouchUp" params="component, element">
				<![CDATA[
					onTouchUp(component, element)
					element:parent():showBio()
				]]>
			</event>
			<event name="onTouchRelease" params="component, element">
				<![CDATA[
					onTouchRelease(component, element)
					element:parent():showBio()
				]]>
			</event>
		</touchComponent>
		<event name="onPostInit" params="element">
			<![CDATA[
				element("alpha"):SetFloat(0.0)
				element:DoStoredScript("updateComponents")
			]]>
		</event>
	</template>

	<template type="template_spritesheetbutton" name="IslandsButton">
		<templateVar name="$upSpriteName" equals="'button_long_green@2x'" />
		<templateVar name="$sheetName" equals="'xml_resources/buttons01.xml'" />
		<templateVar name="$spriteScale" equals="(game.isBattleIsland() and 0.4 or 0.5) * game.menuScaleX()" />
		<templateVar name="$layer" equals="HUD" />
		<position relativeTo="PARENT" vAnchor="TOP" hAnchor="HCENTER" />
		<orientation vAnchor="TOP" hAnchor="LEFT" xOffset="0" yOffset="10*game.menuScaleX()" priorityOffset="-3" />
		<textComponent name="Text">
			<size dependentOnElement="element:name()" dependentOnComponent="UpSprite" />
			<position relativeTo="element:name()" vAnchor="VCENTER" hAnchor="HCENTER" />
			<orientation vAnchor="VCENTER" hAnchor="HCENTER" xOffset="0" yOffset="-3*game.hudScale()" priorityOffset="-1" />
			<event name="onInit" params="component, element">
				<![CDATA[
					local txt = game.getLocalizedText("MONSTER_ISLANDS")
					local x, y = txt:find("%s")
					if(x == nil) then
						component("multiline"):SetInt(0)
					else
						component("multiline"):SetInt(1)
					end
					component("autoScale"):SetInt(1)
					component("font"):Set(game.getTextFont())
					component("size"):SetFloat(0.25*game.menuScaleX())
					component("textPadding"):SetFloat(4.0*game.hudScale())
					component("alignment"):SetInt(MenuTextComponent_TEXT_HCENTER_ALIGNED)
					component("text"):SetString("MONSTER_ISLANDS")
					component("autoScale"):SetInt(1)
					component("layer"):SetString("HUD")
				]]>
			</event>
		</textComponent>
		<touchComponent name="Touch">
			<event name="onTouchUp" params="component, element">
				<![CDATA[
					onTouchUp(component, element)
					element:parent():showIslands()
				]]>
			</event>
			<event name="onTouchRelease" params="component, element">
				<![CDATA[
					onTouchRelease(component, element)
					element:parent():showIslands()
				]]>
			</event>
		</touchComponent>
		<event name="onPostInit" params="element">
			<![CDATA[
				element("alpha"):SetFloat(0.0)
				element:DoStoredScript("updateComponents")
			]]>
		</event>

	</template>

	<template type="template_spritesheetbutton" name="StatsButton">
		<templateVar name="$upSpriteName" equals="'button_long_green@2x'" />
		<templateVar name="$sheetName" equals="'xml_resources/buttons01.xml'" />
		<templateVar name="$spriteScale" equals="(game.isBattleIsland() and 0.4 or 0.5) * game.menuScaleX()" />
		<templateVar name="$layer" equals="HUD" />
		<position relativeTo="PARENT" vAnchor="TOP" hAnchor="HCENTER" />
		<orientation vAnchor="TOP" hAnchor="LEFT" xOffset="0" yOffset="10*game.menuScaleX()" priorityOffset="-3" />
		<textComponent name="Text">
			<size dependentOnElement="element:name()" dependentOnComponent="UpSprite" />
			<position relativeTo="element:name()" vAnchor="VCENTER" hAnchor="HCENTER" />
			<orientation vAnchor="VCENTER" hAnchor="HCENTER" xOffset="0" yOffset="-3*game.hudScale()" priorityOffset="-1" />
			<event name="onInit" params="component, element">
				<![CDATA[
					local txt = game.getLocalizedText("STATS_LABEL")
					local x, y = txt:find("%s")
					if(x == nil) then
						component("multiline"):SetInt(0)
					else
						component("multiline"):SetInt(1)
					end
					component("autoScale"):SetInt(1)
					component("font"):Set(game.getTextFont())
					component("size"):SetFloat(0.25*game.menuScaleX())
					component("textPadding"):SetFloat(4.0*game.hudScale())
					component("alignment"):SetInt(MenuTextComponent_TEXT_HCENTER_ALIGNED)
					component("text"):SetString("STATS_LABEL")
					component("autoScale"):SetInt(1)
					component("layer"):SetString("HUD")
				]]>
			</event>
		</textComponent>
		<touchComponent name="Touch">
			<event name="onTouchUp" params="component, element">
				<![CDATA[
					onTouchUp(component, element)
					element:parent():showStats()
				]]>
			</event>
			<event name="onTouchRelease" params="component, element">
				<![CDATA[
					onTouchRelease(component, element)
					element:parent():showStats()
				]]>
			</event>
		</touchComponent>
		<event name="onPostInit" params="element">
			<![CDATA[
				element("alpha"):SetFloat(0.0)
				element:DoStoredScript("updateComponents")
			]]>
		</event>
	</template>
	
	<template type="template_spritesheetbutton" name="BoostsButton">
		<templateVar name="$upSpriteName" equals="'button_long_green@2x'" />
		<templateVar name="$sheetName" equals="'xml_resources/buttons01.xml'" />
		<templateVar name="$spriteScale" equals="(game.isBattleIsland() and 0.4 or 0.5) * game.menuScaleX()" />
		<templateVar name="$layer" equals="HUD" />
		<position relativeTo="PARENT" vAnchor="TOP" hAnchor="HCENTER" />
		<orientation vAnchor="TOP" hAnchor="LEFT" xOffset="0" yOffset="10*game.menuScaleX()" priorityOffset="-3" />
		<textComponent name="Text">
			<size dependentOnElement="element:name()" dependentOnComponent="UpSprite" />
			<position relativeTo="element:name()" vAnchor="VCENTER" hAnchor="HCENTER" />
			<orientation vAnchor="VCENTER" hAnchor="HCENTER" xOffset="0" yOffset="-3*game.hudScale()" priorityOffset="-1" />
			<event name="onInit" params="component, element">
				<![CDATA[
					local txt = game.getLocalizedText("ISLAND_THEME_BUFFS")
					local x, y = txt:find("%s")
					if(x == nil) then
						component("multiline"):SetInt(0)
					else
						component("multiline"):SetInt(1)
					end
					component("autoScale"):SetInt(1)
					component("font"):Set(game.getTextFont())
					component("size"):SetFloat(0.25*game.menuScaleX())
					component("textPadding"):SetFloat(4.0*game.hudScale())
					component("alignment"):SetInt(MenuTextComponent_TEXT_HCENTER_ALIGNED)
					component("text"):SetString("ISLAND_THEME_BUFFS")
					component("autoScale"):SetInt(1)
					component("layer"):SetString("HUD")
				]]>
			</event>
		</textComponent>
		<touchComponent name="Touch">
			<event name="onTouchUp" params="component, element">
				<![CDATA[
					onTouchUp(component, element)
					element:parent():showBoosts()
				]]>
			</event>
			<event name="onTouchRelease" params="component, element">
				<![CDATA[
					onTouchRelease(component, element)
					element:parent():showBoosts()
				]]>
			</event>
		</touchComponent>
		<event name="onPostInit" params="element">
			<![CDATA[
				element("alpha"):SetFloat(0.0)
				element:DoStoredScript("updateComponents")
			]]>
		</event>
	</template>

	<template type="template_spritesheetbutton" name="MovesButton">
		<templateVar name="$upSpriteName" equals="'button_long_green@2x'" />
		<templateVar name="$sheetName" equals="'xml_resources/buttons01.xml'" />
		<templateVar name="$spriteScale" equals="(game.isBattleIsland() and 0.4 or 0.5) * game.menuScaleX()" />
		<templateVar name="$layer" equals="HUD" />
		<position relativeTo="PARENT" vAnchor="TOP" hAnchor="HCENTER" />
		<orientation vAnchor="TOP" hAnchor="LEFT" xOffset="0" yOffset="10*game.menuScaleX()" priorityOffset="-3" />
		<textComponent name="Text">
			<size dependentOnElement="element:name()" dependentOnComponent="UpSprite" />
			<position relativeTo="element:name()" vAnchor="VCENTER" hAnchor="HCENTER" />
			<orientation vAnchor="VCENTER" hAnchor="HCENTER" xOffset="0" yOffset="-3*game.hudScale()" priorityOffset="-1" />
			<event name="onInit" params="component, element">
				<![CDATA[
					local txt = game.getLocalizedText("BATTLE_STATS_MOVES")
					local x, y = txt:find("%s")
					if(x == nil) then
						component("multiline"):SetInt(0)
					else
						component("multiline"):SetInt(1)
					end
					component("font"):Set(game.getTextFont())
					component("size"):SetFloat(0.25*game.menuScaleX())
					component("textPadding"):SetFloat(4.0*game.hudScale())
					component("alignment"):SetInt(MenuTextComponent_TEXT_HCENTER_ALIGNED)
					component("autoScale"):SetInt(1)
					component("text"):SetString(txt)
					component("layer"):SetString("HUD")
				]]>
			</event>
		</textComponent>
		<touchComponent name="Touch">
			<event name="onTouchUp" params="component, element">
				<![CDATA[
					onTouchUp(component, element)
					element:parent():showMoves()
				]]>
			</event>
			<event name="onTouchRelease" params="component, element">
				<![CDATA[
					onTouchRelease(component, element)
					element:parent():showMoves()
				]]>
			</event>
		</touchComponent>
		<event name="onPostInit" params="element">
			<![CDATA[
				element("alpha"):SetFloat(0.0)
				element:DoStoredScript("updateComponents")
			]]>
		</event>

	</template>

	<element name="Stats">
		<size w="260*game.menuScaleX()" h="110*game.menuScaleY()" />
		<position relativeTo="PARENT" vAnchor="BOTTOM" hAnchor="HCENTER" />
		<orientation vAnchor="BOTTOM" hAnchor="HCENTER" xOffset="0" yOffset="10*game.menuScaleY()" priorityOffset="-1" />
		<event name="onInit" params="element">
			<![CDATA[
				element("NumStats"):SetInt(0)
			]]>
		</event>
		<event name="repopulate" params="element">
			<![CDATA[
				local numStats = element("NumStats"):GetInt()

				for i=1, numStats do
					local statEntry = element:E("statEntry"..i)

					if(statEntry ~= nil) then
						element:RemoveElement(statEntry)
					end
				end

				local previous = nil
				local statsArray;

				if game.isBattleIsland() then

					statsArray = {
						"template_stat_store_species",
						"template_stat_store_class",
						"template_stat_store_beds",
						"template_stat_store_battle_power",
						"template_stat_store_battle_stamina"
					}

				elseif game.isUnderlingIsland() or game.isCelestialIsland() then
					statsArray = {
						"template_stat_store_species",
						"template_stat_store_class"
						}
				else
					statsArray = {
						"template_stat_store_species",
						"template_stat_store_class",
						"template_stat_store_beds",
						"template_stat_store_coinrate",
						"template_stat_store_maxcoins"
						}
				end

				for i=1, #statsArray do
					local statEntry = menu:addTemplateElement(statsArray[i], "statEntry"..i, element)

					if(previous == nil) then
						statEntry:relativeTo(element)
						statEntry:setOrientation(MenuOrientation(0, 0, -1, HCENTER, TOP))
						statEntry:setRelativeObjectAnchors(HCENTER, TOP)
					else
						statEntry:relativeTo(previous)
						statEntry:setOrientation(MenuOrientation(0, 0, 0, HCENTER, TOP))
						statEntry:setRelativeObjectAnchors(HCENTER, BOTTOM)
					end

					statEntry("ItemIndex"):SetInt(element:parent()("ItemIndex"):GetInt())
					statEntry:init()
					statEntry:setPositionBroadcast(true)
					statEntry("alpha"):SetFloat(0.0)
					statEntry:DoStoredScript("updateComponents")
					previous = statEntry
				end

				element("NumStats"):SetInt(#statsArray)
			]]>
		</event>
		<event name="setInvisible" params="element">
			<![CDATA[
				local numStats = element("NumStats"):GetInt()

				for i=1, numStats do
					local statEntry = element:E("statEntry"..i)

					if(statEntry ~= nil) then
						statEntry:DoStoredScript("setInvisible")
					end
				end
			]]>
		</event>
		<event name="setVisible" params="element">
			<![CDATA[
				local numStats = element("NumStats"):GetInt()

				for i=1, numStats do
					local statEntry = element:E("statEntry"..i)

					if(statEntry ~= nil) then
						statEntry:DoStoredScript("setVisible")
					end
				end
			]]>
		</event>
		<event name="updateComponents" params="element">
			<![CDATA[
				local numStats = element("NumStats"):GetInt()
				local alpha = element("alpha"):GetFloat()

				for i=1, numStats do
					local statEntry = element:E("statEntry"..i)

					if(statEntry ~= nil) then
						statEntry("alpha"):SetFloat(alpha)
						statEntry:DoStoredScript("updateComponents")
					end
				end

				element:setPositionBroadcast(true)
			]]>
		</event>
	</element>

	<!-- element name="TabIslandDesc" -->
	<element name="Tab1">
		<size dependentOnElement="element:name()" dependentOnComponent="Sprite" />
		<position relativeTo="PARENT" vAnchor="TOP" hAnchor="LEFT" />
		<orientation vAnchor="BOTTOM" hAnchor="LEFT" xOffset="25*game.menuScaleX()" yOffset="-9*game.menuScaleX()" priorityOffset="-1" />
		<event name="setVisible" params="element">
			<![CDATA[
				element["Sprite"]("visible"):SetInt(1)
				element["Overlay"]("visible"):SetInt(1)
				element["Touch"]("enabled"):SetInt(1)
			]]>
		</event>
		<event name="setInvisible" params="element">
			<![CDATA[
				element["Sprite"]("visible"):SetInt(0)
				element["Overlay"]("visible"):SetInt(0)
				element["Touch"]("enabled"):SetInt(0)
			]]>
		</event>
		<spriteComponent name="Sprite">
			<event name="onInit" params="component, element">
				<![CDATA[
					component("spriteName"):SetString("gfx/menu/tab01")
					component("layer"):SetString("HUD")
					component("size"):SetFloat(0.35*game.menuScaleX())
					component("alpha"):SetFloat(0.0)
				]]>
			</event>
		</spriteComponent>
		<spriteSheetComponent name="Overlay">
			<position relativeTo="element[&quot;Sprite&quot;]" vAnchor="VCENTER" hAnchor="HCENTER" />
			<orientation vAnchor="VCENTER" hAnchor="HCENTER" xOffset="0" yOffset="0" priorityOffset="-1" />
			<event name="onInit" params="component, element">
				component("spriteName"):SetString("button_info2")
				component("sheetName"):SetString("xml_resources/context_buttons.xml")
				component("size"):SetFloat(0.25*game.menuScaleX())
				component("layer"):SetString("HUD")
				component("alpha"):SetFloat(0.0)
			</event>
		</spriteSheetComponent>
		<touchComponent name="Touch">
			<size dependentOnElement="element:name()" />
			<position relativeTo="element:name()" vAnchor="VCENTER" hAnchor="HCENTER" />
			<orientation vAnchor="VCENTER" hAnchor="HCENTER" xOffset="0" yOffset="0" priorityOffset="0" />
			<event name="onTouchUp" params="component, element">
				<![CDATA[
					if(element:parent().tabSelected ~= 1) then
						element:parent().tabSelected = 1
						element:parent():selectNewTab()
					end
				]]>
			</event>
		</touchComponent>
	</element>
	
	<!-- element name="TabIslandThemes" -->
	<element name="Tab2">
		<size dependentOnElement="element:name()" dependentOnComponent="Sprite" />
		<position relativeTo="PARENT" vAnchor="TOP" hAnchor="LEFT" />
		<orientation vAnchor="BOTTOM" hAnchor="LEFT" xOffset="75*game.menuScaleX()" yOffset="-9*game.menuScaleX()" priorityOffset="2" />
		<event name="onInit" params="element">
			element("enabled"):SetInt(0)
		</event>
		<event name="setVisible" params="element">
			<![CDATA[
				element["Sprite"]("visible"):SetInt(1)
				element["Overlay"]("visible"):SetInt(1)
				element["Touch"]("enabled"):SetInt(1)
			]]>
		</event>
		<event name="setInvisible" params="element">
			<![CDATA[
				element["Sprite"]("visible"):SetInt(0)
				element["Overlay"]("visible"):SetInt(0)
				element["Touch"]("enabled"):SetInt(0)
			]]>
		</event>
		<spriteComponent name="Sprite">
			<event name="onInit" params="component, element">
				<![CDATA[
					component("spriteName"):SetString("gfx/menu/tab01")
					component("layer"):SetString("HUD")
					component("size"):SetFloat(0.35*game.menuScaleX())
					component("alpha"):SetFloat(0.0)
				]]>
			</event>
		</spriteComponent>
		<spriteSheetComponent name="Overlay">
			<position relativeTo="element[&quot;Sprite&quot;]" vAnchor="VCENTER" hAnchor="HCENTER" />
			<orientation vAnchor="VCENTER" hAnchor="HCENTER" xOffset="0" yOffset="0" priorityOffset="-1" />
			<event name="onInit" params="component, element">
				<![CDATA[
					component("spriteName"):SetString("news_islandskins")
					component("sheetName"):SetString("xml_resources/hud03.xml")
					component("size"):SetFloat(0.25*game.menuScaleX())
					component("layer"):SetString("HUD")
					component("alpha"):SetFloat(0.0)
				]]>
			</event>
		</spriteSheetComponent>
		<touchComponent name="Touch">
			<size dependentOnElement="element:name()" />
			<position relativeTo="element:name()" vAnchor="VCENTER" hAnchor="HCENTER" />
			<orientation vAnchor="VCENTER" hAnchor="HCENTER" xOffset="0" yOffset="0" priorityOffset="0" />
			<event name="onTouchUp" params="component, element">
				<![CDATA[
					if(element:parent().tabSelected ~= 2) then
						element:parent().tabSelected = 2
						element:parent():selectNewTab()
					end
				]]>
			</event>
		</touchComponent>
	</element>
	<!-- element name="TabIslandThemeEvents" -->
	<element name="Tab3">
		<size dependentOnElement="element:name()" dependentOnComponent="Sprite" />
		<position relativeTo="PARENT" vAnchor="TOP" hAnchor="LEFT" />
		<orientation vAnchor="BOTTOM" hAnchor="LEFT" xOffset="125*game.menuScaleX()" yOffset="-9*game.menuScaleX()" priorityOffset="2" />
		<event name="onInit" params="element">
			element("enabled"):SetInt(0)
		</event>
		<event name="setVisible" params="element">
			<![CDATA[
				element["Sprite"]("visible"):SetInt(1)
				element["Overlay"]("visible"):SetInt(1)
				element["Touch"]("enabled"):SetInt(1)
			]]>
		</event>
		<event name="setInvisible" params="element">
			<![CDATA[
				element["Sprite"]("visible"):SetInt(0)
				element["Overlay"]("visible"):SetInt(0)
				element["Touch"]("enabled"):SetInt(0)
			]]>
		</event>
		<spriteComponent name="Sprite">
			<event name="onInit" params="component, element">
				<![CDATA[
					component("spriteName"):SetString("gfx/menu/tab01")
					component("layer"):SetString("HUD")
					component("size"):SetFloat(0.35*game.menuScaleX())
					component("alpha"):SetFloat(0.0)
				]]>
			</event>
		</spriteComponent>
		<spriteSheetComponent name="Overlay">
			<position relativeTo="element[&quot;Sprite&quot;]" vAnchor="VCENTER" hAnchor="HCENTER" />
			<orientation vAnchor="VCENTER" hAnchor="HCENTER" xOffset="0" yOffset="0" priorityOffset="-1" />
			<event name="onInit" params="component, element">
				<![CDATA[
					component("spriteName"):SetString("news_seasonals")
					component("sheetName"):SetString("xml_resources/buttons01.xml")
					component("size"):SetFloat(0.25*game.menuScaleX())
					component("layer"):SetString("HUD")
					component("alpha"):SetFloat(0.0)
				]]>
			</event>
		</spriteSheetComponent>
		<touchComponent name="Touch">
			<size dependentOnElement="element:name()" />
			<position relativeTo="element:name()" vAnchor="VCENTER" hAnchor="HCENTER" />
			<orientation vAnchor="VCENTER" hAnchor="HCENTER" xOffset="0" yOffset="0" priorityOffset="0" />
			<event name="onTouchUp" params="component, element">
				<![CDATA[
					if(element:parent().tabSelected ~= 3) then
						element:parent().tabSelected = 3
						element:parent():selectNewTab()
					end
				]]>
			</event>
		</touchComponent>
	</element>

	<element name="MovesList">
		<size w="260*game.menuScaleX()" h="110*game.menuScaleY()" />
		<position relativeTo="PARENT" vAnchor="BOTTOM" hAnchor="HCENTER" />
		<orientation vAnchor="BOTTOM" hAnchor="HCENTER" xOffset="0" yOffset="10*game.menuScaleX()" priorityOffset="-1" />

		<event name="onInit" params="element">
			<![CDATA[
				element("NumEntries"):SetInt(0)
			]]>
		</event>

		<event name="repopulate" params="element">
			<![CDATA[
				include("MenuHelpers").ForEachEntry(element,
					function(entry)
						element:RemoveElement(entry)
					end)

				local currentMonsterType

				if element:root():E("SelectedMonsterView") == nil then
					currentMonsterType = store:MonsterTypeFromItemNum(element:parent()("ItemIndex"):GetInt())
				else
					currentMonsterType = element:parent():parent():parent()("selectedMonster"):GetInt()
				end

				local battleMonsterData = game.getBattleMonsterStatData(currentMonsterType)

				local actions = battleMonsterData:actions()

				local width = 130*game.menuScaleX()
				local height = 32*game.menuScaleX()
				local xOffset = 0
				local yOffset = 0

				for i=0, actions:size() - 1 do

					entry = menu:addTemplateElement("template_battle_action_store_stat", "entry"..i, element)

					xOffset = -(width * 0.5) + (i % 2) * width
					yOffset = math.floor(i / 2) * height

					entry:relativeTo(element)
					entry:setOrientation(MenuOrientation(xOffset, yOffset, -2, HCENTER, TOP))
					entry:setRelativeObjectAnchors(HCENTER, TOP)

					local action = actions[i]
					entry("IconSprite"):SetString(action:getIconSprite())
					entry("IconSpriteSheet"):SetString(action:getIconSpriteSheet())
					entry("ActionName"):SetString(action.name)
					entry("ActionTypeName"):SetString(action:getDamageTypeString())

					entry:init()
					entry:setPositionBroadcast(true)
					entry:postInit()

				end
			]]>
		</event>

		<event name="show" params="element">
			<![CDATA[
				include("MenuHelpers").ForEachEntry(element,
					function(entry)
						entry:DoStoredScript("setVisible")
					end)
			]]>
		</event>
	
		<event name="hide" params="element">
			<![CDATA[
				include("MenuHelpers").ForEachEntry(element,
					function(entry)
						entry:DoStoredScript("setInvisible")
					end)
			]]>
		</event>
	
		<event name="updateComponents" params="element">
			<![CDATA[
				local alpha = element("alpha"):GetFloat()

				include("MenuHelpers").ForEachEntry(element,
					function(entry)
						entry("alpha"):SetFloat(alpha)
						entry:DoStoredScript("updateComponents")
					end)

				element:setPositionBroadcast(true)
			]]>
		</event>
	
	</element>

	<element name="CostumeInfo">
		<size w="296*game.menuScaleX()" h="164*game.menuScaleX()" />
		<position relativeTo="PARENT" vAnchor="TOP" hAnchor="HCENTER" />
		<orientation vAnchor="TOP" hAnchor="HCENTER" xOffset="0" yOffset="8*game.menuScaleX()" priorityOffset="-1" />

		<element name="CostumeInfoList">
			<size w="296*game.menuScaleX()" h="164*game.menuScaleX()" />
			<position relativeTo="PARENT" vAnchor="TOP" hAnchor="HCENTER" />
			<orientation vAnchor="TOP" hAnchor="HCENTER" xOffset="0" yOffset="0" priorityOffset="-1" />

			<swipeComponent name="Swiper">
				<script>
					<![CDATA[
						return include("ScrollingListHelper")
							.CommonListSwiper("CostumeInfoScrollBar", "CostumeInfoScrollMarker")
					]]>
				</script>
			</swipeComponent>

			<touchComponent name="Touch">
				<size dependentOnElement="element:name()" />
				<event name="onInit" params="component, element">
					<![CDATA[
						component("singleTouch"):SetInt(1)
					]]>
				</event>
			</touchComponent>

		</element>

		<element name="CostumeInfoScrollBar">
			<size dependentOnElement="element:name()" dependentOnComponent="Sprite" />
			<position relativeTo="PARENT" vAnchor="VCENTER" hAnchor="RIGHT" />
			<orientation vAnchor="VCENTER" hAnchor="RIGHT" xOffset="8*game.hudScale()" yOffset="0" priorityOffset="-1" />
			<spriteSheetComponent name="Sprite">
				<event name="onInit" params="component, element">
					<![CDATA[
						component("spriteName"):SetString("scroll_bar_01")
						component("sheetName"):SetString("xml_resources/buttons01.xml")
						component("size"):SetFloat(0.6*(game.hudScale()))
						component("layer"):SetString("HUD")
					]]>
				</event>
			</spriteSheetComponent>
		</element>

		<element name="CostumeInfoScrollMarker">
			<size dependentOnElement="element:name()" dependentOnComponent="Marker" />
			<position relativeTo="CostumeInfoScrollBar" vAnchor="TOP" hAnchor="HCENTER" />
			<orientation vAnchor="TOP" hAnchor="HCENTER" xOffset="0" yOffset="5*game.menuScaleX()" priorityOffset="-1" />

			<spriteSheetComponent name="Marker">
				<event name="onInit" params="component, element">
					<![CDATA[
						component("useOffsets"):SetInt(1)
						component("spriteName"):SetString("scroll_bar_dot")
						component("sheetName"):SetString("xml_resources/buttons01.xml")
						component("size"):SetFloat(0.5*game.hudScale())
						component("layer"):SetString("HUD")
					]]>
				</event>
			</spriteSheetComponent>

			<touchComponent name="Touch">
				<size dependentOnElement="element:name()" dependentOnComponent="Marker" />
				<position relativeTo="element:name()" vAnchor="TOP" hAnchor="LEFT" />
				<orientation vAnchor="TOP" hAnchor="LEFT" xOffset="0" yOffset="0" priorityOffset="0" />
			</touchComponent>

		</element>

		<element name="ActionPlaceholder">
			<size w="160*game.menuScaleX()" h="32*game.menuScaleX()" />
			<position relativeTo="PARENT" vAnchor="TOP" hAnchor="LEFT" />
			<orientation vAnchor="VCENTER" hAnchor="LEFT" xOffset="32*game.menuScaleX()" yOffset="-4*game.menuScaleX()" priorityOffset="-5" />

			<ninesliceComponent name="Frame">
				<size w="160*game.menuScaleX()" h="8*game.menuScaleX()" />
				<position relativeTo="element:name()" vAnchor="VCENTER" hAnchor="HCENTER" />
				<orientation vAnchor="VCENTER" hAnchor="HCENTER" xOffset="0" yOffset="0" priorityOffset="0" />
				<event name="onInit" params="component, element">
					<![CDATA[
						component("topHeight"):SetFloat(44.0)
						component("bottomHeight"):SetFloat(44.0)
						component("leftWidth"):SetFloat(50.0)
						component("rightWidth"):SetFloat(50.0)
						component("size"):SetFloat(0.25 * game.menuScaleX())
						--component("includeBorder"):SetInt(1)
						component("spriteName"):SetString("gfx/menu/GreyTitleFrame")
						component("layer"):SetString("HUD")
					]]>
				</event>
			</ninesliceComponent>
			
			<spriteSheetComponent name="Icon">
				<position relativeTo="element:name()" vAnchor="VCENTER" hAnchor="LEFT" />
				<orientation vAnchor="VCENTER" hAnchor="LEFT" xOffset="0" yOffset="0" priorityOffset="-1" />
				<event name="onInit" params="component, element">
					<![CDATA[
						component("sheetName"):SetString("xml_resources/context_buttons.xml")
						component("spriteName"):Set("button_battle")
						component("size"):SetFloat(0.2*game.hudScale())
						component("layer"):SetString("HUD")
						component("visible"):SetInt(0)
					]]>
				</event>
			</spriteSheetComponent>

			<textComponent name="Text">
				<size w="140*game.menuScaleX()" h="32*game.menuScaleX()" />
				<position relativeTo="element:name()" vAnchor="VCENTER" hAnchor="LEFT" />
				<orientation vAnchor="VCENTER" hAnchor="LEFT" xOffset="16*game.menuScaleX()" yOffset="0" priorityOffset="-1" />
				<event name="onInit" params="component, element">
					<![CDATA[
						component("multiline"):SetInt(0)
						component("autoScale"):SetInt(1)
						component("autoScaleFactor"):SetFloat(0.01)
						component("font"):Set(game.getTextFont())
						component("size"):SetFloat(0.2*game.hudScale())
						component("alignment"):SetInt(lua_sys.MenuTextComponent_TEXT_HCENTER_ALIGNED)
						local text = LOC("COSTUME_ACTION_PLACEHOLDER")
						text = text:gsub("\n", " ")
						component("text"):SetString(text)
						component("layer"):SetString("HUD")
						component("visible"):SetInt(0)
					]]>
				</event>
			</textComponent>

		</element>

		<element name="PurchaseSporeAndCostume">
			<size w="296*game.menuScaleX()" h="164*game.menuScaleX()" />
			<position relativeTo="PARENT" vAnchor="TOP" hAnchor="HCENTER" />
			<orientation vAnchor="TOP" hAnchor="HCENTER" xOffset="0" yOffset="0" priorityOffset="0" />

			<textComponent name="Text">
				<size w="120*game.menuScaleX()" h="120*game.menuScaleX()" />
				<position relativeTo="element:name()" vAnchor="TOP" hAnchor="HCENTER" />
				<orientation vAnchor="TOP" hAnchor="HCENTER" xOffset="-72*game.menuScaleX()" yOffset="32*game.menuScaleX()" priorityOffset="-2" />
				<event name="onInit" params="component, element">
					<![CDATA[
						component("multiline"):SetInt(1)
						component("autoScale"):SetInt(1)
						component("autoScaleFactor"):SetFloat(0.01)
						component("font"):Set(game.getTextFont())
						component("size"):SetFloat(0.2*game.menuScaleX())
						component("alignment"):SetInt(lua_sys.MenuTextComponent_TEXT_HCENTER_ALIGNED)

						local message = "STORE_COSTUMES_BUYNOW"
						if game.activeIslandNurseryCount() == 0 then
							message = "STORE_COSTUMES_BUYNOW_NO_NURSERY"
						end
						component("text"):SetString(message)

						component("layer"):SetString("HUD")
						component("visible"):SetInt(0)
					]]>
				</event>
			</textComponent>

			<element name="Motes">
				<size w="296*game.menuScaleY()" h="164*game.menuScaleX()"/>
				<position relativeTo="PARENT" vAnchor="VCENTER" hAnchor="HCENTER" />
				<orientation vAnchor="VCENTER" hAnchor="HCENTER" xOffset="0" yOffset="0" priorityOffset="0" />

				<particleComponent name="Particles">
					<position relativeTo="element:name()" vAnchor="VCENTER" hAnchor="HCENTER" />
					<orientation vAnchor="VCENTER" hAnchor="HCENTER" xOffset="0" yOffset="20*game.menuScaleX()" priorityOffset="-1" />
					<event name="onPostInit" params="component, element">
						<![CDATA[
							component("layer"):SetString("HUD")
							component("spawnWidth"):SetFloat(element:absW())
							component("spawnHeight"):SetFloat(element:absH() * 0.5)
							component("psi"):SetString("particles/particle_crown_sparkles.psi")
							component("image"):SetString("gfx/particles/particle_crown_sparkle")
							component:setScale(Vector2(game.menuScaleX(), game.menuScaleY()))
							component("prewarm"):SetFloat(5.0)
						]]>
					</event>
				</particleComponent>

				<event name="onTick" params="element, dt">
					<![CDATA[
						element:C("Particles"):setClipRect(element:absX(), element:absY(), element:absW(), element:absH())
					]]>
				</event>

			</element>

			<!-- 
				nursery anim is 1000x1000
			-->
			<aeComponent name="BreedingAnim">
				<position relativeTo="element:name()" vAnchor="VCENTER" hAnchor="HCENTER" />
				<orientation vAnchor="VCENTER" hAnchor="HCENTER" 
										 xOffset="1000/2 + 120" 
										 yOffset="1000/2 + 240" 
										 priorityOffset="-2" />
				<event name="onInit" params="component, element">
					<![CDATA[
						component("animationName"):SetString("xml_bin/structure_nursery.bin")
						component("animation"):SetString("structure_nursery_lit")
						component("layer"):SetString("HUD")
						component:setScale(Vector2(0.5*game.menuScaleX(),0.5*game.menuScaleX()))
						component:calculatePosition()
						component("visible"):SetInt(1)
					]]>
				</event>

				<event name="refresh" params="component, element">
					<![CDATA[
						component:AddRemap("SPORE", component("spore"):GetString())
						component:setClipRect(element:absX(), element:absY(), element:absW(), element:absH())
					]]>
				</event>
				
			</aeComponent>
			
			
			<!-- 
					sparkle anim is 320x240
					the position of the spore in the nursery is 477,304
				-->
			<aeComponent name="SparkleAnim">
				<position relativeTo="element:name()" vAnchor="VCENTER" hAnchor="HCENTER" />
				<orientation vAnchor="VCENTER" hAnchor="HCENTER" 
										 xOffset="320/2-(500-477) + 120" 
										 yOffset="240/2-(500-304) + 240" 
										 priorityOffset="-4" />
				<event name="onInit" params="component, element">
					<![CDATA[
						component("animationName"):SetString("xml_bin/costume_egg.bin")
						component("animation"):SetString("costume_egg")
						component("layer"):SetString("HUD")
						component:setScale(Vector2(0.5*game.menuScaleX(),0.5*game.menuScaleX()))
						component:calculatePosition()
						component("visible"):SetInt(0)
					]]>
				</event>
			</aeComponent>
			
		</element>

		<script src="scripts/Store_CostumeInfo.lua"/>

	</element>
</template>