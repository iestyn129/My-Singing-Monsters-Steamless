<template name="template_storeitem" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="../menus/menu.xsd">
	
	<size dependentOnElement="element:name()" dependentOnComponent="Sprite" />
	
	<event name="onInit" params="element">
		<![CDATA[
			element("isLocked"):SetInt(0)
			
			--put here since AnyCost::onInit doesn't get called before enableAndPopulateCosts which references these:
			element["AnyCost"]("currencyXOffset"):SetInt(32*game.menuScaleX())
			element["AnyCost"]("ownedTextXOffset"):SetInt(20*game.menuScaleX())
			
			element:DoStoredScript("disableAllCosts");
			element:DoStoredScript("enableAndPopulateCosts")
			
			local i = element("ID"):GetInt()
			element("currentAmount"):SetInt(0)
			--element("currentAmount"):SetInt(store:currentAmount(i))
			
			-- figure out if this element is locked for some reason (eg. player is too low level)
			--if((i >= (store:NumCategoryItems() - store:NumLockedItems())) or (store:canBuyAnotherRightNow(i) == false) or (maxAmount > 0 and store:currentAmount(i) >= maxAmount)) then
				--element:DoStoredScript("setLocked")
			--end
			
			--if((store:SaleAmount(i) ~= 0) and (element("Cost"):GetString() ~= "OWNED")) then
				--local saleTag = nil
				
				--local category = store:Category()
				--if(category ~= game.StoreCategories_TYPE_CURRENCY) then
					--saleTag = menu:addTemplateElement("template_itemsaletag", "saleTag", element)
					--saleTag:setOrientation(lua_sys.MenuOrientation(-4*game.menuScaleX(), 50*game.menuScaleX(), -2, lua_sys.HCENTER, lua_sys.TOP))
					--saleTag("SaleCurrencyType"):SetString(store:PurchaseTypeOfSaleItem(i))
				--else
					--saleTag = menu:addTemplateElement("template_saletag", "saleTag", element)
					--if(element("TimedAvailabilityOn"):GetInt() == 0) then
						--saleTag:setOrientation(lua_sys.MenuOrientation(-4*game.menuScaleX(), 24*game.menuScaleX(), -3, lua_sys.HCENTER, lua_sys.TOP))
					--else
						--saleTag:setOrientation(lua_sys.MenuOrientation(-4*game.menuScaleX(), 48*game.menuScaleX(), -3, lua_sys.HCENTER, lua_sys.TOP))
						--element["IAPCost"]["Text"]("visible"):SetInt(0)
					--end
				--end
				
				--saleTag:setParent(element)
				--saleTag:setRelativeObjectAnchors(lua_sys.HCENTER, lua_sys.TOP)
				--saleTag("SaleDesc"):SetString(element("SaleDesc"):GetString())
				--saleTag("SaleAmount"):SetInt(element("SaleAmount"):GetInt())
				--saleTag("CurrencyType"):SetString(element("Type"):GetString())
				--saleTag:init()
				--saleTag:setPositionBroadcast(true)
				
				--if(store:Category() == game.StoreCategories_TYPE_MONSTER) then
					--element["monsterCount"]("yOffset"):SetInt(60*game.menuScaleY())
				--end
				
				--element:DoStoredScript("disableAllCosts")
				
				--if(element("TimedSaleOn"):GetInt() == 1) then
					--if(element("TimedAvailabilityOn"):GetInt() == 1) then
						--saleTag:DoStoredScript("SetPositionForTimedSaleLimitedAvailMonster")
					--else
						--saleTag:DoStoredScript("SetPositionForTimedSaleNormalMonster")
					--end
				--end
			--end
			
			element("displayWhiteGreenTextAtBottom"):SetInt(0)
		
			--[[if(lua_sys.getSubPlatformName() ~= "amazon" and (store:Category() == game.StoreCategories_TYPE_ISLAND) and (store:getRemixByIndex(i) ~= "") and (store:canUnlockIslandByItemNum(i)) and (game.amazonStreamBox() ~= 1)) then
				local remixButton = menu:addTemplateElement("template_remixbutton", "RemixButton", element)
				remixButton:setParent(element)
				remixButton:init()
				remixButton:setPositionBroadcast(true)
			end--]]			
		]]>
	</event>
	
	<event name="enableAndPopulateCosts" params="element">
		local purchaseType = element("Type"):GetString()
			
		element["AnyCost"]("currencyType"):SetString(purchaseType);
		if(purchaseType == "none") then
			--AnyCost contains "OWNED" text in this situation:
			element["AnyCost"]("xOffset"):SetInt(element["AnyCost"]("ownedTextXOffset"):GetInt())
			element["AnyCost"]["Text"]("visible"):SetInt(1)
		else
			element["AnyCost"]:DoStoredScript("setCurrency");
		end
	</event>
	
	<event name="disableAllCosts" params="element">
		element["AnyCost"]["Text"]("visible"):SetInt(0)
		element["AnyCost"]["Sprite"]("visible"):SetInt(0)
	</event>
	
	<event name="onPostInit" params="element">	
		<![CDATA[
		if(element("SaleDesc"):GetString() ~= "") then
			element:DoStoredScript("showSale")
		else
			element:DoStoredScript("hideSale")
		end
		
		--[[if((store:Category() == game.StoreCategories_TYPE_ISLAND) and (not store:canUnlockIslandByItemNum(element("ID"):GetInt()))) then
			element:DoStoredScript("setLocked")
		end--]]

		if((element("Premium"):GetInt() == 1) and (not game.premiumPlayer())) then
			element:DoStoredScript("setDisabled")
			local premiumLock = menu:addTemplateElement("template_premiumlock", "PremiumLock", element)
			premiumLock:relativeTo(element)
			premiumLock:setOrientation(lua_sys.MenuOrientation(0, 15*game.menuScaleX(), -2, lua_sys.HCENTER, lua_sys.VCENTER))
			premiumLock:setRelativeObjectAnchors(lua_sys.HCENTER, lua_sys.VCENTER)
			premiumLock:init()
			premiumLock:setPositionBroadcast(true)
			premiumLock:postInit()
		end
		
		local displayWhiteGreenTextAtBottom = 0;
		--if(((element("TimedAvailabilityOn"):GetInt() == 1) or (element("TimedSaleOn"):GetInt() == 1)) and element("Cost"):GetString() ~= "OWNED") then
			--displayWhiteGreenTextAtBottom = 1;
		--end
		
		element["TempAvailText"]["AvailableUntil"]("visible"):SetInt(displayWhiteGreenTextAtBottom)
		element["TempAvailText"]["TimerText"]("visible"):SetInt(displayWhiteGreenTextAtBottom)
		element("displayWhiteGreenTextAtBottom"):SetInt(displayWhiteGreenTextAtBottom);
		
		-- if the player is on composer, tribal or gold island, and viewing structures or decorations, disable everything
		--if(game.isComposerIsland() or game.onGoldIsland() or game.onTribalIsland()) then
			
			--if((game.onGoldIsland() or game.onTribalIsland()) and store:Category() == game.StoreCategories_TYPE_MONSTER) then
				--element:DoStoredScript("setDisabled")
				--let people see the popup notice telling them why it's locked
				--element["Touch"]("enabled"):SetInt(1)
			--end
			
			--if(store:Category() == game.StoreCategories_TYPE_DECORATION or store:Category() == game.StoreCategories_TYPE_STRUCTURE or store:Category() == game.StoreCategories_TYPE_STARPOWER) then
				--element:DoStoredScript("setDisabled")
				--let people see the popup notice telling them why it's locked
				--element["Touch"]("enabled"):SetInt(1)
			--end
		--end
		]]>
	
	</event>
	
	<event name="setLocked" params="element">
		element("isLocked"):SetInt(1)
		
		local showLevelReqText = false
		if(game.playerLevel() &lt; element("RequiresLevel"):GetInt()) then
			showLevelReqText = true
		end
		
		if(showLevelReqText == true) then
			
			element["LevelReq"]("visible"):SetInt(1)
			element["TitleFrame"]["Text"]("size"):SetFloat(0.3*game.menuScaleY())
			element["TitleFrame"]["Text"]("text"):SetString("?")
			element["TitleFrame"]["Text"]("autoScale"):SetInt(1)
			element["AnyCost"]["Text"]("text"):SetString("?")
			
			local remixButton = element:GetElement("RemixButton")
			
			if(remixButton ~= nil) then
				remixButton["button"]:DoStoredScript("setInvisible")
			end
		end
		
		element["TempAvailText"]["AvailableUntil"]("visible"):SetInt(0)
		element["TempAvailText"]["TimerText"]("visible"):SetInt(0)
		element:DoStoredScript("setDisabled")
	</event>
	
	<event name="setDisabled" params="element">
		if(element["Touch"]("enabled"):GetInt() == 1) then
			element["Sprite"]:setColor(0.5, 0.5, 0.5)
			element["TitleFrame"]["Text"]:setColor(0.5, 0.5, 0.5)
			element["MonsterAnim"]["Sprite"]:setColor(0.2, 0.2, 0.2)
			
			local anyCost = element["AnyCost"]
			anyCost["Text"]:setColor(anyCost["Text"]("red"):GetFloat()*0.5, anyCost["Text"]("green"):GetFloat()*0.5, anyCost["Text"]("blue"):GetFloat()*0.5)
			anyCost["Sprite"]:setColor(0.5, 0.5, 0.5)
			
			local numGenes = element("numGenes"):GetInt()
			for i=0, numGenes-1 do
				local geneElement = element:GetElement(element:name().."-gene"..i)
				if(geneElement) then
					geneElement["Sprite"]:setColor(0.5, 0.5, 0.5)
				end
			end
			
			local newLabel = element["NewLabel"]
			newLabel["Sprite"]:setColor(0.5, 0.5, 0.5)
			newLabel["Text"]:setColor(newLabel["Text"]("red"):GetFloat()*0.5, newLabel["Text"]("green"):GetFloat()*0.5, newLabel["Text"]("blue"):GetFloat()*0.5)
			element["monsterCount"]("visible"):SetInt(0)
			
			element["Touch"]("enabled"):SetInt(0)
		end
	</event>
	
	<event name="hideItem" params="element">

		element["Sprite"]("visible"):SetInt(0)
		element["TitleFrame"]["Text"]("visible"):SetInt(0)
		element["MonsterAnim"]["Sprite"]("visible"):SetInt(0)

		element["AnyCost"]["Text"]("alpha"):SetFloat(0.0)
		element["AnyCost"]["Sprite"]("alpha"):SetFloat(0.0)
		element["CurrencyAmount"]["Sprite"]("alpha"):SetFloat(0.0)
		element["CurrencyAmount"]["Text"]("alpha"):SetFloat(0.0)
		element["IAPCost"]["Text"]("alpha"):SetFloat(0.0)
		
		local numGenes = element("numGenes"):GetInt()
		
		for i=0, numGenes-1 do
			local geneElement = element:GetElement(element:name().."-gene"..i)
			if(geneElement) then
				geneElement["Sprite"]("visible"):SetInt(0)
			end
		end
		
		element["NewLabel"]["Sprite"]("alpha"):SetFloat(0.0)
		element["NewLabel"]["Text"]("alpha"):SetFloat(0.0)
		element["LevelReq"]("visible"):SetInt(0)
		element["monsterCount"]("visible"):SetInt(0)
		element["Touch"]("enabled"):SetInt(0)
		
		if(element("SaleDesc"):GetString() ~= "") then
			element:DoStoredScript("hideSale")
		end
		
		element["TempAvailText"]["AvailableUntil"]("visible"):SetInt(0)
		element["TempAvailText"]["TimerText"]("visible"):SetInt(0)
	</event>
	
	<event name="showItem" params="element">
		element["Sprite"]("visible"):SetInt(1)
		element["TitleFrame"]["Text"]("visible"):SetInt(1)
		element["MonsterAnim"]["Sprite"]("visible"):SetInt(1)
		
		element["AnyCost"]["Text"]("alpha"):SetFloat(1.0)
		element["AnyCost"]["Sprite"]("alpha"):SetFloat(1.0)	
		
		element["CurrencyAmount"]["Sprite"]("alpha"):SetFloat(1.0)
		element["CurrencyAmount"]["Text"]("alpha"):SetFloat(1.0)
		
		local numGenes = element("numGenes"):GetInt()
		
		for i=0, numGenes-1 do
			local geneElement = element:GetElement(element:name().."-gene"..i)
			if(geneElement) then
				geneElement["Sprite"]("visible"):SetInt(1)
			end
		end
		
		element["NewLabel"]["Sprite"]("alpha"):SetFloat(1.0)
		element["NewLabel"]["Text"]("alpha"):SetFloat(1.0)
		element["monsterCount"]("visible"):SetInt(1)
		element["Touch"]("enabled"):SetInt(1)
		
		if(element("SaleDesc"):GetString() ~= "") then
			element:DoStoredScript("showSale")
		end
		
		if(element("TimedAvailabilityOn"):GetInt() == 1) then
			element["TempAvailText"]["AvailableUntil"]("visible"):SetInt(1)
			element["TempAvailText"]["TimerText"]("visible"):SetInt(1)
		end
		
		if(element("isLocked"):GetInt() == 1) then
			element:DoStoredScript("setLocked")
		end
	</event>
	
	<event name="hideSale" params="element">
		--if(element("isLocked"):GetInt()==0) then
			--if(store:SaleAmount(element("ID"):GetInt()) ~= 0 or (element("TimedSaleOn"):GetInt()==1)) then
				--if(element:GetElement("saleTag") ~= nil) then
					--element["saleTag"]:DoStoredScript("hide")
				--end
				--element["TempAvailText"]["AvailableUntil"]("visible"):SetInt(0)
				--element["TempAvailText"]["TimerText"]("visible"):SetInt(0)
			--end
		--end
	</event>
	
	<event name="showSale" params="element">
		if(element("SaleAmount"):GetInt() ~= 0 or (element("TimedSaleOn"):GetInt()==1)) then
			if(element("isLocked"):GetInt()==0) then
			
				if(element:GetElement("saleTag") ~= nil) then
					element["saleTag"]:DoStoredScript("show")
				end
				
				element["TempAvailText"]["AvailableUntil"]("visible"):SetInt(element("displayWhiteGreenTextAtBottom"):GetInt())
				element["TempAvailText"]["TimerText"]("visible"):SetInt(element("displayWhiteGreenTextAtBottom"):GetInt())
			else
				if(element:GetElement("saleTag") ~= nil) then
					element["saleTag"]:DoStoredScript("showDisabled")
				end
				
				local availUntil = element["TempAvailText"]["AvailableUntil"];
				availUntil("visible"):SetInt(element("displayWhiteGreenTextAtBottom"):GetInt())
				availUntil:setColor(availUntil("red"):GetFloat()*0.5, availUntil("green"):GetFloat()*0.5, availUntil("blue"):GetFloat()*0.5)
				
				local timerText = element["TempAvailText"]["TimerText"]
				timerText("visible"):SetInt(element("displayWhiteGreenTextAtBottom"):GetInt())
				timerText:setColor(timerText("red"):GetFloat()*0.5, timerText("green"):GetFloat()*0.5, timerText("blue"):GetFloat()*0.5)
			end
		end
	</event>
	
	<spriteSheetComponent name="Sprite">
		<event name="onInit" params="component, element">
			component("spriteName"):SetString("market_frame")
			component("sheetName"):SetString("xml_resources/store_elements.xml")
			component("layer"):SetString("HUD")
			component("size"):SetFloat(0.5*game.menuScaleX())
		</event>
	</spriteSheetComponent>
	
	<element name="TitleFrame">
		<size w="130*game.menuScaleX()" h="35*game.menuScaleY()" />
		<position relativeTo="PARENT" vAnchor="TOP" hAnchor="HCENTER" />
		<orientation vAnchor="TOP" hAnchor="HCENTER" xOffset="0" yOffset="8*game.menuScaleX()" priorityOffset="-1" />
		<textComponent name="Text">
			<size dependentOnElement="element:name()" />
			<position relativeTo="PARENT" vAnchor="VCENTER" hAnchor="HCENTER" />
			<orientation vAnchor="VCENTER" hAnchor="HCENTER" xOffset="-2*game.menuScaleX()" yOffset="-4*game.menuScaleX()" priorityOffset="-1" />
			<event name="onInit" params="component, element">
				local itemTitle = element:parent()("ItemTitle"):GetString();
				component("noTranslate"):SetInt(1)
				
				component("textPadding"):SetInt(3*game.menuScaleX())
				component("size"):SetFloat(0.3*game.menuScaleY())
				component("autoScale"):SetInt(1)
				component("autoScaleFactor"):SetFloat(0.01)
				component("multiline"):SetInt(1)
				component("font"):Set(game.getTextFont())
				component("alignment"):SetInt(lua_sys.MenuTextComponent_TEXT_HCENTER_ALIGNED)
				component("text"):SetString(itemTitle)
				component("layer"):SetString("HUD")
				
			</event>
		</textComponent>
	</element>
	
	<element name="MonsterAnim">
		<size dependentOnElement="element:name()" dependentOnComponent="Sprite" />
		<position relativeTo="PARENT" vAnchor="VCENTER" hAnchor="HCENTER" />
		<orientation vAnchor="VCENTER" hAnchor="HCENTER" xOffset="0" yOffset="0" priorityOffset="-1" />
		<aeComponent name="Sprite">
			<position relativeTo="element:name()" vAnchor="VCENTER" hAnchor="HCENTER" />
			<orientation vAnchor="TOP" hAnchor="LEFT" xOffset="0" yOffset="36" priorityOffset="0" />
			<event name="onInit" params="component, element">
				component("animationName"):SetString("xml_bin/"..element:parent()("AnimationFile"):GetString())
				component("animation"):SetString(element:parent()("AnimationName"):GetString())
				component:setScale(Vector2(0.7*game.menuScaleX(),0.7*game.menuScaleX()))
				component("layer"):SetString("HUD")	
			</event>
		</aeComponent>
	</element>
	
	<element name="NewLabel">
		<size dependentOnElement="element:name()" dependentOnComponent="Sprite" />
		<position relativeTo="PARENT" vAnchor="VCENTER" hAnchor="RIGHT" />
		<orientation vAnchor="BOTTOM" hAnchor="HCENTER" xOffset="-20*game.hudScale()" yOffset="-30/game.hudScale()" priorityOffset="-2" />
		<ninesliceComponent name="Sprite">
			<size w="52*game.hudScale()" h="52*game.hudScale()" />
			<event name="onInit" params="component, element">
				component("includeBorder"):SetInt(1)
				component("topHeight"):SetFloat(49.0)
				component("bottomHeight"):SetFloat(49.0)
				component("leftWidth"):SetFloat(49.0)
				component("rightWidth"):SetFloat(49.0)
				component("size"):SetFloat(0.5*game.hudScale())
				component("spriteName"):SetString("gfx/menu/GreyTitleFrame")
				component("layer"):SetString("HUD")
				component("visible"):SetInt(0)
				element["Text"]("visible"):SetInt(0)
				
				if(element:parent()("Premium"):GetInt() == 0) then
					component("visible"):SetInt(1)
					element["Text"]("visible"):SetInt(1)
				end
			</event>
		</ninesliceComponent>
		<textComponent name="Text">
			<position relativeTo="PARENT" vAnchor="VCENTER" hAnchor="HCENTER" />
			<orientation vAnchor="VCENTER" hAnchor="HCENTER" xOffset="5" yOffset="0" priorityOffset="-1" />
			<event name="onInit" params="component, element">
				component("font"):Set(game.getTextFont())
				component("size"):SetFloat(0.3*game.hudScale())
				component("alignment"):SetInt(lua_sys.MenuTextComponent_TEXT_HCENTER_ALIGNED)
				component:setColor(0.31, 0.94, 0.26)
				component("text"):SetString("NEW")
				component("rotation"):SetFloat(-0.25)
				component("layer"):SetString("HUD")
			</event>
		</textComponent>
	</element>
	
	<element name="CurrencyAmount">
		<size dependentOnElement="element:name()" dependentOnComponent="Text" />
		<position relativeTo="TitleFrame" vAnchor="VCENTER" hAnchor="HCENTER" />
		<orientation vAnchor="TOP" hAnchor="HCENTER" xOffset="0" yOffset="0" priorityOffset="-1" />
		<textComponent name="Text">
			<position relativeTo="PARENT" vAnchor="VCENTER" hAnchor="HCENTER" />
			<orientation vAnchor="VCENTER" hAnchor="HCENTER" xOffset="0" yOffset="0" priorityOffset="0" />
			<event name="onInit" params="component, element">
				component("multiline"):SetInt(0)
				component("font"):Set(game.getTextFont())
				component("size"):SetFloat(0.25*game.menuScaleX())
				component("alignment"):SetInt(lua_sys.MenuTextComponent_TEXT_HCENTER_ALIGNED)
				component("text"):SetString(element:parent()("CurrencyGained"):GetString())
				component("autoScale"):SetInt(1)
				component("layer"):SetString("HUD")
				game.StoreContext_setCurrencyTypeColour(element:parent()("CurrencyType"):GetString(), component)
			</event>
		</textComponent>
		<spriteSheetComponent name="Sprite">
			<position relativeTo="element:name()" vAnchor="VCENTER" hAnchor="LEFT" />
			<orientation vAnchor="VCENTER" hAnchor="RIGHT" xOffset="0" yOffset="2*game.hudScale()" priorityOffset="0" />
			<event name="onInit" params="component, element">
				local type = element:parent()("CurrencyType"):GetString()
				
				if(type == game.StoreContext_TYPE_COINS) then
					component("spriteName"):SetString(game.StoreContext_SPRITE_COINS)
				elseif(type == game.StoreContext_TYPE_ETH_CURRENCY) then
					component("spriteName"):SetString(game.StoreContext_SPRITE_ETH_CURRENCY)
				elseif(type == game.StoreContext_TYPE_DIAMOND) then
					component("spriteName"):SetString(game.StoreContext_SPRITE_DIAMOND)
				elseif(type == game.StoreContext_TYPE_FOOD) then
					component("spriteName"):SetString(game.StoreContext_SPRITE_FOOD)
				elseif(type == game.StoreContext_TYPE_STARPOWER) then
					component("spriteName"):SetString(game.StoreContext_SPRITE_STARPOWER)
				elseif(type == game.StoreContext_TYPE_KEYS) then
					component("spriteName"):SetString(game.StoreContext_SPRITE_KEY)
				elseif(type == game.StoreContext_TYPE_RELICS) then
					component("spriteName"):SetString(game.StoreContext_SPRITE_RELIC)
				end
				
				component("sheetName"):SetString(game.StoreContext_CURRENCY_SPRITESHEET)
				component("size"):SetFloat(0.3*game.hudScale())
				component("layer"):SetString("HUD")
			</event>
		</spriteSheetComponent>
		<event name="onInit" params="element">
			element["Text"]("visible"):SetInt(0)
			element["Sprite"]("visible"):SetInt(0)
		</event>
	</element>
	
	<element name="IAPCost">
		<size dependentOnElement="element:name()" dependentOnComponent="Text" />
		<position relativeTo="PARENT" vAnchor="TOP" hAnchor="LEFT" />
		<orientation vAnchor="TOP" hAnchor="LEFT" xOffset="15*game.menuScaleX()" yOffset="50*game.menuScaleX()" priorityOffset="-2" />
		<textComponent name="Text">
			<event name="onInit" params="component, element">
				component("multiline"):SetInt(0)
				component("font"):Set(game.getTextFont())
				component("size"):SetFloat(0.2*game.menuScaleX())
				component("alignment"):SetInt(lua_sys.MenuTextComponent_TEXT_LEFT_ALIGNED)
				component("text"):SetString(element:parent()("ItemPriceAsStr"):GetString())
				component("autoScale"):SetInt(1)
				component("layer"):SetString("HUD")
				component("visible"):SetInt(0)
			</event>
		</textComponent>
	</element>
	
	<!-- this stupidly named element is the non-IAP cost, shown in the upper left corner of the store item window, which is usually diamonds, coins or whatever, and sits next to a currency sprite; also contains OWNED text in some situations in the Island category menu-->
	<element name="AnyCost">
		<size dependentOnElement="element:name()" dependentOnComponent="Text" />
		<position relativeTo="PARENT" vAnchor="TOP" hAnchor="LEFT" />
		<orientation vAnchor="TOP" hAnchor="LEFT" xOffset="32*game.menuScaleX()" yOffset="45*game.menuScaleY()" priorityOffset="-2" />
		<event name="onInit" params="element">
			element("currencyType"):SetString("none")
			
			--moved to onInit of the template, since these are referenced before this function is called:
			--[[element("currencyXOffset"):SetInt(32*game.menuScaleX())
			element("ownedTextXOffset"):SetInt(20*game.menuScaleX())]]
		</event>
		<event name="setCurrency" params="element">
			
			element["Text"]("visible"):SetInt(0)
			element["Sprite"]("visible"):SetInt(0)
			element("xOffset"):SetInt(element("currencyXOffset"):GetInt())
			
			local currencyType = element("currencyType"):GetString();
			
			element["Text"]("text"):SetString(element:parent()("Cost"):GetString())
			element["Sprite"]("spriteName"):SetString(game.StoreContext_getSpriteFromCurrencyTypeStr(currencyType))
			element["Sprite"]("sheetName"):SetString(game.StoreContext_CURRENCY_SPRITESHEET)

			if(currencyType == game.StoreContext_TYPE_DIAMOND) then
				
				element["Text"]:DoStoredScript("setDiamondTextColour");
				element["Text"]("visible"):SetInt(1)
				element["Sprite"]("visible"):SetInt(1)
				
			elseif(currencyType == game.StoreContext_TYPE_COINS or currencyType == game.StoreContext_TYPE_ETH_CURRENCY) then
			
				if(game.isEtherealIsland()) then
					element["Text"]:DoStoredScript("setEtherealTextColour");
				else 
					element["Text"]:DoStoredScript("setCoinTextColour")
				end
				
				element["Sprite"]("sheetName"):SetString(game.StoreContext_CURRENCY_SPRITESHEET)
				element["Text"]("visible"):SetInt(1)
				element["Sprite"]("visible"):SetInt(1)
				
			elseif(currencyType == game.StoreContext_TYPE_STARPOWER) then
			
				element["Text"]("visible"):SetInt(1)
				element["Sprite"]("visible"):SetInt(1)
				element["Text"]:DoStoredScript("setStarpowerTextColour")
				
			elseif(currencyType == game.StoreContext_TYPE_KEYS) then
			
				element["Text"]("visible"):SetInt(1)
				element["Sprite"]("visible"):SetInt(1)
				element["Text"]:DoStoredScript("setKeyTextColour")
				element["Text"]("text"):SetString(element:parent()("Cost"):GetString())

			elseif(currencyType == game.StoreContext_TYPE_RELICS) then
				
				element["Text"]:DoStoredScript("setRelicTextColour")
				element["Text"]("visible"):SetInt(1)
				element["Sprite"]("visible"):SetInt(1)
				
			end
			
			if(element:parent()("isLocked"):GetInt()==1) then
				local anycostText = element["Text"];
				anycostText:setColor(anycostText("red"):GetFloat()*0.5, anycostText("green"):GetFloat()*0.5, anycostText("blue"):GetFloat()*0.5)
			end

		</event>
		
		<textComponent name="Text">
			<size w="97*game.hudScale()" h="50*game.hudScale()" />	
			<event name="onInit" params="component, element">
				component("multiline"):SetInt(0)
				component("font"):Set(game.getTextFont())
				component("size"):SetFloat(0.3*game.hudScale())
				component("alignment"):SetInt(lua_sys.MenuTextComponent_TEXT_LEFT_ALIGNED)
				--[[game.StoreContext_setDiamondTextColour(component);]]
				component("text"):SetString(element:parent()("Cost"):GetString())
				component("autoScale"):SetInt(1)
				component("layer"):SetString("HUD")
			</event>
			<!-- this snazzledazzle is used because otherwise calls from outside the component will pass a MenuComponent into the function instead of a MenuTextComponent and crash -->
			<event name="setDiamondTextColour" params="component, element">
				game.StoreContext_setDiamondTextColour(component);
			</event>
			<event name="setCoinTextColour" params="component, element">
				game.StoreContext_setCoinTextColour(component);
			</event>
			<event name="setEtherealTextColour" params="component, element">
				game.StoreContext_setEtherealTextColour(component);
			</event>
			<event name="setStarpowerTextColour" params="component, element">
				game.StoreContext_setStarpowerTextColour(component);
			</event>
			<event name="setKeyTextColour" params="component, element">
				game.StoreContext_setKeyTextColour(component);
			</event>
			<event name="setRelicTextColour" params="component, element">
				game.StoreContext_setRelicTextColour(component);
			</event>
		</textComponent>
		<spriteSheetComponent name="Sprite">
			<position relativeTo="element:name()" vAnchor="TOP" hAnchor="LEFT" />
			<orientation vAnchor="TOP" hAnchor="RIGHT" xOffset="0" yOffset="4" priorityOffset="0" />
			<event name="onInit" params="component, element">
				--[[component("spriteName"):SetString(game.StoreContext_SPRITE_COINS)
				component("sheetName"):SetString(game.StoreContext_CURRENCY_SPRITESHEET)]]
				component("size"):SetFloat(0.3*game.menuScaleX())
				component("layer"):SetString("HUD")
			</event>
		</spriteSheetComponent>
	</element>
	

	<textComponent name="LevelReq">
		<size w="135*game.menuScaleX()" />
		<position relativeTo="PARENT" vAnchor="BOTTOM" hAnchor="HCENTER" />
		<orientation vAnchor="BOTTOM" hAnchor="HCENTER" xOffset="0" yOffset="15*game.menuScaleY()" priorityOffset="-2" />
		<event name="onInit" params="component, element">
			local txt = ""
			txt = game.getLocalizedText("NOTIFICATION_REQUIRES_LEVEL")
			txt = select(1, txt:gsub("XXX", element("RequiresLevel"):GetInt()))
			
			component("multiline"):SetInt(1)
			component("font"):Set(game.getTextFont())
			component("size"):SetFloat(0.35*game.hudScale())
			component("alignment"):SetInt(lua_sys.MenuTextComponent_TEXT_HCENTER_ALIGNED)
			component("textPadding"):SetInt(30*game.menuScaleX())
			component("text"):SetString(txt)
			component("autoScale"):SetInt(1)
			component("layer"):SetString("HUD")
			component("visible"):SetInt(0)
		</event>
	</textComponent>
	
	<textComponent name="monsterCount">
		<position relativeTo="PARENT" vAnchor="TOP" hAnchor="RIGHT" />
		<orientation vAnchor="TOP" hAnchor="RIGHT" xOffset="25*game.menuScaleX()" yOffset="45*game.menuScaleY()" priorityOffset="-2" />
		<event name="onInit" params="component, element">
			component("visible"):SetInt(0)
		</event>
	</textComponent>
	
	<element name="TempAvailText">
		<size w="120*game.menuScaleX()" h="35*game.menuScaleY()" />
		<position relativeTo="PARENT" vAnchor="BOTTOM" hAnchor="HCENTER" />
		<orientation vAnchor="BOTTOM" hAnchor="HCENTER" xOffset="0" yOffset="20*game.menuScaleY()" priorityOffset="-2" />
		<textComponent name="AvailableUntil">
			<size dependentOnElement="element:name()"/>
			<event name="onInit" params="component, element">
				<![CDATA[
					component("multiline"):SetInt(1)
					component("font"):Set(game.getTextFont())
					component("size"):SetFloat(0.3*game.hudScale())
					component("alignment"):SetInt(lua_sys.MenuTextComponent_TEXT_HCENTER_ALIGNED)
					component("text"):SetString("AVAILABLE_LIMITED_TIME")
					component("layer"):SetString("HUD")
					component("autoScaleFactor"):SetFloat(0.01)
					component("autoScale"):SetInt(1)
					component("visible"):SetInt(0)
					
					--if(element:parent()("TimedAvailabilityOn"):GetInt() == 1) then
						--component("autoScale"):SetInt(0)
						--component("text"):SetString("AVAILABLE_UNTIL")
						--component("visible"):SetInt(1)
						--component("autoScale"):SetInt(1)
					--elseif(element:parent()("TimedSaleOn"):GetInt() == 1) then
						--component("autoScale"):SetInt(0)
						--component("text"):SetString("ONSALE_UNTIL")
						--component("visible"):SetInt(1)
						--component("autoScale"):SetInt(1)
					--end
				]]>
			</event>
			<event name="onPostInit" params="component, element">
				if(element:parent()("ItemTitle"):GetString() == "MINE_01_01") then
					component("yOffset"):SetInt(30*game.menuScaleY())
				end
			</event>
		</textComponent>
		<textComponent name="TimerText">
			<size dependentOnElement="element:name()" />
			<position relativeTo="PARENT" vAnchor="VCENTER" hAnchor="HCENTER" />
			<orientation vAnchor="VCENTER" hAnchor="HCENTER" xOffset="0" yOffset="5*game.menuScaleY()" priorityOffset="-1" />
			<event name="onInit" params="component, element">
				<![CDATA[
					component("textPadding"):SetInt(3*game.menuScaleX())
					component("size"):SetFloat(0.3*game.menuScaleY())
					component("autoScale"):SetInt(1)
					component("autoScaleFactor"):SetFloat(0.01)
					component("multiline"):SetInt(0)
					component("font"):Set(game.getTextFont())
					component:setColor(0.588, 0.925, 0.192)
					component("alignment"):SetInt(lua_sys.MenuTextComponent_TEXT_HCENTER_ALIGNED)
					
					--local index = element:parent()("ID"):GetInt();
					--if(element:parent()("TimedAvailabilityOn"):GetInt() == 1) then
						--local secondsRemaining = store:RemainingAvailTime(index)
						--if (secondsRemaining > 4*24*60*60) then
							--component("text"):SetString("LIMITED_TIME")
						--else
							--component("text"):SetString(""..game.timeToString(secondsRemaining))
						--end
					--elseif(element:parent()("TimedSaleOn"):GetInt() == 1) then
						--component("text"):SetString(""..game.timeToString(store:RemainingSaleTime(index)))
					--end
					
					component("layer"):SetString("HUD")
				]]>
			</event>
		</textComponent>
		<event name="onTick" params="element, dt">
			<![CDATA[
				local secondsRemaining = 0;
				local parent = element:parent()
				
				--[[local availabilityEvent = parent("TimedAvailabilityOn"):GetInt()
				if(availabilityEvent == 1) then
					secondsRemaining = store:RemainingAvailTime(parent("ID"):GetInt());
				elseif(parent("TimedSaleOn"):GetInt() == 1) then
					secondsRemaining = store:RemainingSaleTime(parent("ID"):GetInt())
				end
				
				if(secondsRemaining > 0) then
					if(availabilityEvent == 1 and secondsRemaining > 4*24*60*60) then
						element["TimerText"]("text"):SetString("LIMITED_TIME")
					else
						element["TimerText"]("text"):SetString(game.timeToString(secondsRemaining))
					end
				else
					if(availabilityEvent == 1) then
						if(parent["Touch"]("enabled"):GetInt()==1) then
							store:AnAvailabilityExpiryOccurred(parent:name());
							element["TempAvailText"]["TimerText"]("visible"):SetInt(0)
							element["TempAvailText"]["AvailableUntil"]("text"):SetString("TIMED_EVENT_EXPIRED")
							parent:DoStoredScript("setDisabled")
						end
					else
						if(element["TimerText"]("visible"):GetInt() == 1) then
							if(parent:GetElement("saleTag") ~= nil) then
								parent:GetElement("saleTag"):DoStoredScript("hide")
								parent:DoStoredScript("enableAndPopulateCosts")
							end
							
							element["TimerText"]("visible"):SetInt(0)
							element["AvailableUntil"]("visible"):SetInt(0)
						end
					end
				end]]--
			]]>
		</event>
	</element>	
	
</template>
