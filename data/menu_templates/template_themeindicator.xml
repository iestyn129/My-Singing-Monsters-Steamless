<template name="template_themeindicator" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="../menus/menu.xsd">
	<hudScale scale="game.hudScale()" />
	
	<size dependentOnElement="element:name()" dependentOnComponent="Text" />
	
	<event name="onInit" params="element">
		<![CDATA[
			element("curScale"):SetFloat(1.0)
			element("origTextSize"):SetFloat(0.2)
			element("origImgSize"):SetFloat(0.22)
			
			element("setNewScale"):SetFloat(element("curScale"):GetFloat())

			element("transitionTime"):SetFloat(1.0)
			element("transitionState"):SetInt(1)
			
			element:DoStoredScript("resetNewThemeIndicator")
		]]>
	</event>
	
	<event name="resetNewThemeIndicator" params="element">
		<![CDATA[
			if(game.playerLevel() < 12) then
				element["Sprite"]("visible"):SetInt(0)
			else
			
				local islandThemeIds = game.getIslandThemeIds(game.currentIsland(), false, true)
				local numIslandThemes = islandThemeIds:size()
				if(numIslandThemes == 0) then
					element["Sprite"]("visible"):SetInt(0)
				else
					if(game.isIslandThemeUnlocked(islandThemeIds[0]) == false) then
						element["Sprite"]("visible"):SetInt(0)
					end
					
					if(game.hasOpenedThemesTab()) then
						
						if(game.hasPurchaseAndNotActivatedTheme()) then
							element["Sprite"]("visible"):SetInt(1)
						else
							element["Sprite"]("visible"):SetInt(0)
						end
						
					end
				end
			end
		]]>
	</event>
	
	<event name="onTick" params="element, dt">
		local transitionState = element("transitionState"):GetInt()
		
		if(transitionState ~= 0 and dt &lt;= 0.5) then
			local transitionTime = element("transitionTime"):GetFloat()
			
			element["Sprite"]("size"):SetFloat(0.6*transitionTime)
			
			if( transitionTime &lt;= 1.0 ) then
				element("transitionState"):SetInt(1)
			elseif(transitionTime &gt;= 1.25) then
				element("transitionState"):SetInt(2)
			end	

			if(transitionState == 1) then
				element("transitionTime"):SetFloat(transitionTime + dt)
			else
				element("transitionTime"):SetFloat(transitionTime - dt)
			end
		end
		
		if element("curScale"):GetFloat() ~= element("setNewScale"):GetFloat() then
			element("curScale"):SetFloat(element("setNewScale"):GetFloat())
			
			element["Text"]("size"):SetFloat(element("origTextSize"):GetFloat() * element("curScale"):GetFloat())
			element["Tag"]("size"):SetFloat(element("origImgSize"):GetFloat()*element("curScale"):GetFloat())
		end
	</event>
	
	<event name="SetEnabled" params="element">
		element["Sprite"]:setColor(1.0, 1.0, 1.0)
		element["Tag"]:setColor(1.0, 1.0, 1.0)
		local text = element["Text"]
		text:setColor(text("red"):GetFloat() * 2.0, text("green"):GetFloat() * 2.0, text("blue"):GetFloat() * 2.0)
	</event>
	
	<event name="SetDisabled" params="element">
		element["Sprite"]:setColor(0.5, 0.5, 0.5)
		element["Tag"]:setColor(0.5, 0.5, 0.5)
		local text = element["Text"]
		text:setColor(text("red"):GetFloat() * 0.5, text("green"):GetFloat() * 0.5, text("blue"):GetFloat() * 0.5)
	</event>
	
	<event name="SetEventVisible" params="element">
		--no new theme indicator:
		element["Sprite"]("visible"):SetInt(0)
		element["Text"]("visible"):SetInt(1)
		element["Tag"]("visible"):SetInt(1)
	</event>
	<event name="SetEventInvisible" params="element">
		element["Text"]("visible"):SetInt(0)
		element["Tag"]("visible"):SetInt(0)
		
		--turn new theme indicator back on if need be
		element:DoStoredScript("resetNewThemeIndicator")
	</event>
	
	<spriteSheetComponent name="Sprite">
		<position relativeTo="element:name()" vAnchor="VCENTER" hAnchor="HCENTER" />
		<orientation vAnchor="VCENTER" hAnchor="HCENTER" xOffset="0" yOffset="0" priorityOffset="1" />
		<event name="onInit" params="component, element">
			component("spriteName"):SetString("goal_exclaim")
			component("sheetName"):SetString("xml_resources/hud01.xml")
			component("size"):SetFloat(0.6)
			component("layer"):SetString("ContextBar")
			
			if(component("isSourceRotated"):GetInt() == 1) then
				component("vFlip"):SetInt(1)
			else
				component("hFlip"):SetInt(1)
			end
			
			component("xOffset"):SetInt(22)
			component("yOffset"):SetInt(3)
		</event>
	</spriteSheetComponent>
	
	
	<textComponent name="Text">
		<size w="60*game.hudScale()" />
		<event name="onInit" params="component, element">
			component("autoScaleFactor"):SetFloat(0.01)
			component("autoScale"):SetInt(1)
			component("multiline"):SetInt(0)
			component("font"):Set(game.getTitleFont())
			component("size"):SetFloat(element("origTextSize"):GetFloat())
			component("alignment"):SetInt(lua_sys.MenuTextComponent_TEXT_LEFT_ALIGNED)
			--component("text"):SetString(game.localizedUpper("PROMO_LABEL"))
			component("text"):SetString("EVENT")
			component("layer"):SetString("ContextBar")
			component("visible"):SetInt(1)
			component("yOffset"):SetInt(-1)
		</event>
		<event name="onPostInit" params="component, element">
			--stupid hack because autoscale/size doesn't work properly here without another call to ComputeWorldState (text Width() will be 0 otherwise)
			component("autoScale"):SetInt(0)
			component("text"):SetString("EVENT")
			component("autoScale"):SetInt(1)
			element("origTextSize"):SetFloat(component("size"):GetFloat())
		</event>
	</textComponent>
	
	<spriteSheetComponent name="Tag">
		<position relativeTo="element:name()" vAnchor="VCENTER" hAnchor="HCENTER" />
		<orientation vAnchor="VCENTER" hAnchor="HCENTER" xOffset="0" yOffset="0" priorityOffset="1" />
		<event name="onInit" params="component, element">
			component("spriteName"):SetString("saletag_promo")
			component("sheetName"):SetString("xml_resources/store_buttons01.xml")
			component("layer"):SetString("ContextBar")
			component("size"):SetFloat(element("origImgSize"):GetFloat())
			component("visible"):SetInt(1)
		</event>
	</spriteSheetComponent>
	
</template>