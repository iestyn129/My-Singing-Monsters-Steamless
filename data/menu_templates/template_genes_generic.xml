<template name="template_genes_generic" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="../menus/menu.xsd">

	<defaultTemplateVar name="$Size" equals="0.5*game.menuScaleX()" />
	<defaultTemplateVar name="$Spacing" equals="0" />
	<defaultTemplateVar name="$Layer" equals="MidPopUps" />
	
	<event name="onInit" params="element">
		<![CDATA[
			element("disabled"):SetInt(0)
			element("Layer"):SetString("$Layer")
			element("Size"):SetFloat($Size)
			element("Spacing"):SetFloat($Spacing)
			element("populated"):SetInt(0)
			element("visible"):SetInt(1)
		]]>
	</event>

	<event name="onPostInit" params="element">
		<![CDATA[
			if element("populated"):GetInt() == 0 then
				element:DoStoredScript("populate")
			end
		]]>
	</event>
		
	<event name="populate" params="element">
		<![CDATA[
				
			local layer = element("Layer"):GetString()
			local size = element("Size"):GetFloat()

			local geneString = element("GeneString"):GetString()
			local count = string.len(geneString)
			local spacing = element("Spacing"):GetFloat()
			local offsetX = 0
			local offsetY = 0
			local priority = 0 --priority should be set on this element
			local height = 0
			
			if(count ~= 0) then
				for i = 0, count-1 do
				
					local item = menu:addTemplateElement("template_gene", "entry"..i, element)
					
					item("SpriteName"):SetString(game.geneFilename(geneString:sub(i+1,i+1)))
					local sheetname
					if(element("useFlags"):GetInt() == 0) then
						sheetname = "xml_resources/hud02.xml"
					else
						sheetname = "xml_resources/flags01.xml"
					end
					item("SheetName"):SetString(sheetname)
					item("Size"):SetFloat(size)
					item("Layer"):SetString(layer)
					
					if i > 0 then
						offsetX = offsetX + spacing
					end
					
					item:setOrientation(lua_sys.MenuOrientation(offsetX, offsetY, priority, lua_sys.LEFT, lua_sys.VCENTER))
					item:setRelativeObjectAnchors(lua_sys.LEFT, lua_sys.VCENTER)
					
					item:init()
					item:setPositionBroadcast(true)
					item:postInit()
					
					offsetX = offsetX + item:absW()
					
					height = item:absH()
					
				end
			else
				local monsterId = element("monsterId"):GetInt()
				local seasonalSigil=game.seasonalSigil(monsterId)
				if(seasonalSigil ~= "") then
					local item = menu:addTemplateElement("template_gene", "entry0", element)
					
					item("SpriteName"):SetString(seasonalSigil)
					item("SheetName"):SetString("xml_resources/hud02.xml")
					item("Size"):SetFloat(size)
					item("Layer"):SetString(layer)
					
					item:setOrientation(lua_sys.MenuOrientation(offsetX, offsetY, priority, lua_sys.LEFT, lua_sys.VCENTER))
					item:setRelativeObjectAnchors(lua_sys.LEFT, lua_sys.VCENTER)
					
					item:init()
					item:setPositionBroadcast(true)
					item:postInit()
					
					offsetX = offsetX + item:absW()
					
					height = item:absH()
				end
			end
			
			element:setSize(Vector2(offsetX, height))
			element("xOffset"):SetInt(element("xOffset"):GetInt())
				
			
			element("populated"):SetInt(1)
			
			if element("visible"):GetInt() == 0 then
				element:DoStoredScript("hide")
			end
			
			if element:HasVar("alpha") then
				element:DoStoredScript("update")
			end
			
			if element:HasVar("clipX") then
				element:DoStoredScript("updateClipping")
			end
			
		]]>
	</event>

	<event name="repopulate" params="element">
		<![CDATA[
			include("MenuHelpers").ForEachEntry(element, 
				function(entry)
					element:RemoveElement(entry)
				end
			)
			element:DoStoredScript("populate")
		]]>
	</event>

	<event name="show" params="element">
		<![CDATA[
				element("visible"):SetInt(1)
				include("MenuHelpers").ForEachEntry(element, 
					function(entry)
						entry["Sprite"]("visible"):SetInt(1)
					end)
			]]>
	</event>

	<event name="setVisible" params="element">
		<![CDATA[
			element:DoStoredScript("show")
		]]>
	</event>
	
	<event name="hide" params="element">
		<![CDATA[
				element("visible"):SetInt(0)
				include("MenuHelpers").ForEachEntry(element, 
					function(entry)
						entry["Sprite"]("visible"):SetInt(0)
					end)
			]]>
	</event>

	<event name="setInvisible" params="element">
		<![CDATA[
			element:DoStoredScript("hide")
		]]>
	</event>

	<event name="update" params="element">
		<![CDATA[
			local alpha = element("alpha"):GetFloat()
			include("MenuHelpers").ForEachEntry(element, 
				function(entry)
					entry["Sprite"]("alpha"):SetFloat(alpha)
				end)
		]]>
	</event>

	<event name="enable" params="element">
		<![CDATA[
				include("MenuHelpers").ForEachEntry(element, 
				function(entry)
					entry["Sprite"]:setColor(1.0, 1.0, 1.0)
				end)
		]]>
	</event>

	<event name="disable" params="element">
		<![CDATA[
				include("MenuHelpers").ForEachEntry(element, 
				function(entry)
					entry["Sprite"]:setColor(0.5, 0.5, 0.5)
				end)
		]]>
	</event>

	<event name="updateClipping" params="element">
		<![CDATA[
			local MenuHelpers = include("MenuHelpers")
			MenuHelpers.ForEachEntry(element, 
				function(entry)
					MenuHelpers.SetClipFrom(entry:GetComponent("Sprite"), element)
				end)
		]]>
	</event>
	
<!--
	<spriteComponent name="genes_test_box">
		<position relativeTo="element:name()" vAnchor="VCENTER" hAnchor="HCENTER" />
		<orientation vAnchor="VCENTER" hAnchor="HCENTER" xOffset="0" yOffset="0" priorityOffset="-1" />
		<event name="onPostInit" params="component, element">
			<![CDATA[
					component("spriteName"):SetString("__BUILTIN__WHITE_TEXTURE")
					component:setScale(Vector2( element:absW() / 4.0, element:absH() / 4.0))
					component:setColor(1.0, 0.0, 0.0)
					component("alpha"):SetFloat(0.5)
					component("layer"):SetString(element("Layer"):GetString())
					component("visible"):SetInt(1)
				]]>
		</event>
	</spriteComponent>
-->
	
</template>