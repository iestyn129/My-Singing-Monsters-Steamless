<template name="template_battle_attempts" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="../menus/menu.xsd">

	<defaultTemplateVar name="$TopLabel" equals="1" />

	<size w="96*game.menuScaleX()" h="32*game.menuScaleY()" />

	<!--
			<spriteComponent name="test_box">
				<position relativeTo="element:name()" vAnchor="VCENTER" hAnchor="HCENTER" />
				<orientation vAnchor="VCENTER" hAnchor="HCENTER" xOffset="0" yOffset="0" priorityOffset="-1" />
				<event name="onPostInit" params="component, element">
					<![CDATA[
						component("spriteName"):SetString("__BUILTIN__WHITE_TEXTURE")
						component:setScale(
							Vector2( element:absW() / 4.0, element:absH() / 4.0))
						component:setColor(1.0, 0.0, 0.0)
						component("alpha"):SetFloat(0.5)
						component("layer"):SetString("MidPopUps")
						component("visible"):SetInt(1)
					]]>
				</event>
			</spriteComponent>
		-->

	<textComponent name="LabelText">
		<size w="130*game.menuScaleX()" h="16*game.menuScaleY()" />

		<event name="onInit" params="component, element">
			<![CDATA[

				element("TopLabel"):SetInt($TopLabel)

				local priority = -1

				if $TopLabel == 1 then
					component:setOrientation(MenuOrientation(0, 8*game.menuScaleY(), priority, HCENTER, VCENTER))
					component:setRelativeObjectAnchors(HCENTER, TOP)
					component("alignment"):SetInt(MenuTextComponent_TEXT_HCENTER_ALIGNED)
				else
					component:setOrientation(MenuOrientation(0, 6*game.menuScaleX(), priority, LEFT, VCENTER))
					component:setRelativeObjectAnchors(HCENTER, VCENTER)
					component("alignment"):SetInt(MenuTextComponent_TEXT_LEFT_ALIGNED)
				end

				component("textPadding"):SetInt(3*game.menuScaleX())
				component("size"):SetFloat(0.2*game.menuScaleY())
				component("autoScale"):SetInt(1)
				component("autoScaleFactor"):SetFloat(0.01)
				component("multiline"):SetInt(0)
				component("font"):Set(game.getTextFont())
				component("layer"):SetString("MidPopUps")
				component("text"):SetString("BATTLE_VERSUS_ATTEMPTS_AVAILABLE")
			]]>
		</event>
	</textComponent>

	<textComponent name="TimerText">
		<size w="130*game.menuScaleX()" h="16*game.menuScaleY()" />
		<position relativeTo="element:name()" vAnchor="BOTTOM" hAnchor="HCENTER" />
		<orientation vAnchor="VCENTER" hAnchor="LEFT" xOffset="0" yOffset="-12*game.menuScaleY()" priorityOffset="-1" />
		<event name="onInit" params="component, element">
			<![CDATA[
				component("textPadding"):SetInt(3*game.menuScaleX())
				component("size"):SetFloat(0.25*game.menuScaleY())
				component("autoScale"):SetInt(1)
				component("autoScaleFactor"):SetFloat(0.01)
				component("multiline"):SetInt(0)
				component("font"):Set(game.getTextFont())
				component("alignment"):SetInt(MenuTextComponent_TEXT_LEFT_ALIGNED)
				component("layer"):SetString("MidPopUps")
				component("text"):SetString("4:30:36")
				component:setColor(0.56, 0.88, 0.18)
			]]>
		</event>
	</textComponent>


	<event name="onInit" params="element">
		<![CDATA[
			include("BattleAttemptsUI").onInit(element)
		]]>
	</event>

	<event name="onPostInit" params="element">
		<![CDATA[
			include("BattleAttemptsUI").onPostInit(element)
		]]>
	</event>

	<event name="gotMsgBattleAttemptsRefreshed" params="element, msg">
		<![CDATA[
			include("BattleAttemptsUI").gotMsgBattleAttemptsRefreshed(element, msg)
		]]>
	</event>

	<event name="onTick" params="element, dt">
		<![CDATA[
			include("BattleAttemptsUI").onTick(element, dt)
		]]>
	</event>

	<event name="populate" params="element">
		<![CDATA[
			include("BattleAttemptsUI").populate(element)
		]]>
	</event>

	<event name="refreshUI" params="element">
		<![CDATA[
			include("BattleAttemptsUI").refreshUI(element)
		]]>
	</event>



</template>