<template name="template_itemsaletag" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="../menus/menu.xsd">
	
	<!-- THIS IS ONLY USED FOR NON-CURRENCY SALES, see template_saletag.xml for currency sales -->
	
	<size dependentOnElement="Tag" />
	<event name="onInit" params="element">
		element("SaleNormal"):SetInt(0)
	</event>
	
	<event name="hide" params="element">
		element["Tag"]("visible"):SetInt(0)
		element["SaleAmount"]["Text"]("visible"):SetInt(0)
		element["CurrencySprite"]["Sprite"]("visible"):SetInt(0)
		element["SaleDuration"]["Text"]("visible"):SetInt(0)
		element["OriginalAmount"]["Text"]("visible"):SetInt(0)
		element["OriginalCurrencySprite"]["Sprite"]("visible"):SetInt(0)
		element["RedStrip"]["Sprite"]("visible"):SetInt(0)
	</event>
	
	<event name="show" params="element">
		element["Tag"]("visible"):SetInt(1)
		element["SaleAmount"]["Text"]("visible"):SetInt(1)
		element["CurrencySprite"]["Sprite"]("visible"):SetInt(1)
		if(element("SaleNormal"):GetInt()==0) then
			element["SaleDuration"]["Text"]("visible"):SetInt(1)
		end
		element["OriginalAmount"]["Text"]("visible"):SetInt(1)
		element["OriginalCurrencySprite"]["Sprite"]("visible"):SetInt(1)
		element["RedStrip"]["Sprite"]("visible"):SetInt(1)
	</event>
	
	<event name="showDisabled" params="element">
		element["Tag"]("visible"):SetInt(1)
		element["Tag"]:setColor(0.5, 0.5, 0.5)
		
		local saleText = element["SaleAmount"]["Text"];
		saleText("visible"):SetInt(1)
		saleText:setColor(saleText("red"):GetFloat()*0.5, saleText("green"):GetFloat()*0.5, saleText("blue"):GetFloat()*0.5)
		
		element["CurrencySprite"]["Sprite"]("visible"):SetInt(1)
		element["CurrencySprite"]["Sprite"]:setColor(0.5, 0.5, 0.5)
		
		if(element("SaleNormal"):GetInt()==0) then
			element["SaleDuration"]["Text"]("visible"):SetInt(1)
			element["SaleDuration"]["Text"]:setColor(0.5, 0.5, 0.5)
		end
		
		local originalAmt = element["OriginalAmount"]["Text"];
		originalAmt("visible"):SetInt(1)
		originalAmt:setColor(originalAmt("red"):GetFloat()*0.5, originalAmt("green"):GetFloat()*0.5, originalAmt("blue"):GetFloat()*0.5)
		
		element["OriginalCurrencySprite"]["Sprite"]("visible"):SetInt(1)
		element["OriginalCurrencySprite"]["Sprite"]:setColor(0.5, 0.5, 0.5)
		
		element["RedStrip"]["Sprite"]("visible"):SetInt(1)
		element["RedStrip"]["Sprite"]:setColor(0.5, 0.5, 0.5)
	</event>
	
	<spriteSheetComponent name="Tag">
		<position relativeTo="PARENT" vAnchor="VCENTER" hAnchor="HCENTER" />
		<orientation vAnchor="VCENTER" hAnchor="HCENTER" xOffset="0" yOffset="0" priorityOffset="0" />
		<event name="onInit" params="component, element">
			component("spriteName"):SetString("sale_tag_updated_taller")
			component("sheetName"):SetString("xml_resources/store_buttons01.xml")
			component("size"):SetFloat(0.5*game.menuScaleX())
			component("layer"):SetString("HUD")
		</event>
	</spriteSheetComponent>
	
	<element name="SaleAmount">
		<size dependentOnElement="element:name()" dependentOnComponent="Text" />
		<position relativeTo="PARENT" vAnchor="VCENTER" hAnchor="HCENTER" />
		<orientation vAnchor="VCENTER" hAnchor="HCENTER" xOffset="10*game.menuScaleX()" yOffset="-4*game.menuScaleX()" priorityOffset="-1" />
		<textComponent name="Text">
			<size w="96*game.menuScaleX()" />
			<position relativeTo="PARENT" vAnchor="VCENTER" hAnchor="HCENTER" />
			<orientation vAnchor="VCENTER" hAnchor="HCENTER" xOffset="0" yOffset="0" priorityOffset="0" />
			<event name="onInit" params="component, element">
				component("multiline"):SetInt(0)
				component("autoScaleFactor"):SetFloat(0.01)
				component("autoScale"):SetInt(1)
				component("font"):Set(game.getTextFont())
				component("size"):SetFloat(0.27*game.menuScaleX())
				component("alignment"):SetInt(lua_sys.MenuTextComponent_TEXT_HCENTER_ALIGNED)
				component("text"):SetString(game.commaizeNumber(element:parent()("SaleAmount"):GetInt()))
				component("layer"):SetString("HUD")
				game.StoreContext_setCurrencyTypeColour(element:parent()("SaleCurrencyType"):GetString(), component)
			</event>
		</textComponent>
	</element>
	
	<element name="CurrencySprite">
		<size dependentOnElement="element:name()" dependentOnComponent="Sprite" />
		<position relativeTo="SaleAmount" vAnchor="VCENTER" hAnchor="LEFT" />
		<orientation vAnchor="VCENTER" hAnchor="RIGHT" xOffset="0" yOffset="0*game.menuScaleX()" priorityOffset="0" />
		<spriteSheetComponent name="Sprite">
			<event name="onInit" params="component, element">
				<![CDATA[
					local currencyType = element:parent()("SaleCurrencyType"):GetString()
				
					if(currencyType == game.StoreContext_TYPE_COINS) then
						component("spriteName"):SetString(game.StoreContext_SPRITE_COINS)
					elseif(currencyType == game.StoreContext_TYPE_ETH_CURRENCY) then
						component("spriteName"):SetString(game.StoreContext_SPRITE_ETH_CURRENCY)
					elseif(currencyType == game.StoreContext_TYPE_DIAMOND) then
						component("spriteName"):SetString(game.StoreContext_SPRITE_DIAMOND)
					elseif(currencyType == game.StoreContext_TYPE_FOOD) then
						component("spriteName"):SetString(game.StoreContext_SPRITE_FOOD)
					elseif(currencyType == game.StoreContext_TYPE_STARPOWER) then
						component("spriteName"):SetString(game.StoreContext_SPRITE_STARPOWER)
					elseif(currencyType == game.StoreContext_TYPE_KEYS) then
						component("spriteName"):SetString(game.StoreContext_SPRITE_KEY)
					elseif(currencyType == game.StoreContext_TYPE_RELICS) then
						component("spriteName"):SetString(game.StoreContext_SPRITE_RELIC)
						elseif(currencyType == game.StoreContext_TYPE_MEDALS) then
						component("spriteName"):SetString(game.StoreContext_SPRITE_MEDAL)
					end
			
					component("sheetName"):SetString(game.StoreContext_CURRENCY_SPRITESHEET)
					component("size"):SetFloat(0.25*game.menuScaleX())
					component("layer"):SetString("HUD")
				]]>
			</event>
		</spriteSheetComponent>
	</element>
	
	<element name="SaleDuration">
		<size dependentOnElement="element:name()" dependentOnComponent="Text" />
		<position relativeTo="PARENT" vAnchor="VCENTER" hAnchor="HCENTER" />
		<orientation vAnchor="VCENTER" hAnchor="HCENTER" xOffset="0" yOffset="6*game.menuScaleX()" priorityOffset="-1" />
		<textComponent name="Text">
			<size w="96*game.menuScaleX()" />
			<position relativeTo="PARENT" vAnchor="VCENTER" hAnchor="HCENTER" />
			<orientation vAnchor="VCENTER" hAnchor="HCENTER" xOffset="0" yOffset="0" priorityOffset="0" />
			<event name="onInit" params="component, element">
				component("multiline"):SetInt(0)
				component("font"):Set(game.getTextFont())
				component("size"):SetFloat(0.20*game.menuScaleX())
				component("alignment"):SetInt(lua_sys.MenuTextComponent_TEXT_HCENTER_ALIGNED)
				component("text"):SetString(game.timeToString(store:RemainingSaleTime(element:parent():parent()("ID"):GetInt())))
				component("autoScaleFactor"):SetFloat(0.01)
				component("autoScale"):SetInt(1)
				component("layer"):SetString("HUD")
				component("visible"):SetInt(0)
			</event>
		</textComponent>
		<event name="onTick" params="element, dt">
			<![CDATA[
				if(element["Text"]("visible"):GetInt()==1) then
					local secondsRemaining = store:RemainingSaleTime(element:parent():parent()("ID"):GetInt());
					if(secondsRemaining > 0) then
						element["Text"]("text"):SetString(game.timeToString(secondsRemaining))
					else
						element:parent():DoStoredScript("hide")
					end
				end
			]]>
		</event>
	</element>
	
	<event name="SetPositionForTimedSaleNormalMonster" params="element">
		element("SaleNormal"):SetInt(1)
		element["SaleDuration"]["Text"]("visible"):SetInt(0)
		local origAmount = element:GetElement("OriginalAmount")
		origAmount:setRelativeObjectAnchors(lua_sys.HCENTER, lua_sys.VCENTER)
		origAmount:setOrientationAnchors(lua_sys.HCENTER, lua_sys.VCENTER)
		origAmount("yOffset"):SetInt(10*game.menuScaleX());
	</event>

	<event name="SetPositionForTimedSaleLimitedAvailMonster" params="element">
		element("SaleNormal"):SetInt(0)
		element["SaleDuration"]["Text"]("visible"):SetInt(1)
		local saleAmount = element:GetElement("SaleAmount")
		saleAmount:setOrientationAnchors(lua_sys.RIGHT, lua_sys.VCENTER)
		saleAmount("xOffset"):SetInt(0)
		local origAmount = element:GetElement("OriginalAmount")
		origAmount:setRelativeObjectAnchors(lua_sys.RIGHT, lua_sys.VCENTER)
		origAmount:setOrientationAnchors(lua_sys.LEFT, lua_sys.VCENTER)
		origAmount("xOffset"):SetInt(20*game.menuScaleX())
		origAmount("yOffset"):SetInt(0)
	</event>
	
	<element name="OriginalAmount">
		<size dependentOnElement="element:name()" dependentOnComponent="Text" />
		<position relativeTo="SaleAmount" vAnchor="VCENTER" hAnchor="HCENTER" />
		<orientation vAnchor="VCENTER" hAnchor="HCENTER" xOffset="-10*game.menuScaleX()" yOffset="10*game.menuScaleX()" priorityOffset="-0.25" />
		<textComponent name="Text">
			<position relativeTo="PARENT" vAnchor="VCENTER" hAnchor="HCENTER" />
			<orientation vAnchor="VCENTER" hAnchor="HCENTER" xOffset="0" yOffset="0" priorityOffset="0" />
			<event name="onInit" params="component, element">
				component("multiline"):SetInt(0)
				component("autoScaleFactor"):SetFloat(0.01)
				component("autoScale"):SetInt(1)
				component("font"):Set(game.getTextFont())
				component("size"):SetFloat(0.16*game.menuScaleX())
				component("alignment"):SetInt(lua_sys.MenuTextComponent_TEXT_HCENTER_ALIGNED)
				component("text"):SetString(game.commaizeNumber(store:ItemCost(element:parent():parent()("ID"):GetInt())))
				component("layer"):SetString("HUD")
				game.StoreContext_setCurrencyTypeColour(element:parent()("CurrencyType"):GetString(), component)
				component("alpha"):SetFloat(0.5)
			</event>
		</textComponent>
	</element>
	
	<element name="OriginalCurrencySprite">
		<size dependentOnElement="element:name()" dependentOnComponent="Sprite" />
		<position relativeTo="element:parent()[&quot;OriginalAmount&quot;]" vAnchor="VCENTER" hAnchor="LEFT" />
		<orientation vAnchor="VCENTER" hAnchor="RIGHT" xOffset="0" yOffset="0*game.menuScaleX()" priorityOffset="0" />
		<spriteSheetComponent name="Sprite">
			<event name="onInit" params="component, element">
				<![CDATA[
					local currencyType = element:parent()("CurrencyType"):GetString()
				
					if(currencyType == game.StoreContext_TYPE_COINS) then
						component("spriteName"):SetString(game.StoreContext_SPRITE_COINS)
					elseif(currencyType == game.StoreContext_TYPE_ETH_CURRENCY) then
						component("spriteName"):SetString(game.StoreContext_SPRITE_ETH_CURRENCY)
					elseif(currencyType == game.StoreContext_TYPE_DIAMOND) then
						component("spriteName"):SetString(game.StoreContext_SPRITE_DIAMOND)
					elseif(currencyType == game.StoreContext_TYPE_FOOD) then
						component("spriteName"):SetString(game.StoreContext_SPRITE_FOOD)
					elseif(currencyType == game.StoreContext_TYPE_STARPOWER) then
						component("spriteName"):SetString(game.StoreContext_SPRITE_STARPOWER)
					elseif(currencyType == game.StoreContext_TYPE_KEYS) then
						component("spriteName"):SetString(game.StoreContext_SPRITE_KEY)
					elseif(currencyType == game.StoreContext_TYPE_RELICS) then
						component("spriteName"):SetString(game.StoreContext_SPRITE_RELIC)
					elseif(currencyType == game.StoreContext_TYPE_MEDALS) then
						component("spriteName"):SetString(game.StoreContext_SPRITE_MEDAL)
					end
			
					component("sheetName"):SetString(game.StoreContext_CURRENCY_SPRITESHEET)
					component("size"):SetFloat(0.15*game.menuScaleX())
					component("layer"):SetString("HUD")
					component("alpha"):SetFloat(0.5)
				]]>
			</event>
		</spriteSheetComponent>
	</element>
	
	<element name="RedStrip">
		<size dependentOnElement="element:name()" dependentOnComponent="Sprite" />
		<position relativeTo="OriginalAmount" vAnchor="VCENTER" hAnchor="HCENTER" />
		<orientation vAnchor="VCENTER" hAnchor="HCENTER" xOffset="0" yOffset="0*game.menuScaleX()" priorityOffset="-1" />
		<ninesliceComponent name="Sprite">
			<size w="4" h="4" />
			<position relativeTo="PARENT" vAnchor="VCENTER " hAnchor="HCENTER" />
			<orientation vAnchor="VCENTER" hAnchor="HCENTER" xOffset="0" yOffset="0" priorityOffset="0" />
			<event name="onInit" params="component, element">
				component("includeBorder"):SetInt(1)
				component("topHeight"):SetFloat(1.0)
				component("bottomHeight"):SetFloat(1.0)
				component("leftWidth"):SetFloat(1.0)
				component("rightWidth"):SetFloat(1.0)
				component("alpha"):SetFloat(0.6)
				component("spriteName"):SetString("gfx/menu/redstrip")
				component("layer"):SetString("HUD")
				component:setSize(Vector2(element:parent():GetElement("OriginalAmount"):absW(), component:absH()))
			</event>
		</ninesliceComponent>
	</element>
	
</template>