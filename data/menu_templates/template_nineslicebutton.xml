<template name="template_nineslicebutton" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="../menus/menu.xsd">
	
	<defaultTemplateVar name="$upSpriteName" equals="'button_base_grey'" />
	<defaultTemplateVar name="$downSpriteName" equals="''" />
	<defaultTemplateVar name="$spriteHFlip" equals="0" />
	<defaultTemplateVar name="$spriteScale" equals="1.0" />
	<defaultTemplateVar name="$textXOffset" equals="0" />
	<defaultTemplateVar name="$textYOffset" equals="0" />
	<defaultTemplateVar name="$text" equals="" />
	<defaultTemplateVar name="$sfx" equals="[[audio/sfx/menu_click.wav]]" />
	<defaultTemplateVar name="$layer" equals="HUD" />
	<defaultTemplateVar name="$textPadding" equals="0.0" />
	<defaultTemplateVar name="$multiLine" equals="0" />
	<defaultTemplateVar name="$autoScaleFactor" equals="0.05" />
	<defaultTemplateVar name="$buttonMapping" equals="0" />
	<defaultTemplateVar name="$lockEnabled" equals="0" />

	<defaultTemplateVar name="$topHeight" equals="1" />
	<defaultTemplateVar name="$bottomHeight" equals="1" />
	<defaultTemplateVar name="$leftWidth" equals="1" />
	<defaultTemplateVar name="$rightWidth" equals="1" />
	
	<defaultTemplateVar name="$width" equals="0" />
	<defaultTemplateVar name="$height" equals="0" />
	
	<defaultTemplateVar name="$alpha" equals="1.0" />

	<defaultTemplateVar name="$includeBorder" equals="1" />
	
	<defaultTemplateVar name="$tintR" equals="1.0" />
	<defaultTemplateVar name="$tintG" equals="1.0" />
	<defaultTemplateVar name="$tintB" equals="1.0" />
	
	<size dependentOnElement="element:name()" dependentOnComponent="BoundsSprite" />
	
	<!-- don't like this extra object, but I want the interface of this to match template_spritesheetbutton's for ease of substitution, and template_spritesheetbutton relies on this-->
	<ninesliceComponent name="BoundsSprite">
		<position relativeTo="PARENT" vAnchor="VCENTER" hAnchor="HCENTER" />
		<orientation vAnchor="VCENTER" hAnchor="HCENTER" xOffset="0" yOffset="0" priorityOffset="0" />
		<event name="onInit" params="component, element">
			component("flip"):SetInt($spriteHFlip)
			
			component("topHeight"):SetFloat($topHeight)
			component("bottomHeight"):SetFloat($bottomHeight)
			component("leftWidth"):SetFloat($leftWidth)
			component("rightWidth"):SetFloat($rightWidth)
			component("width"):SetInt($width)
			component("height"):SetInt($height)
			
			component("includeBorder"):SetInt($includeBorder)
			component("size"):SetFloat($spriteScale)
			component("spriteName"):SetString("$upSpriteName")
			component("layer"):SetString("$layer")
			component("alpha"):SetFloat($alpha)
			component("visible"):SetInt(0)
		</event>
	</ninesliceComponent>
	
	<!-- UpSprite: Sprite displayed when the user has not pressed the button. -->
	<ninesliceComponent name="UpSprite">
		<position relativeTo="PARENT" vAnchor="VCENTER" hAnchor="HCENTER" />
		<orientation vAnchor="VCENTER" hAnchor="HCENTER" xOffset="0" yOffset="0" priorityOffset="0" />
		<event name="onInit" params="component, element">
			component("flip"):SetInt($spriteHFlip)
			
			component("topHeight"):SetFloat($topHeight)
			component("bottomHeight"):SetFloat($bottomHeight)
			component("leftWidth"):SetFloat($leftWidth)
			component("rightWidth"):SetFloat($rightWidth)
			component("width"):SetInt($width)
			component("height"):SetInt($height)
			
			component("includeBorder"):SetInt($includeBorder)
			component("size"):SetFloat($spriteScale)
			component("spriteName"):SetString("$upSpriteName")
			component("layer"):SetString("$layer")
			component("alpha"):SetFloat($alpha)

			if element.enabled then
				component:setColor($tintR, $tintG, $tintB)
			else
				component:setColor($tintR/2, $tintG/2, $tintB/2)
			end
		</event> 
	</ninesliceComponent>
	
	<!-- DownSprite: Sprite displayed when a mouse-down/touch-down event has been registered on the button. -->
	<ninesliceComponent name="DownSprite">
		<position relativeTo="PARENT" vAnchor="VCENTER" hAnchor="HCENTER" />
		<orientation vAnchor="VCENTER" hAnchor="HCENTER" xOffset="0" yOffset="0" priorityOffset="0" />
		<event name="onInit" params="component, element">
			component("flip"):SetInt($spriteHFlip)

			component("topHeight"):SetFloat($topHeight)
			component("bottomHeight"):SetFloat($bottomHeight)
			component("leftWidth"):SetFloat($leftWidth)
			component("rightWidth"):SetFloat($rightWidth)
			component("width"):SetInt($width)
			component("height"):SetInt($height)

			component("includeBorder"):SetInt($includeBorder)
			component("size"):SetFloat($spriteScale)
			if ("$downSpriteName" ~= "" and "$downSpriteName" ~= "''" ) then
				component("spriteName"):SetString("$downSpriteName")
			end
			component("visible"):SetInt(0)
			component("layer"):SetString("$layer")
			component("alpha"):SetFloat($alpha)
			component:setColor($tintR, $tintG, $tintB)
		</event>
	</ninesliceComponent>
	
	<!-- Text: Text to be displayed within the button. -->
	<textComponent name="Text">
		<size dependentOnElement="element:name()" dependentOnComponent="BoundsSprite" />
		<position relativeTo="element:name()" vAnchor="VCENTER" hAnchor="HCENTER" />
		<orientation vAnchor="VCENTER" hAnchor="HCENTER" xOffset="0" yOffset="0" priorityOffset="-1" />
		<event name="onInit" params="component, element">
			component:GetVar("multiline"):SetInt($multiLine)
			component:GetVar("textPadding"):SetInt($textPadding)
			component:GetVar("font"):Set(game.getTextFont())
			component:GetVar("size"):SetFloat($spriteScale)
			component:GetVar("alignment"):SetInt(lua_sys.MenuTextComponent_TEXT_HCENTER_ALIGNED)
			component:GetVar("text"):SetString("$text")
			component:GetVar("xOffset"):SetInt($textXOffset)
			component:GetVar("yOffset"):SetInt($textYOffset)
			component:GetVar("autoScaleFactor"):SetFloat($autoScaleFactor)
			component:GetVar("autoScale"):SetInt(1)
			component:GetVar("layer"):SetString("$layer")
			component:GetVar("alpha"):SetFloat($alpha)
		</event>
	</textComponent>
	
	<touchComponent name="Touch">	
		<size dependentOnElement="element:name()" dependentOnComponent="BoundsSprite" />
		<event name="onInit" params="component, element">
			component("singleTouch"):SetInt(1)
		</event>
		<event name="onTouchDown" params="component, element">
			if($downSpriteName ~= "") then
				element["UpSprite"]("visible"):SetInt(0)
				element["DownSprite"]("visible"):SetInt(1)
			else
				element["UpSprite"]:setColor($tintR/2, $tintG/2, $tintB/2)
			end
			element["Text"]:setColor(0.5, 0.5, 0.5)
			
			element("ButtonState"):SetInt(game.BUTTON_PRESSED)
			element("TickTimer"):SetFloat(0.0)
		</event>
		<event name="onTouchUp" params="component, element">
			if($downSpriteName ~= "") then
				element["UpSprite"]("visible"):SetInt(1)
				element["DownSprite"]("visible"):SetInt(0)
			else
				element["UpSprite"]:setColor($tintR, $tintG, $tintB)
			end
			element["Text"]:setColor(1.0, 1.0, 1.0)
			
			if("$sfx" ~= "") then
				lua_sys.playSoundFx("$sfx")
			end
			element("ButtonState"):SetInt(game.BUTTON_RELEASED)
			element("TickTimer"):SetFloat(0.0)
			
			if($lockEnabled == 1) then
				element("isCurrentlyLocked"):SetInt(1)
				component("enabled"):SetInt(0)
			end
		</event>
		<event name="onTouchRelease" params="component, element">
			if($downSpriteName ~= "") then
				element["UpSprite"]("visible"):SetInt(1)
				element["DownSprite"]("visible"):SetInt(0)
			else
				element["UpSprite"]:setColor($tintR, $tintG, $tintB)
			end
			element["Text"]:setColor(1.0, 1.0, 1.0)
			
			element("ButtonState"):SetInt(game.BUTTON_RELEASED)
			element("TickTimer"):SetFloat(0.0)
		</event>			
	</touchComponent>
	
	<event name="onInit" params="element">
		element:setPositionBroadcast(true)
		element("locked"):SetInt(0) -- Used so I can disable after a touch
		
		if($buttonMapping ~= 0) then
			element("buttonDown"):SetInt(0)
			element:SetupGenericListener(game.engineReceiver(), "sys::msg::MsgKeyDown", "gotMsgKeyDown")
			element:SetupGenericListener(game.engineReceiver(), "sys::msg::MsgKeyUp", "gotMsgKeyUp")
		end
		
		element("ButtonState"):SetInt(game.BUTTON_IDLE)
		element("TickTimer"):SetFloat(0.0)
		element("isCurrentlyLocked"):SetInt(0)
		element("alpha"):SetFloat($alpha)

		element.enabled = true
	</event>
	
	<event name="onTick" params="element, dt">
		<![CDATA[
			local buttonState = element("ButtonState"):GetInt()
			local isLocked = element("isCurrentlyLocked"):GetInt()
			
			if(buttonState ~= game.BUTTON_IDLE or isLocked == 1) then
				local buttonSize = $spriteScale
				local newTime = element("TickTimer"):GetFloat() + dt
				element("TickTimer"):SetFloat(newTime)
				
				if(buttonState == game.BUTTON_PRESSED) then
					local size = lua_sys.smooth(buttonSize, buttonSize - 0.03, newTime*15)
					element["UpSprite"]("size"):SetFloat(size)
					
					if(size == buttonSize - 0.03) then
						element("ButtonState"):SetInt(game.BUTTON_IDLE)
					end
				elseif(buttonState == game.BUTTON_RELEASED) then
					if(newTime < 0.1) then
						local size = lua_sys.smooth(buttonSize - 0.03, buttonSize + 0.05, newTime*20)
						element["UpSprite"]("size"):SetFloat(size)
						
					elseif(newTime < 0.3) then
						local size = lua_sys.smooth(buttonSize + 0.05, buttonSize, (newTime-0.1)*20)
						element["UpSprite"]("size"):SetFloat(size)
						
						if(size == buttonSize) then
							element("ButtonState"):SetInt(game.BUTTON_IDLE)
						end
					end
				end
			end
			
			if(isLocked == 1 and element("TickTimer"):GetFloat() > 1) then
				element("isCurrentlyLocked"):SetInt(0)
				element["Touch"]("enabled"):SetInt(1)
			end
		]]>
	</event>
	
	<function name="setVisible" params="element">
		element["UpSprite"]("visible"):SetInt(1)
		element["Text"]("visible"):SetInt(1)
		--[[if this isn't reset when text sprite goes invis then visible, the text will move down (at least with multiline 0)]]
		element["Text"]("multiline"):SetInt($multiLine)
		element["Touch"]("enabled"):SetInt(1)
	</function>
	
	<function name="setInvisible" params="element">
		element["UpSprite"]("visible"):SetInt(0)
		element["DownSprite"]("visible"):SetInt(0)
		element["Text"]("visible"):SetInt(0)
		element["Touch"]("enabled"):SetInt(0)
	</function>
	
	<function name="enable" params="element">
		if($downSpriteName ~= "") then
			element["UpSprite"]("visible"):SetInt(1)
			element["DownSprite"]("visible"):SetInt(0)
		else
			element["UpSprite"]:setColor($tintR, $tintG, $tintB)
		end
		element["Text"]:setColor(1.0, 1.0, 1.0)
		element["Touch"]("enabled"):SetInt(1)

		element.enabled = true
	</function>
	
	<function name="disable" params="element">
		if($downSpriteName ~= "") then
			element["UpSprite"]("visible"):SetInt(0)
			element["DownSprite"]("visible"):SetInt(1)
		else
			element["UpSprite"]:setColor($tintR/2, $tintG/2, $tintB/2)
		end
		element["Text"]:setColor(0.5, 0.5, 0.5)
		element["Touch"]("enabled"):SetInt(0)
		
		element.enabled = false
	</function>
	
	<function name="updateComponents" params="element">
		local alpha = element("alpha"):GetFloat()
		element["UpSprite"]("alpha"):SetFloat(alpha)
		element["DownSprite"]("alpha"):SetFloat(alpha)
		element["Text"]("alpha"):SetFloat(alpha)
	</function>
	
	<event name="gotMsgKeyDown" params="element, msg">
		if($buttonMapping == msg.key.val and element["Touch"]("enabled"):GetInt() ~= 0 and element("buttonDown"):GetInt() == 0) then
			element["Touch"]("checkOnTop"):SetInt(0)
			if(element["Touch"]("onTop"):GetInt() == 1) then
				element("buttonDown"):SetInt(msg.key.val)
				element["Touch"]:DoStoredScript("onTouchDown")
			end
		end
	</event>
	
	<event name="gotMsgKeyUp" params="element, msg">
		if($buttonMapping == msg.key.val and element["Touch"]("enabled"):GetInt() ~= 0 and element("buttonDown"):GetInt() == msg.key.val) then
			element("buttonDown"):SetInt(0)
			element["Touch"]:DoStoredScript("onTouchUp")
		end
	</event>
	
</template>