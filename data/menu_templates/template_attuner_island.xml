<template name="template_attuner_island" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="../menus/menu.xsd">

	<defaultTemplateVar name="$scale" equals="1.0" />

	<size dependentOnElement="element:name()" dependentOnComponent="Sprite" />

	<spriteSheetComponent name="Sprite">
		<size dependentOnElement="element:name()" dependentOnComponent="Sprite" />
		<position relativeTo="PARENT" vAnchor="VCENTER" hAnchor="HCENTER" />
		<orientation vAnchor="VCENTER" hAnchor="HCENTER" xOffset="0" yOffset="0" priorityOffset="-2" />
		<event name="onInit" params="component, element">
		<![CDATA[
			local sheet = game.islandIconSheetForId(101)
			local sprite = game.islandIconSpriteForId(101)

			if(element.attunerGeneData ~= nil) then
				sheet = game.islandIconSheetForId(element.attunerGeneData.islandId)
				sprite = game.islandIconSpriteForId(element.attunerGeneData.islandId)
			end

			component("spriteName"):SetString(sprite)		
			component("sheetName"):SetString("xml_resources/"..sheet)
			component("size"):SetFloat($scale*0.2*game.menuScaleX())
			component("layer"):SetString("MidPopUps")
		]]>
		</event>
	</spriteSheetComponent>

	
	<spriteSheetComponent name="SelectedSprite">
		<position relativeTo="element:name()" vAnchor="VCENTER" hAnchor="HCENTER" />
		<orientation vAnchor="VCENTER" hAnchor="HCENTER" xOffset="0" yOffset="0" priorityOffset="-1" />
		<event name="onInit" params="component, element">
		<![CDATA[
			local sheet = game.islandIconSheetForId(101)
			local sprite = game.islandIconSpriteForId(101)

			if(element.attunerGeneData ~= nil) then
				sheet = game.islandIconSheetForId(element.attunerGeneData.islandId)
				sprite = game.islandIconSpriteForId(element.attunerGeneData.islandId)
			end

			component("spriteName"):SetString(sprite)		
			component("sheetName"):SetString("xml_resources/"..sheet)
			component("size"):SetFloat($scale*0.225*game.menuScaleX())
			component("layer"):SetString("MidPopUps")

			local ShaderColorize = include("ShaderColorize")
			ShaderColorize:getUniform("u_Factor"):setFloat(1.0)
			component:setShader(ShaderColorize);

			component("visible"):SetInt(0)
		]]>
		</event>
	</spriteSheetComponent>

	<spriteSheetComponent name="ShadowSprite">
		<position relativeTo="element:name()" vAnchor="BOTTOM" hAnchor="HCENTER" />
		<orientation vAnchor="VCENTER" hAnchor="HCENTER" xOffset="0" yOffset="-2*game.menuScaleX()" priorityOffset="0" />
		<event name="onInit" params="component, element">
		<![CDATA[
			component("sheetName"):SetString("xml_resources/attune_menu_sheet.xml")
			component("spriteName"):SetString("attune_island_shadow")
			component("size"):SetFloat($scale*0.4*game.menuScaleX())
			component("layer"):SetString("MidPopUps")
			component:GetVar("xOffset"):SetInt($scale * 0)
			component:GetVar("yOffset"):SetInt($scale * -2*game.menuScaleX())
			component("visible"):SetInt(0)
		]]>
		</event>
	</spriteSheetComponent>

	<spriteSheetComponent name="DisabledSprite">
		
		<position relativeTo="element:name()" vAnchor="VCENTER" hAnchor="HCENTER" />
		<orientation vAnchor="VCENTER" hAnchor="HCENTER" xOffset="0" yOffset="0" priorityOffset="-4" />
		<event name="onInit" params="component, element">
		<![CDATA[
			component("spriteName"):SetString("no_ads_01")		
			component("sheetName"):SetString("xml_resources/currency_sheet02.xml")
			component("size"):SetFloat($scale*0.22*game.menuScaleX())
			component("layer"):SetString("MidPopUps")
			component("visible"):SetInt(0)
		]]>
		</event>
	</spriteSheetComponent>

	<spriteSheetComponent name="Gene">
		<position relativeTo="PARENT" vAnchor="TOP" hAnchor="LEFT" />
		<orientation vAnchor="LEFT" hAnchor="HCENTER" xOffset="10*game.menuScaleX()" yOffset="10*game.menuScaleX()" priorityOffset="-3" />
		<event name="onInit" params="component, element">
			<![CDATA[

				local gene = "G"

				if(element.attunerGeneData ~= nil) then
					gene = element.attunerGeneData.geneLetter
				end

				component("spriteName"):SetString(game.geneFilename(gene))
				component("sheetName"):SetString("xml_resources/hud02.xml")
				component("size"):SetFloat($scale*0.27*game.menuScaleX())
				component:GetVar("xOffset"):SetInt($scale * 10*game.menuScaleX())
				component:GetVar("yOffset"):SetInt($scale * 10*game.menuScaleX())
				component("layer"):SetString("MidPopUps")
			]]>
		</event>
	</spriteSheetComponent>

	<textComponent name="Text">
		<size w="65*game.menuScaleX()" h="100" />
		<position relativeTo="PARENT" vAnchor="BOTTOM" hAnchor="HCENTER" />
		<orientation vAnchor="VCENTER" hAnchor="HCENTER" xOffset="0" yOffset="-10*game.menuScaleX()" priorityOffset="-3" />
		<event name="onInit" params="component, element">
			component("multiline"):SetInt(0)
			component("font"):Set(game.getTextFont())
			component("alignment"):SetInt(MenuTextComponent_TEXT_HCENTER_ALIGNED)
			component("size"):SetFloat($scale*0.25*game.menuScaleX())
			component("autoScaleFactor"):SetFloat(0.01)
			component("autoScale"):SetInt(1)
			component("layer"):SetString("MidPopUps")

			local text = ""

			if(element.attunerGeneData ~= nil) then
				local gene = element.attunerGeneData.geneLetter

				text = LOC("ATTUNING_TIME")
				text = text:gsub("%${HOURS}", game.attunementDuration(gene))

				local offset = game.attunementOffset(gene)

				if(offset == 0) then
					element.textR = 0
					element.textG = 1
					element.textB = 0
					component:setColor(0,1,0)
				elseif( offset == 1) then
					element.textR = 1
					element.textG = 1
					element.textB = 0
					component:setColor(1,1,0)
				elseif( offset == 2) then
					element.textR = 1
					element.textG = 0
					element.textB = 0
					component:setColor(1,0,0)
				end		

				component:setColor(element.textR,element.textG,element.textB)
			end

			component("text"):SetString(text)

		</event>
	</textComponent>

	<touchComponent name="Touch">
		<size dependentOnElement="element:name()" dependentOnComponent="Sprite" />
		<position relativeTo="PARENT" vAnchor="VCENTER" hAnchor="HCENTER" />
		<orientation vAnchor="VCENTER" hAnchor="HCENTER" xOffset="0" yOffset="0" priorityOffset="0" />
		<event name="onTouchUp" params="component, element">
			<![CDATA[
				if not element.isSelected and not element.isDisabled then
					element:unGrey()
					element:parent():parent().newSelectedIsland = element
					if(element.isSelectedIsland) then
						element:parent():parent():clearSelectedIsland()
					else
						element:parent():parent():DoStoredScript("selectNewIsland")
					end
				end	
			]]>
		</event>
			<event name="onTouchDown" params="component, element, x, y">
			<![CDATA[
				if not element.isSelected and not element.isDisabled then
					element:grey()
				end
			]]>
		</event>
		<event name="onTouchRelease" params="component, element">
			<![CDATA[
				if not element.isDisabled and not element.isDisabled then
					element:unGrey()
				end
			]]>
		</event>
	</touchComponent>


	<script src="scripts/AttunerIslandEntry.lua" />

</template>